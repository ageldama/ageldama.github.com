<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 아겔로그</title>
    <link>http://localhost:1313/tags/java/</link>
    <description>Recent content in Java on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;http://localhost:1313/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Wed, 13 Nov 2019 00:00:00 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>(소프트웨어 고고학) 어째서 `String#replaceAll`처럼 메서드 경로의 구분자로 `#`을 쓸까?</title>
      <link>http://localhost:1313/posts/2019-11nov/why-sharpsign-in-method-path/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2019-11nov/why-sharpsign-in-method-path/</guid>
      <description>&lt;h1 id=&#34;오늘-아침&#34;&gt;오늘 아침&lt;/h1&gt;&#xA;&lt;p&gt;다음은 오늘 아침 트위터의 타임라인에서 내가 스쳐본 한 스크린샷의 일부이다:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2019-11nov/string-replace-js-w-sharpsign.png&#34; alt=&#34;img&#34;&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;뭐에 느낌을 받았냐하면, 바로 저 &lt;code&gt;String#replace(..)&lt;/code&gt; 이라는&#xA;부분이다. (다른 부분에서는 &lt;code&gt;String.prototype.replace(..)&lt;/code&gt; 와 같이&#xA;썼는데 굳이 저기서만 갑자기 튀어나온 표기법)&lt;/p&gt;&#xA;&lt;p&gt;사실 나도 종종 내가 작업한 코드의 문서를 쓰거나&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 아니면 다른 사람과&#xA;텍스트로 대화를 해야할 때 이렇게 표기를 해왔었다.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;각각의 언어들에서 (내가 생각하는) 저렇게 표기하는 근거들은 다음과 같다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Java: &lt;a href=&#34;https://www.oracle.com/technetwork/articles/java/index-137868.html&#34;&gt;https://www.oracle.com/technetwork/articles/java/index-137868.html&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;@see Component#getGraphics()&lt;/code&gt; JavaDoc안에서 다른 메서드,&#xA;필드를 참고로 넣고 싶을 때 이게 표준표기법이고&#xA;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html&#34;&gt;javadoc&lt;/a&gt;도&#xA;요렇게 써줘야 링크처리를 해준다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;JavaScript&#xA;&lt;ul&gt;&#xA;&lt;li&gt;공식적인건 아닌거 같다. &lt;a href=&#34;https://developer.mozilla.org/&#34;&gt;Mozilla&#xA;MDN&lt;/a&gt;을 봐도 그런 표기는 사용&#xA;안하는걸로 보인다.&lt;/li&gt;&#xA;&lt;li&gt;예: &lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/toString&#34;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/toString&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Ruby&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java와 마찬가지로 RDoc에서 강제한다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/18591938/what-is-the-sharp-number-pound-hash-sign-used-for-in-ruby&#34;&gt;스택오버플로우: What is the # (sharp, number, pound, hash) sign used for in Ruby?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/304400/use-a-hash-character-or-a-dot-when-referring-to-methods-and-fields-in-software-d&#34;&gt;스택오버플로우: Use a hash character or a dot when referring to&#xA;methods and fields in software documentation? [closed]&lt;/a&gt;에 답변이&#xA;있으나 내가 볼 땐 내 가설이 더 확실한 이야기라고 본다.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Erlang에 더 관심을 기울여야 할 시점인거 같다</title>
      <link>http://localhost:1313/posts/2017/2017-01-22-aio-rx-and-erlang/</link>
      <pubDate>Sun, 22 Jan 2017 16:15:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/2017/2017-01-22-aio-rx-and-erlang/</guid>
      <description>&lt;p&gt;그냥 최근의 자바나 node.js, 특히&#xA;자바의 &lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava&lt;/a&gt; 같은걸&#xA;보다보면, &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 뭔가 언어적으로&#xA;지원하지 않는걸 뜯어내서 동작하게 만들고 너무 골치가 아프게&#xA;만들어지는건 아닌가 생각도 든다. (사실상 콜백. ㅎㅎ)&lt;/p&gt;&#xA;&lt;p&gt;그리고 지금 한창 JDBC이라던지 이런 입출력과 관련된 부분에서 비동기&#xA;방식을 지원하려고 많은 변화가 있을만한 시점인거 같다.&lt;/p&gt;&#xA;&lt;p&gt;예상은 아마 몇년간은 이런 혼란이 자바쪽에는 계속 있을거 같다는&#xA;생각이다. (async/await 같은 키워드가 추가되고 하려면 자바에 몇년이 더&#xA;걸릴지는 아무도 모를거 같다. lambda이 추가되는데 얼마나 오래걸렸었는지&#xA;추억해보자..)&lt;/p&gt;&#xA;&lt;p&gt;그런데, &amp;ldquo;&lt;em&gt;아몰랑 닥치고 얼랭씁십다&lt;/em&gt;&amp;rdquo; 이런 얘기를 하고 싶은건 아닌데,&#xA;그래도 사실 자바로 이런걸 하고 있다보면, 얼랭에서 이미 잘 해결한&#xA;문제를 왜 이렇게 고민하고 있어야하고, 왜 이렇게 저수준의 작업을 매번&#xA;프로젝트를 만들때마다 해야할까 싶다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Immutables와 친숙한 오래된 문제들</title>
      <link>http://localhost:1313/posts/2017/2017-01-22-java-immutables-classic-problem/</link>
      <pubDate>Sun, 22 Jan 2017 16:15:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/2017/2017-01-22-java-immutables-classic-problem/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://immutables.github.io/&#34;&gt;https://immutables.github.io/&lt;/a&gt; 요즘 이걸 살짝 봤는데, 재미있었다.&lt;/p&gt;&#xA;&lt;p&gt;그런데 일단 깊이보거나 써보기 전에 드는 걱정은,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;이거 기존의 몇몇 프레임웍이나 라이브러리들이랑은 친하게 지내기&#xA;어렵지 않을까.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;왜냐하면, 대부분의 POJO에 연관된&#xA;생성단계에서,&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Default_constructor&#34;&gt;default constructor&lt;/a&gt; 와&#xA;setter-methods을 갖고, 값을 세팅하는 경우가 대부분인데,&lt;/li&gt;&#xA;&lt;li&gt;예를들면, 대부분의 ORM 프레임웍들이나 POJO으로 JSON등을&#xA;Deserialization해서 직접 객체를 생성할 책임을 프레임웍이나&#xA;라이브러리가 가져가는 경우에 대부분.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&amp;hellip;그러면 결국 말짱황인거 같다.. 아무리 accessor 메서드들&#xA;boilerplate으로 생성하는거 막아주는게 좋다고 해도, 솔직히 그냥 한번&#xA;IDE에서 생성하고 평범하고 조금 멍청하게 만들어놓고 쓰는게 더 낫겠다는&#xA;생각이든다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
