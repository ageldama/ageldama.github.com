<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elisp on 아겔로그</title>
    <link>https://ageldama.github.io/tags/elisp/</link>
    <description>Recent content in Elisp on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;https://ageldama.github.io/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Mon, 06 May 2024 07:51:13 +0000</lastBuildDate>
    <atom:link href="https://ageldama.github.io/tags/elisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>xmake, compile_commands.json, flycheck</title>
      <link>https://ageldama.github.io/posts/2024-05may/2024-05may06--xmake-compile_commands_json-flycheck/</link>
      <pubDate>Mon, 06 May 2024 07:51:13 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2024-05may/2024-05may06--xmake-compile_commands_json-flycheck/</guid>
      <description>&lt;p&gt;&#xA;cmake/warp등을 써보면서 c/c++ 개발할 때에 빌드도구 갖고 놀다가,&#xA;이번에 마음을 열고 xmake을 익혀봄.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;마음에 든다. 가볍고 빠르고 좋다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;ccache등도 바로 지원하고, lua으로 스크립팅도 그럭저럭 할만해 보이고,&#xA;[build.zig](&lt;a href=&#34;https://ziglang.org/learn/build-system/)&#34;&gt;https://ziglang.org/learn/build-system/)&lt;/a&gt;스러워서&#xA;당연하게도 좋은거 같아.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;계속 쓸거 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;emacs / flycheck + c/c++ 개발할 때에 단점이, 자동적으로 외부 3rd-party&#xA;라이브러리의 include-path을 설정해주지 않아서,&#xA;[dirs-local](&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html)&#34;&gt;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html)&lt;/a&gt;&#xA;같은걸 세팅해주길 기대한다는 점.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 그냥 &lt;code&gt;xmake project -vD -k compile_commands -m debug&lt;/code&gt; 같이&#xA;&lt;code&gt;compile_commands.json&lt;/code&gt; 생성하고,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;이걸 파싱해서 표준출력으로 include-paths&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/compile_commands_json_incdirs.py&#34;&gt;https://github.com/ageldama/configs/blob/master/compile_commands_json_incdirs.py&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;현재 소스코드 버퍼 기준으로 가장 가까운 compile_commands.json 파일&#xA;위치 찾는 elisp 함수&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/elisp/compcmdsjson-tiny.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/elisp/compcmdsjson-tiny.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;위 (1)+(2)을 조합해서 flycheck을 위한 변수 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 들을 설정하는 elisp 함수&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/elisp/flycheck-compcmdsjson.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/elisp/flycheck-compcmdsjson.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;그리고 위 (3)을 c/c++-mode에 자동적으로 적용하고, 또 단축키도&#xA;만드는 elisp 코드&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/feat/flycheck-compcmdsjson.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/feat/flycheck-compcmdsjson.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;…요렇게 만들어서 세팅해서 쓰니 편안.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;org-more.el&#34; released!</title>
      <link>https://ageldama.github.io/posts/2020-11nov/org-more-1st-rel/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/org-more-1st-rel/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/org-more&#34;&gt;org-more.el: search .org files have certain tags (#+tags[]:&#xA;or #+tags[]:)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;개인 위키, KB처럼 org 파일 모음을 사용하고 있는데, 디렉토리 계층과&#xA;직접 링크 관계만이 아니라 같은 태그들으로 묶어서 각 파일들을 검색하고&#xA;리스팅 할 수 있도록 만들었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs 시작 시간 빠르게 만들기</title>
      <link>https://ageldama.github.io/posts/2020-01jan/esup-emacs-init-speed/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-01jan/esup-emacs-init-speed/</guid>
      <description>&lt;p&gt;&#xA;이맥스 설정이 조금씩 자라날 때마다 이맥스를 새로 시작하는 시간도&#xA;길어져서 짜증이 슬슬나기 시작했다. 그래서 조금 개선해봤다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;Quelpa + MELPA 거절하기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/quelpa/quelpa&#34;&gt;Quelpa&lt;/a&gt; 을 이용해서, MELPA등에 등록된 패키지가 아닌 내가 작성해서&#xA;  GitHub에 올려놓고 사용하는 패키지를 Git으로 받아서 등록해&#xA;  사용한다.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그런데, 어차피 use-pacakge을 이용해서 MELPA 등 패키지를 받아와서&#xA;  사용하는데, 불필요하게 MELPA 인덱스를 시작할 때마다 받아오고&#xA;  한다는걸 알게 됐다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  당연히 껐다. 한참 빨라졌다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  참고: &lt;a href=&#34;https://github.com/quelpa/quelpa#inhibit-melpa-git-checkout-or-updates-on-init&#34;&gt;Inhibit MELPA git checkout or updates on init&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;esup profiler&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;Elisp 자체는 프로파일링이 가능한데&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-2&#34; href=&#34;#footnote-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, &lt;code&gt;$HOME/.emacs&lt;/code&gt; 같은 init&#xA;  file을 실행하는 시간은 측정이 어려운거 같아서 검색해봤다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>moonshot.el 최초 릴리즈</title>
      <link>https://ageldama.github.io/posts/2019-12dec/moonshot-1st-rel/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/moonshot-1st-rel/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/moonshot&#34;&gt;moonshot.el&lt;/a&gt; 을 만들어서 공개했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;이맥스를 써오면서 불편하다고 생각한걸 간단히 하고 싶었었다:&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;불편함들&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;빌드 디렉토리&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;   Projectile을 사용하니까 프로젝트 디렉토리는 관리가 쉬운데, 빌드&#xA;   디렉토리는 관리가 어려웠다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;아예 Projectile이 추론하는 디렉토리 바깥에 빌드 디렉토리는&#xA;위치하는 경우도 있으니까.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;예) GNU Autotools &lt;code&gt;configure&lt;/code&gt; 이나 CMake으로 작업할 때,&#xA;소스트리 바깥에 빌드 디렉토리를 걸어놓아서 정리를 깔끔하게 할&#xA;수 있으니까.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;그런데 이 &amp;#39;빌드 디렉토리&amp;#39;가 중요한게,&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;말그대로 컴파일한 &lt;code&gt;.o&lt;/code&gt; 파일이나 최종 결과 실행파일 등이&#xA;여기에 쌓이니까&lt;/li&gt;&#xA;&lt;li&gt;디버깅, 테스트를 위해서 실행파일을 실행하거나,&lt;/li&gt;&#xA;&lt;li&gt;심지어 &lt;code&gt;make&lt;/code&gt; 이나 &lt;code&gt;ninja&lt;/code&gt; 같은 빌드 커맨드를 실행하기&#xA;위해서도 빌드 디렉토리를 지정하거나 이동해서 실행해야 하니까&#xA;귀찮다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-3&#34;&gt;&#xA;compilation-mode, realgud: 실행 파일 찾아서 실행하기, 디버깅하기&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;   예전에 만들어 써오던 &lt;a href=&#34;https://github.com/ageldama/configs/blob/a24f4606cd95a41c9d3140dac7c0c298883ae72a/emacs/c-c%252B%252B-gtags%252Brtags.el#L193&#34;&gt;이맥스를 위한 C/C++ 설정&lt;/a&gt; 처럼,&lt;/p&gt;</description>
    </item>
    <item>
      <title>Org모드에서 스프레드시트 기능과 Babel 섞어쓰기</title>
      <link>https://ageldama.github.io/posts/2019-12dec/org-spreadsheet-and-babel/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/org-spreadsheet-and-babel/</guid>
      <description>&lt;p&gt;&#xA;쩌는 &lt;a href=&#34;https://seorenn.github.io/org-spreadsheet.html&#34;&gt;Org-mode Spreadsheet 소개&lt;/a&gt; 를 읽고 감명 받아서 따라해봅니다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다른 부분은 만족스러웠는데, 조금 복잡한 elisp식을 쓰기 귀찮으니, 미리&#xA;&lt;code&gt;defun&lt;/code&gt; / &lt;code&gt;defmacro&lt;/code&gt; 으로 정의해놓고 그걸 spreadsheet에서 불러 쓸 수&#xA;있을지가 궁금했습니다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 다음과 같이 해보면 가능할지를 실험:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Org-Babel으로 원하는 함수를 정의한다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;그리고 Org 파일이 로딩될 때 평가하도록 속성을 지정해놓는다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Spreadsheet에서 불러서 쓸 수 있는지 확인해본다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;우선 &lt;code&gt;C-h a&lt;/code&gt; 을 눌러 &lt;code&gt;vsum&lt;/code&gt; 을 검색해보니, &lt;code&gt;defun calcFunc-vsum (&amp;amp;rest&#xA;vecs)&lt;/code&gt; 으로 미리 선언되어 있는거 같았습니다. 이런 형태로 내가 정의하는&#xA;함수도 구현해보면 될까 싶습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ivy/Counsel으로 바꾸기, 기능들 만들기 (w/ C&#43;&#43;지원, &#43;&#43;rmsbolt)</title>
      <link>https://ageldama.github.io/posts/2019-02feb/counsel-ivy&#43;cpp-ide/</link>
      <pubDate>Tue, 26 Feb 2019 01:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-02feb/counsel-ivy&#43;cpp-ide/</guid>
      <description>&lt;p&gt;최근에 이맥스 설정을&#xA;&lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;Helm&lt;/a&gt;기반에서&#xA;&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Ivy/Counsel&lt;/a&gt;으로 전부 바꿨다.&lt;/p&gt;&#xA;&lt;p&gt;더 가볍고, 적당히 잘 동작하고,&#xA;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;Ripgrep&lt;/a&gt;이랑 기본적으로&#xA;설정이 가능해서 편함.&lt;/p&gt;&#xA;&lt;p&gt;거기에 &lt;code&gt;C-c C-o&lt;/code&gt;&#xA;(&lt;a href=&#34;https://oremacs.com/2015/11/04/ivy-occur/&#34;&gt;ivy-occur&lt;/a&gt;) +&#xA;&lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt;이 Helm에선&#xA;동작할때가 그때그때 기능에 따라 달라서 짜증나고, 심지어 플러그인을&#xA;설정해서 써야하거나 해서 정말 좋아하는 기능인데 우울하게 만들었는데,&#xA;Ivy이 훨씬 깔끔하게 동작하고 일관성있게 잘 동작함.&lt;/p&gt;&#xA;&lt;p&gt;처음에는 Helm에서 하는 기능들을 그대로 옮기려고만 생각하다가, 오히려&#xA;Ivy에 맞춰서 내가 익숙해지고, 더 낫게 할 방법들이 있어서 그냥 내가&#xA;adopt해서 편안해졌다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;cmake--compile_commandsjson&#34;&gt;CMake + &lt;code&gt;compile_commands.json&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;이전에는 &lt;a href=&#34;https://github.com/Andersbakken/rtags&#34;&gt;RTags&lt;/a&gt;을 사용해서&#xA;&amp;lsquo;&amp;lsquo;정말로&amp;rsquo;&amp;rsquo; C++ 프로젝트를 Clang등을 이용해서 파싱하고, 그걸&#xA;인덱싱한걸로 정확한 navigation, code completion을 구성해 사용하려고&#xA;했었었다. 그리고 타입 정보다 그런거 다 있으니 제대로 굴러가서 꽤&#xA;쓸만하고.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
