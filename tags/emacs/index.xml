<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on 아겔로그</title>
    <link>http://localhost:1313/tags/emacs/</link>
    <description>Recent content in Emacs on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;http://localhost:1313/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Mon, 06 May 2024 07:51:13 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>xmake, compile_commands.json, flycheck</title>
      <link>http://localhost:1313/posts/2024-05may/2024-05may06--xmake-compile_commands_json-flycheck/</link>
      <pubDate>Mon, 06 May 2024 07:51:13 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024-05may/2024-05may06--xmake-compile_commands_json-flycheck/</guid>
      <description>&lt;p&gt;&#xA;cmake/warp등을 써보면서 c/c++ 개발할 때에 빌드도구 갖고 놀다가,&#xA;이번에 마음을 열고 xmake을 익혀봄.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;마음에 든다. 가볍고 빠르고 좋다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;ccache등도 바로 지원하고, lua으로 스크립팅도 그럭저럭 할만해 보이고,&#xA;[build.zig](&lt;a href=&#34;https://ziglang.org/learn/build-system/)&#34;&gt;https://ziglang.org/learn/build-system/)&lt;/a&gt;스러워서&#xA;당연하게도 좋은거 같아.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;계속 쓸거 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;emacs / flycheck + c/c++ 개발할 때에 단점이, 자동적으로 외부 3rd-party&#xA;라이브러리의 include-path을 설정해주지 않아서,&#xA;[dirs-local](&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html)&#34;&gt;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html)&lt;/a&gt;&#xA;같은걸 세팅해주길 기대한다는 점.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 그냥 &lt;code&gt;xmake project -vD -k compile_commands -m debug&lt;/code&gt; 같이&#xA;&lt;code&gt;compile_commands.json&lt;/code&gt; 생성하고,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;이걸 파싱해서 표준출력으로 include-paths&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/compile_commands_json_incdirs.py&#34;&gt;https://github.com/ageldama/configs/blob/master/compile_commands_json_incdirs.py&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;현재 소스코드 버퍼 기준으로 가장 가까운 compile_commands.json 파일&#xA;위치 찾는 elisp 함수&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/elisp/compcmdsjson-tiny.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/elisp/compcmdsjson-tiny.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;위 (1)+(2)을 조합해서 flycheck을 위한 변수 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 들을 설정하는 elisp 함수&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/elisp/flycheck-compcmdsjson.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/elisp/flycheck-compcmdsjson.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;그리고 위 (3)을 c/c++-mode에 자동적으로 적용하고, 또 단축키도&#xA;만드는 elisp 코드&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/feat/flycheck-compcmdsjson.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/feat/flycheck-compcmdsjson.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;…요렇게 만들어서 세팅해서 쓰니 편안.&lt;/p&gt;</description>
    </item>
    <item>
      <title>내 책상에서 유선랜 환경</title>
      <link>http://localhost:1313/posts/2023-03mar/2023-03mar15--wired-desktop/</link>
      <pubDate>Wed, 15 Mar 2023 15:37:14 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-03mar/2023-03mar15--wired-desktop/</guid>
      <description>&lt;p&gt;&#xA;개인환경을 조금 특이하게 사용하는데, 그 이유와 방식.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;why: 유선랜? (무선랜 대신)&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;키보드/마우스 입력이 가장 부드럽게 전달되어서 유선으로 연결해서&#xA;  사용한다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  x2x으로 연결하거나, ssh-x11-forwarding으로 다른 컴퓨터에서 실행하는&#xA;  프로그램을 디스플레이와 입력장치만 현재 자리에서 그대로 사용할 때에&#xA;  네트웍 연결속도가 딜레이가 적어야 쾌적해서. &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;why: x11? (wayland 대신)&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;요즘 리눅스/bsd 데스크탑 기본설치하면 wayland으로 세팅하는 경우도&#xA;  많은데, 네트웍을 통해서 ssh-x11-forwarding &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&#xA;  사용하거나 x2x 사용하기는 아직 부족한거 같아서, 나는 그냥 x11&#xA;  사용함.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  거기에 &lt;a href=&#34;https://github.com/jordansissel/xdotool&#34;&gt;xdotool&lt;/a&gt; 같은 gui-automation/scripting이나 &lt;a href=&#34;https://github.com/rvaiya/warpd&#34;&gt;warpd&lt;/a&gt; 같은 키보드를&#xA;  마우스으로 편안하게 쓰도록 해주는 xtest이나, &lt;a href=&#34;https://qjoypad.sourceforge.net/&#34;&gt;qjoypad&lt;/a&gt; 처럼 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-2&#34; href=&#34;#footnote-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&#xA;  게임패드/조이스틱을 편안하게 마우스/키보드으로 매핑해서 쓰는게 나는&#xA;  많은데 모두 x11만 지원하거나, 아직은 x11에서만 쓸만한 수준으로&#xA;  동작해서.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;org-more.el&#34; released!</title>
      <link>http://localhost:1313/posts/2020-11nov/org-more-1st-rel/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2020-11nov/org-more-1st-rel/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/org-more&#34;&gt;org-more.el: search .org files have certain tags (#+tags[]:&#xA;or #+tags[]:)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;개인 위키, KB처럼 org 파일 모음을 사용하고 있는데, 디렉토리 계층과&#xA;직접 링크 관계만이 아니라 같은 태그들으로 묶어서 각 파일들을 검색하고&#xA;리스팅 할 수 있도록 만들었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 13/Aug/2020</title>
      <link>http://localhost:1313/posts/2020-08aug/ping-13thu/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2020-08aug/ping-13thu/</guid>
      <description>&lt;p&gt;&#xA;프비 워크스테이션을 만들어놓고 그렇게 좋은 사양은 절대 아닌 조용한&#xA;슬림PC에서, 또 가능한 마우스를 안 써도 좋게 세팅해놓고 편안하게&#xA;이맥스에서 작업을 해나간다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;FM라디오의 가끔 지글거리는 잡음도 좋은 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;계속해서 신경을 쓰게 만들고 끊기고 광고가 나오고 또 클릭을 유도하고&#xA;멍청하게 징징거리는 것으로 돈으로 바꾸는 요즘의 수많은 다른 매체들보다&#xA;훨씬 나를 편안하게 만든다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다른 매체들도 비슷하지 않을까. SNS도 그런 것 같고 대부분의 앱, 심지어&#xA;운영체제도 그런 환경들과는 다른.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 01/Aug/2020</title>
      <link>http://localhost:1313/posts/2020-08aug/ping-01sat/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2020-08aug/ping-01sat/</guid>
      <description>&lt;p&gt;&#xA;오랬만에 내 환경을 더 다듬었다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;Emacs, Evil, General.el.&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;매일 이맥스에서 코딩을 하면서 조금은 Vim보다 키바인딩이 편집에&#xA;    불리한 것 같았었다. 그렇다고 Vim을 쓰고 싶지는 않았다. 검색이나&#xA;    다중편집 같은 이맥스만의 기능을 Vim에서 흉내내는 것은 별로 마음에&#xA;    차지 않는 정도이고 또 화면 flickering도 이맥스 GUI을 쓸 때보다&#xA;    터미널 Vim은 심해서 난 피곤해.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;    그래서 Evil-mode을 종종 썼는데 문제는 내가 만들어놓은 general.el&#xA;    키바인딩들이 Evil을 고려하지 않고 만들어서 evil모드를 toggle하며&#xA;    써야했었었다. 특히 내 이맥스 모드에서의 키바인딩의 prefix이&#xA;    C-z인데, evil-mode에서는 emacs mode으로 전환을 위해서 사용.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs 시작 시간 빠르게 만들기</title>
      <link>http://localhost:1313/posts/2020-01jan/esup-emacs-init-speed/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:01 +0900</pubDate>
      <guid>http://localhost:1313/posts/2020-01jan/esup-emacs-init-speed/</guid>
      <description>&lt;p&gt;&#xA;이맥스 설정이 조금씩 자라날 때마다 이맥스를 새로 시작하는 시간도&#xA;길어져서 짜증이 슬슬나기 시작했다. 그래서 조금 개선해봤다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;Quelpa + MELPA 거절하기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/quelpa/quelpa&#34;&gt;Quelpa&lt;/a&gt; 을 이용해서, MELPA등에 등록된 패키지가 아닌 내가 작성해서&#xA;  GitHub에 올려놓고 사용하는 패키지를 Git으로 받아서 등록해&#xA;  사용한다.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그런데, 어차피 use-pacakge을 이용해서 MELPA 등 패키지를 받아와서&#xA;  사용하는데, 불필요하게 MELPA 인덱스를 시작할 때마다 받아오고&#xA;  한다는걸 알게 됐다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  당연히 껐다. 한참 빨라졌다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  참고: &lt;a href=&#34;https://github.com/quelpa/quelpa#inhibit-melpa-git-checkout-or-updates-on-init&#34;&gt;Inhibit MELPA git checkout or updates on init&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;esup profiler&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;Elisp 자체는 프로파일링이 가능한데&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-2&#34; href=&#34;#footnote-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, &lt;code&gt;$HOME/.emacs&lt;/code&gt; 같은 init&#xA;  file을 실행하는 시간은 측정이 어려운거 같아서 검색해봤다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>direnv &#43; direnv-mode 이맥스 지원 &#43; C/C&#43;&#43;/Python등 프로젝트 설정 적용하기</title>
      <link>http://localhost:1313/posts/2019-12dec/direnv/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2019-12dec/direnv/</guid>
      <description>&lt;p&gt;&#xA;프로젝트의 빌드 디렉토리, virtualenv와 같은 경로의 설정, &#xA;경로 설정에 따른 빌드/실행/테스팅/스크립트을 편하게 하려고 만든&#xA;&lt;a href=&#34;http://localhost:1313/posts/2019-12dec/moonshot-1st-rel/&#34;&gt;moonshot.el&lt;/a&gt; 와 유사한걸 검색해봤다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;몇 가지&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;이런 비슷한게 몇 가지 있는데, 내 상황에 쓸만한 것은 direnv&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;NPM: dotenv&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/dotenv&#34;&gt;https://www.npmjs.com/package/dotenv&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Node.js에서 Unix environment variable으로 &lt;code&gt;.env&lt;/code&gt; 파일을 로딩해주는&#xA;역할인 듯.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Shell에서 Hook 걸어서 사용하기엔 별로 인거 같았다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그리고 Node.js 이외의 프로젝트에 적용하려면 매번 JS으로 wrapper을&#xA;짜주고 하기 싫었고,&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;code&gt;.env&lt;/code&gt; 파일이 그냥 정적인 key-value 문자열의 나열이라, 파일시스템에서&#xA;경로를 조립하고 하는데 별로라는 생각이 들었다. 항상 절대 경로만&#xA;표기하거나, &lt;code&gt;getenv&lt;/code&gt; 해서 문자열을 가져와서 상대 경로 등으로 지정된&#xA;값을 매번 절대 경로로 만드는 작업을 해야할테니까.&lt;/p&gt;</description>
    </item>
    <item>
      <title>moonshot.el 최초 릴리즈</title>
      <link>http://localhost:1313/posts/2019-12dec/moonshot-1st-rel/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2019-12dec/moonshot-1st-rel/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/moonshot&#34;&gt;moonshot.el&lt;/a&gt; 을 만들어서 공개했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;이맥스를 써오면서 불편하다고 생각한걸 간단히 하고 싶었었다:&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;불편함들&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;빌드 디렉토리&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;   Projectile을 사용하니까 프로젝트 디렉토리는 관리가 쉬운데, 빌드&#xA;   디렉토리는 관리가 어려웠다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;아예 Projectile이 추론하는 디렉토리 바깥에 빌드 디렉토리는&#xA;위치하는 경우도 있으니까.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;예) GNU Autotools &lt;code&gt;configure&lt;/code&gt; 이나 CMake으로 작업할 때,&#xA;소스트리 바깥에 빌드 디렉토리를 걸어놓아서 정리를 깔끔하게 할&#xA;수 있으니까.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;그런데 이 &amp;#39;빌드 디렉토리&amp;#39;가 중요한게,&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;말그대로 컴파일한 &lt;code&gt;.o&lt;/code&gt; 파일이나 최종 결과 실행파일 등이&#xA;여기에 쌓이니까&lt;/li&gt;&#xA;&lt;li&gt;디버깅, 테스트를 위해서 실행파일을 실행하거나,&lt;/li&gt;&#xA;&lt;li&gt;심지어 &lt;code&gt;make&lt;/code&gt; 이나 &lt;code&gt;ninja&lt;/code&gt; 같은 빌드 커맨드를 실행하기&#xA;위해서도 빌드 디렉토리를 지정하거나 이동해서 실행해야 하니까&#xA;귀찮다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-3&#34;&gt;&#xA;compilation-mode, realgud: 실행 파일 찾아서 실행하기, 디버깅하기&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;   예전에 만들어 써오던 &lt;a href=&#34;https://github.com/ageldama/configs/blob/a24f4606cd95a41c9d3140dac7c0c298883ae72a/emacs/c-c%252B%252B-gtags%252Brtags.el#L193&#34;&gt;이맥스를 위한 C/C++ 설정&lt;/a&gt; 처럼,&lt;/p&gt;</description>
    </item>
    <item>
      <title>Org모드에서 스프레드시트 기능과 Babel 섞어쓰기</title>
      <link>http://localhost:1313/posts/2019-12dec/org-spreadsheet-and-babel/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2019-12dec/org-spreadsheet-and-babel/</guid>
      <description>&lt;p&gt;&#xA;쩌는 &lt;a href=&#34;https://seorenn.github.io/org-spreadsheet.html&#34;&gt;Org-mode Spreadsheet 소개&lt;/a&gt; 를 읽고 감명 받아서 따라해봅니다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다른 부분은 만족스러웠는데, 조금 복잡한 elisp식을 쓰기 귀찮으니, 미리&#xA;&lt;code&gt;defun&lt;/code&gt; / &lt;code&gt;defmacro&lt;/code&gt; 으로 정의해놓고 그걸 spreadsheet에서 불러 쓸 수&#xA;있을지가 궁금했습니다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 다음과 같이 해보면 가능할지를 실험:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Org-Babel으로 원하는 함수를 정의한다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;그리고 Org 파일이 로딩될 때 평가하도록 속성을 지정해놓는다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Spreadsheet에서 불러서 쓸 수 있는지 확인해본다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;우선 &lt;code&gt;C-h a&lt;/code&gt; 을 눌러 &lt;code&gt;vsum&lt;/code&gt; 을 검색해보니, &lt;code&gt;defun calcFunc-vsum (&amp;amp;rest&#xA;vecs)&lt;/code&gt; 으로 미리 선언되어 있는거 같았습니다. 이런 형태로 내가 정의하는&#xA;함수도 구현해보면 될까 싶습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Org 파일으로 Hugo 포스팅 테스트</title>
      <link>http://localhost:1313/posts/2019-12dec/foo/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2019-12dec/foo/</guid>
      <description>&lt;p&gt;&#xA;적당히 잘 동작하는거 같으니 앞으로는 그냥 혼란스러운 Markdown 대신에&#xA;그냥 Org 파일으로 블로깅 하며 될거 같다. 행벜.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;예전 버젼 Hugo에서는 지원을 제대로 못하던거 같은데, 어느샌가 업데이트&#xA;하니까 되는거 같아서 그냥 슬그머니&#xA;쓰기로. &lt;a href=&#34;https://gohugo.io/content-management/formats/&#34;&gt;https://gohugo.io/content-management/formats/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;기존 마크다운들도 인라인 이미지 문법을 바꾸고, ToC 표시 설정도 바뀌어서 조금 변경.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;아쉬운건 여전히 Org 파일에서 ToC 지원은 빠져 있는거&#xA;같아서… &lt;a href=&#34;https://github.com/snosov1/toc-org&#34;&gt;https://github.com/snosov1/toc-org&lt;/a&gt; 설치해봤다. 그냥 고민할&#xA;필요가 없었구나. ㅋ&lt;/p&gt;&#xA;&lt;p&gt;&#xA;제일 좋은건 code syntax highlight이 예뻐졌다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;Table of Contents                                    &amp;lt;– :TOC: –&amp;gt;&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;#foobar&#34;&gt;foobar&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ivy/Counsel으로 바꾸기, 기능들 만들기 (w/ C&#43;&#43;지원, &#43;&#43;rmsbolt)</title>
      <link>http://localhost:1313/posts/2019-02feb/counsel-ivy&#43;cpp-ide/</link>
      <pubDate>Tue, 26 Feb 2019 01:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2019-02feb/counsel-ivy&#43;cpp-ide/</guid>
      <description>&lt;p&gt;최근에 이맥스 설정을&#xA;&lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;Helm&lt;/a&gt;기반에서&#xA;&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Ivy/Counsel&lt;/a&gt;으로 전부 바꿨다.&lt;/p&gt;&#xA;&lt;p&gt;더 가볍고, 적당히 잘 동작하고,&#xA;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;Ripgrep&lt;/a&gt;이랑 기본적으로&#xA;설정이 가능해서 편함.&lt;/p&gt;&#xA;&lt;p&gt;거기에 &lt;code&gt;C-c C-o&lt;/code&gt;&#xA;(&lt;a href=&#34;https://oremacs.com/2015/11/04/ivy-occur/&#34;&gt;ivy-occur&lt;/a&gt;) +&#xA;&lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt;이 Helm에선&#xA;동작할때가 그때그때 기능에 따라 달라서 짜증나고, 심지어 플러그인을&#xA;설정해서 써야하거나 해서 정말 좋아하는 기능인데 우울하게 만들었는데,&#xA;Ivy이 훨씬 깔끔하게 동작하고 일관성있게 잘 동작함.&lt;/p&gt;&#xA;&lt;p&gt;처음에는 Helm에서 하는 기능들을 그대로 옮기려고만 생각하다가, 오히려&#xA;Ivy에 맞춰서 내가 익숙해지고, 더 낫게 할 방법들이 있어서 그냥 내가&#xA;adopt해서 편안해졌다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;cmake--compile_commandsjson&#34;&gt;CMake + &lt;code&gt;compile_commands.json&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;이전에는 &lt;a href=&#34;https://github.com/Andersbakken/rtags&#34;&gt;RTags&lt;/a&gt;을 사용해서&#xA;&amp;lsquo;&amp;lsquo;정말로&amp;rsquo;&amp;rsquo; C++ 프로젝트를 Clang등을 이용해서 파싱하고, 그걸&#xA;인덱싱한걸로 정확한 navigation, code completion을 구성해 사용하려고&#xA;했었었다. 그리고 타입 정보다 그런거 다 있으니 제대로 굴러가서 꽤&#xA;쓸만하고.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CQuery &#43; LSP vs CMake-IDE &#43; RTags</title>
      <link>http://localhost:1313/posts/2018-09sep/cquery-vs-cmake-ide/</link>
      <pubDate>Sun, 23 Sep 2018 12:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2018-09sep/cquery-vs-cmake-ide/</guid>
      <description>&lt;p&gt;LSP + CQuery을 써보려고 했는데, 결국 &lt;a href=&#34;http://localhost:1313/posts/2018-05may-emacs-cmake-ide-screencast/&#34;&gt;CMake-IDE +&#xA;RTags&lt;/a&gt; 조합으로&#xA;원래대로 쓰게될거 같아. :&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;_build/&lt;/code&gt; 와 같이 CMake, Ninja, Makefile등의 파일들을 별도의&#xA;디렉토리로 만들어서 필드하고 싶은데, 제대로 지원을 못한다.&#xA;1. 그냥 프로젝트 소스코드랑 같이 generate하고 &lt;code&gt;gcc&lt;/code&gt;등의 중간&#xA;파일이 모두 같이 남아서 지저분해져서 싫어함.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;아직은 별로 내 마음에 꼭 들게 만들기는 어려울거 같아서. 그래도&#xA;인상적이었던 부분들:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;flycheck에 전용으로 연동되어 있는 점.&lt;/li&gt;&#xA;&lt;li&gt;company-lsp이 생각보다 훨씬 부드럽고 자동완성 잘되는거.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;미래에는 그냥 LSP기반만 남을거 같아서, 이것도 &amp;ldquo;helm-rg의 모험&amp;quot;처럼&#xA;아직은 완전히 전환은 못할거 같긴하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NeoVim, Evil-mode and Emacs의 모험</title>
      <link>http://localhost:1313/posts/2018-07jul/2018-07jul-nvim-evil-and-emacs/</link>
      <pubDate>Sat, 28 Jul 2018 12:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2018-07jul/2018-07jul-nvim-evil-and-emacs/</guid>
      <description>&lt;h2 id=&#34;내적모순&#34;&gt;&amp;ldquo;내적모순&amp;rdquo;&lt;/h2&gt;&#xA;&lt;p&gt;이맥스에서 &lt;a href=&#34;https://www.emacswiki.org/emacs/Evil&#34;&gt;Evil&lt;/a&gt;을 쓰면서 몇가지 짜증나는게 있어왔다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Evil 자체의 문서화가 조금 거시기하다.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;거기에&#xA;&lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;Which-Key&lt;/a&gt;같은&#xA;키바인딩을 실시간으로 확인할 수 있는 방법도 제대로 안먹히게&#xA;된거라, 이맥스에서 쩔어주는 기능인 &lt;em&gt;자기 자신을 확인하며 단축키&#xA;안외우기&lt;/em&gt; 같은게 다 무의미해짐.&lt;/li&gt;&#xA;&lt;li&gt;공식 사이트 들어가도 문서는 없다. 그냥 Vim 온라인 help을 보거나&#xA;하라는 친절인거 같다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Magit, Edb, 등등 대부분의 이맥스의 다른 Major mode들이랑은 정말&#xA;충돌하는 경우가 너무 많음.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/dot-emacs-2018#L421&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/dot-emacs-2018#L421&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;위의 링크만 봐도, 내가 얼마나 충돌이 나는 모드들을 경험했는지&#xA;알수있다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;그럼에도-포기할수없는-나의-영도자&#34;&gt;그럼에도 포기할수없는 나의 영도자&lt;/h2&gt;&#xA;&lt;p&gt;좋은점, 그래도 고집을 갖고 계속 써야겠다고 생각하던 부분은:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs &#43; CMake-IDE Screencast</title>
      <link>http://localhost:1313/posts/2018-05may/2018-05may-emacs-cmake-ide-screencast/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2018-05may/2018-05may-emacs-cmake-ide-screencast/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/R5tV-mp8WnE?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;이건-무엇인가&#34;&gt;이건 무엇인가&lt;/h1&gt;&#xA;&lt;p&gt;Emacs Configurations: &lt;a href=&#34;https://github.com/ageldama/configs/tree/master/emacs/cmake-ide&#34;&gt;https://github.com/ageldama/configs/tree/master/emacs/cmake-ide&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;이맥스에서 C++ 개발 편하게 하려고 이것저것 알아보다가 결국엔 &lt;a href=&#34;https://github.com/atilaneves/cmake-ide&#34;&gt;CMake-IDE&lt;/a&gt; + &lt;a href=&#34;https://github.com/Andersbakken/rtags&#34;&gt;RTags&lt;/a&gt; 조합이 제일 괜찮다는 결론에 도달해서 만들어본 설정이다.&lt;/p&gt;&#xA;&lt;p&gt;원래 사용하는 환경이 &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;Evil&lt;/a&gt;은 아니었는데,&#xA;&lt;a href=&#34;http://spacemacs.org/&#34;&gt;Spacemacs&lt;/a&gt; 을 조금 쓰다가 편한거 같아서 Evil으로 옮겨탔다.&lt;/p&gt;&#xA;&lt;p&gt;지금은 그냥 Spacemacs은 다운도 잘되고 너무 무겁고 설정을 &lt;a href=&#34;http://spacemacs.org/layers/LAYERS.html&#34;&gt;레이어 방식&lt;/a&gt; 으로 할게 아니면 짜증나게 하는 부분도 많고, 그렇다고 레이어가 완전히 내가 그냥 커스텀으로 만들어서 바로바로 머지하는 구조도 아니고 중앙에서 관리하는 방식으로만 되는거 같아서, 옆으로 치우고, 바닐라 이맥스에 Spacemacs스럽게 직접 설정해서 가볍게 사용하고 있다. :-)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs에서 window 전환을 편하게, ace-window</title>
      <link>http://localhost:1313/posts/2017/2017-01-22-emacs-ace-window/</link>
      <pubDate>Sun, 22 Jan 2017 14:15:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/2017/2017-01-22-emacs-ace-window/</guid>
      <description>&lt;p&gt;이맥스에서 코딩하거나 마크다운이나 Org으로 글을 쓰고 정리하는데, 그간&#xA;그냥 그럭저럭 나는 이맥스를 나한테 맞춰서 사용하고 있다고 생각하고&#xA;있었던거 같다. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;그런데, 항상 뭔가 불편한데, 그냥 바쁘다는 이유로 깊이 생각은 안하고&#xA;대충 대충 때우면서 사용해왔었던게 있었다. 바로 window 끼리 전환하는&#xA;방법.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;C-x 2&lt;/code&gt; 이나 &lt;code&gt;C-x 3&lt;/code&gt;으로 창을 분할해놓고 쓰는게 보통인데, 이때 나는&#xA;그냥 아무 생각없이 &lt;code&gt;C-x o&lt;/code&gt;만을 이용해서 &lt;em&gt;다음 윈도우&lt;/em&gt; 으로&#xA;이동만해왔었다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;그런데&lt;/em&gt;, 창이 3개 이상이 되고, 현재 창의 &lt;em&gt;다음 창&lt;/em&gt; 이 아니라, &lt;em&gt;이전 창&lt;/em&gt; 으로 이동하고 싶으면?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs이랑 친해지기</title>
      <link>http://localhost:1313/posts/2017/2017-01-01-getting-started-with-emacs/</link>
      <pubDate>Sun, 01 Jan 2017 10:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/2017/2017-01-01-getting-started-with-emacs/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;이맥스를 어떻게 배우면 좋은지 모르겠다. 여러번 도전해봤지만 항상 별로였다.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;..어느날 한 동료가 물어봤다. (&lt;em&gt;그렇다 나는 일터에서도 이맥스를 켜놓고&#xA;계속 쓴다.&lt;/em&gt;)&lt;/p&gt;&#xA;&lt;p&gt;솔직히 기본적으로 매일 &lt;a href=&#34;http://orgmode.org/&#34;&gt;Org-mode&lt;/a&gt;으로 계획, 일정&#xA;등등 정리하고 계속 개인적으로 정리하면서 쓰고, 파이썬, Go, Clojure&#xA;같은거 할때도 편집하고 테스트하기도 편하니까 선호하는 편인거&#xA;같다. (자바랑 스칼라은 물론 그냥 IntelliJ 쓴다.)&lt;/p&gt;&#xA;&lt;p&gt;여튼 그날 간단히 짝프로그래밍하듯이 같이 앉아서 몇가지 이야기를 하고,&#xA;내 설정 파일 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 이나 어떻게 접근하는게 좋은지에 대해서&#xA;잠깐 이야기를 했었다. 그걸 블로깅으로 써보고 싶다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
