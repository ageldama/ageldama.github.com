<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leet-Code on 아겔로그</title>
    <link>https://ageldama.github.io/tags/leet-code/</link>
    <description>Recent content in Leet-Code on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;https://ageldama.github.io/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Wed, 11 Nov 2020 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://ageldama.github.io/tags/leet-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python &#43; Generator / LeetCode &#34;1614. max nesting depth of the parentheses&#34;</title>
      <link>https://ageldama.github.io/posts/2020-11nov/leet-code-1614-3rd/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/leet-code-1614-3rd/</guid>
      <description>지난 번 작성한 Common Lisp / LOOP매크로을 이용한 구현 을 다른 언어에서였다면, 비슷한 조건으로 메모리 복잡도 O(1)으로 풀어보고 싶었다.&#xA;from itertools import accumulate def find_paren_count(s): gen_only_parens = (ch == &amp;#39;(&amp;#39; and 1 or -1 for ch in s if ch in (&amp;#39;(&amp;#39;, &amp;#39;)&amp;#39;,)) return max(accumulate(gen_only_parens)) 다른 언어에서도 lazy stream을 지원한다면 비슷하게 풀 수 있을 것 같다.</description>
    </item>
    <item>
      <title>CommonLisp (w/o LOOP-macro) / LeetCode &#34;1614. max nesting depth of the parentheses&#34;</title>
      <link>https://ageldama.github.io/posts/2020-10oct/leet-code-1614-2nd/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/leet-code-1614-2nd/</guid>
      <description>어제 작성한 LOOP매크로을 이용한 구현 을 풀어서, 만약 LOOP매크로가 없었더라면 어떻게 짰을지 작성해봤다.&#xA;(defun max-nested-parentheses-raw (s) (declare (optimize (speed 3) (safety 0)) (type simple-string s)) (let ((n 0) (result 0)) (declare (type fixnum n result)) (dotimes (s--cur-idx (length s)) (let ((ch (elt s s--cur-idx))) (when (member ch &amp;#39;(#\( #\))) (incf n (if (eql #\( ch) 1 -1)) (setf result (max n result))))) result)) 여전히 타입을 지정해서 자동으로 타입추론, 최적화 하도록 했다.</description>
    </item>
    <item>
      <title>CommonLisp / LeetCode &#34;1614. max nesting depth of the parentheses&#34;</title>
      <link>https://ageldama.github.io/posts/2020-10oct/leet-code-1614/</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/leet-code-1614/</guid>
      <description> 문제 https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses/&#xA;작성한 코드 (defun max-nested-parentheses (s) (declare (optimize (speed 3) (safety 0)) (type simple-string s)) (loop with n fixnum = 0 for ch across s when (member ch &amp;#39;(#\( #\))) do (incf n (if (eql #\( ch) 1 -1)) maximizing n)) 코드 의도 우아한 코드보다는 공간복잡도가 O(1) 이고 싶었다. Edit SBCL에 맞춰 코드에 타입을 지정해줘봤다.&#xA;결과 어셈블리 코드가 조금 짧아졌다. </description>
    </item>
  </channel>
</rss>
