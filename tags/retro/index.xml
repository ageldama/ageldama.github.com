<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Retro on 아겔로그</title>
    <link>http://localhost:1313/tags/retro/</link>
    <description>Recent content in Retro on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;http://localhost:1313/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Wed, 08 Mar 2023 06:32:05 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/retro/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>News 08/03/2023 .02 : reactjs, rust, zig, hiring, nes</title>
      <link>http://localhost:1313/posts/2023-03mar/2023-03mar08--02-ping--news/</link>
      <pubDate>Wed, 08 Mar 2023 06:32:05 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-03mar/2023-03mar08--02-ping--news/</guid>
      <description>&amp;#34;리액트가 날 인질으로 잡고 있어요&amp;#34; &amp;#34;헛소리/bullshit 없이 엔지니어링 재능이 있는 사람을 고용하기&amp;#34; &amp;#34;NESFab is a new programming language for creating NES games&amp;#34; &amp;#34;zig이 rust보다 빠르고 안전할 수 있는 경우&amp;#34; &amp;#34;리액트가 날 인질으로 잡고 있어요&amp;#34; https://emnudge.dev/blog/react-hostage&#xA;…말해 뭘할까 싶은데. :see_no_evil:&#xA;포스팅 자체는 react, hooks 같은 것들의 complexity에 대한 이야기이지만.&#xA;오히려 흥미롭게 생각하는 것은, 과거 한국에서 &amp;#39;퍼블리셔&amp;#39;라고 하던 사람들이 어떻게 되었는가 생각해보며, 함께 지금의 &amp;#39;프론트엔드 개발자&amp;#39;, 혹은 &amp;#39;앱 개발자&amp;#39;, &amp;#39;리액트 개발자&amp;#39;, &amp;#39;자바스크립트 개발자&amp;#39;들이 앞으로 어떻게 될지 상상해본다.</description>
    </item>
    <item>
      <title>Ping 02/02/2023 .01: xemacs, gemini, gemtext</title>
      <link>http://localhost:1313/posts/2023-02feb/2023-02feb02--01-ping/</link>
      <pubDate>Thu, 02 Feb 2023 15:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-02feb/2023-02feb02--01-ping/</guid>
      <description>1. &amp;ldquo;제미니 계획&amp;rdquo; 2. just like the good ol&amp;rsquo; days 차라리 돈을 내고 글을 읽겠다&amp;hellip;만 추억이 그리워지는 시대여서 그런거 같기도 하다. 그럼에도 어차피 그렇게 다시 사용하기엔 끔찍할텐데.&#xA;1. &amp;ldquo;제미니 계획&amp;rdquo; gemini protocol 을 기반으로 뭔가 새로운 것을 상상하면 즐겁지만,&#xA;정말 제한적이어서, 내 마음대로의 확장을 떠올리게 된다.&#xA;실은, gemtext와 gemini protocol은 마음에 드는 부분이 바로 그런점이지만: 오히려 제한적이고, 그냥 무시해도 되는 것들을 굳이 지원해줘야 할 것 같은 기분에 져서 우겨넣으면서 complexity만 무한대으로 보낼바엔, 이렇게 무시할 것은 잘 무시하는게 더 좋은거 같아.</description>
    </item>
  </channel>
</rss>
