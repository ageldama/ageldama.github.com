<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on 아겔로그</title>
    <link>https://ageldama.github.io/tags/javascript/</link>
    <description>Recent content in javascript on 아겔로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <copyright>All rights reserved to ageldama</copyright>
    <lastBuildDate>Sat, 17 Oct 2020 00:00:00 +0900</lastBuildDate><atom:link href="https://ageldama.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ping 17/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-16fri/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0900</pubDate>
      
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-16fri/</guid>
      <description>웹프론트엔드 개발을 조금씩 해보고 있다. 처음에는 예전 방식으로만 하려고 하다가 조금씩 겨우 써보던 webpack을 다시 가이드를 차근차근 공부하고 동작하는 방식을 이해하도록 뜯어보고 돌려봤다.
생각보다 단순하게, 그리고 확장성 있게 쓸만한 빌드도구였다.
다만 문제는 설정이 복잡하고 이해하기 힘든 점보다는 빌드 시간이 너무 느린 점이었다. (내게는)
그래서 parcel bundler을 시도 했는데, 설정도 거의 필요 없이 바로 동작하고 하는 점은 좋고, 성능도 정말 빨랐다.
다만 Vim/Emacs으로 파일을 편집하고 저장할 때, parcel watch 대상인 파일들을 종종 아예 dev-server을 재시작해야만 제대로 동작하는 상태로 빠지는게 조금 짜증났다.</description>
    </item>
    
    <item>
      <title>Lisp에서 Dynamic/Lexical Binding와 JavaScript의 var/let</title>
      <link>https://ageldama.github.io/posts/2019-12dec/lisp-dynamic-and-lexical-bindings-and-js/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://ageldama.github.io/posts/2019-12dec/lisp-dynamic-and-lexical-bindings-and-js/</guid>
      <description>다음의 간단한 코드를 읽어보자.
var x = &amp;#34;lexical&amp;#34;; function maker() { return function() { return x; }; } { var x = &amp;#34;dynamic&amp;#34;; assert(maker()() == &amp;#34;???&amp;#34;); } maker()() 의 결과는 &amp;#39;dynamic&amp;#39; 이다.
심지어, 맨 마지막에 있는 {..} 블록을 넘어가서도 x 의 값은 여전이 &amp;#39;dynamic&amp;#39; 이다.
자바스크립트에서 binding은 어딘가 이도 저도 아니게 심각하게 고장난 느낌이다. 이 글에서 이야기할 lexical binding이나 dynamic binding에도 속하지 않는 느낌이고, 이번에 새로 추가된 let 도 이해하기가 어려운게 아니라 그냥 제대로 망가져 있는거 같다.</description>
    </item>
    
    <item>
      <title>(소프트웨어 고고학) 어째서 `String#replaceAll`처럼 메서드 경로의 구분자로 `#`을 쓸까?</title>
      <link>https://ageldama.github.io/posts/2019-11nov/why-sharpsign-in-method-path/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0900</pubDate>
      
      <guid>https://ageldama.github.io/posts/2019-11nov/why-sharpsign-in-method-path/</guid>
      <description>오늘 아침 다음은 오늘 아침 트위터의 타임라인에서 내가 스쳐본 한 스크린샷의 일부이다:
1
&amp;hellip;뭐에 느낌을 받았냐하면, 바로 저 String#replace(..) 이라는 부분이다. (다른 부분에서는 String.prototype.replace(..) 와 같이 썼는데 굳이 저기서만 갑자기 튀어나온 표기법)
사실 나도 종종 내가 작업한 코드의 문서를 쓰거나2 아니면 다른 사람과 텍스트로 대화를 해야할 때 이렇게 표기를 해왔었다.3
각각의 언어들에서 (내가 생각하는) 저렇게 표기하는 근거들은 다음과 같다:
Java: https://www.oracle.com/technetwork/articles/java/index-137868.html @see Component#getGraphics() JavaDoc안에서 다른 메서드, 필드를 참고로 넣고 싶을 때 이게 표준표기법이고 javadoc도 요렇게 써줘야 링크처리를 해준다.</description>
    </item>
    
  </channel>
</rss>
