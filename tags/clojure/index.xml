<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure on 아겔로그</title>
    <link>http://localhost:1313/tags/clojure/</link>
    <description>Recent content in Clojure on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;http://localhost:1313/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Wed, 12 Mar 2025 10:40:27 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>data-driven programming &amp; data-driven design &amp; data-oriented programming ???</title>
      <link>http://localhost:1313/posts/2025-03mar/2025-03mar12--01-data-prog/</link>
      <pubDate>Wed, 12 Mar 2025 10:40:27 +0000</pubDate>
      <guid>http://localhost:1313/posts/2025-03mar/2025-03mar12--01-data-prog/</guid>
      <description>비슷한 용어들. 내가 이해한 정리들은 1:&#xA;data-driven programming 데이터처리를 중심으로 하는 프로그래밍언어나 도구, 스타일.&#xA;예를 들어, awk, perl은 입력의 패턴에 따라 코드를 나누고 출력을 만들기 수월한 방식을 제공.&#xA;https://en.wikipedia.org/wiki/Data-driven_programming a &amp;#34;replacement&amp;#34; for awk and sed (by Larry Wall) data-oriented design 현대 cpu의 아키텍처에 적절하도록, cpu cache, simd등을 잘 적용될 수 있도록 애플리케이션 데이터구조를 설계하는 방식.2&#xA;그리고 단순히 게임개발에서 ecs만이 아니라 lmax disruptor등도 포함될 것 같다.&#xA;https://en.wikipedia.org/wiki/Data-oriented_design dod의 예시: Entity component system lmax disruptor (by Martin Fowler) data-oriented programming 그리고 또 갑자기 위 2개의 정의처럼 완전 갑자기, dop은 다음과 같은 원칙들을 이용한 애플리케이션 개발방식:</description>
    </item>
    <item>
      <title>Lisp에서 Dynamic/Lexical Binding와 JavaScript의 var/let</title>
      <link>http://localhost:1313/posts/2019-12dec/lisp-dynamic-and-lexical-bindings-and-js/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2019-12dec/lisp-dynamic-and-lexical-bindings-and-js/</guid>
      <description>다음의 간단한 코드를 읽어보자.&#xA;1 2 3 4 5 6 7 8 9 10 11 12 var x = &amp;#34;lexical&amp;#34;; function maker() { return function() { return x; }; } { var x = &amp;#34;dynamic&amp;#34;; assert(maker()() == &amp;#34;???&amp;#34;); } maker()() 의 결과는 &amp;#39;dynamic&amp;#39; 이다.&#xA;심지어, 맨 마지막에 있는 {..} 블록을 넘어가서도 x 의 값은 여전이 &amp;#39;dynamic&amp;#39; 이다.&#xA;자바스크립트에서 binding은 어딘가 이도 저도 아니게 심각하게 고장난 느낌이다. 이 글에서 이야기할 lexical binding이나 dynamic binding에도 속하지 않는 느낌이고, 이번에 새로 추가된 let 도 이해하기가 어려운게 아니라 그냥 제대로 망가져 있는거 같다.</description>
    </item>
    <item>
      <title>rutils으로 커먼리습 확장해서 clojure 비슷하게, 더 편하게</title>
      <link>http://localhost:1313/posts/2019-10oct/cl-rutils/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:01 +0900</pubDate>
      <guid>http://localhost:1313/posts/2019-10oct/cl-rutils/</guid>
      <description>커먼리습은 CLHS 이후로 언어 자체 정의는 변하지 않았다.&#xA;구현체마다 조금씩 확장이 있을수도 있지만 딱히 그렇게 하지도 않는거 같다. 그럴만도 하다고 생각하는게 어차피 커먼리습에서 lisp reader을 확장하는게 CLHS에서 정의해놓은 기능 중 하나이고, 구현체들도 스펙을 잘 구현해놓았으니까.&#xA;결국 커먼리습에서 문법이나 그런게 조금 마음에 안들거나 확장하고 싶으면 언제든지 매크로를 만들듯이 확장하면 되니까.&#xA;&amp;lsquo;커먼리습 언어 자체를 커먼리습으로 프로그램 할 수 있다&amp;rsquo;&#xA;이런 커먼리습 확장 &amp;lsquo;라이브러리&amp;rsquo; 들이 여러가지 있는데, 가장 요즘에 쓸만할거 같다고 생각하는건 rutils이다. https://github.</description>
    </item>
  </channel>
</rss>
