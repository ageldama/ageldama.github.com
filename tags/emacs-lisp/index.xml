<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs-Lisp on 아겔로그</title>
    <link>http://localhost:1313/tags/emacs-lisp/</link>
    <description>Recent content in Emacs-Lisp on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;http://localhost:1313/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Mon, 06 May 2024 07:51:13 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/emacs-lisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>xmake, compile_commands.json, flycheck</title>
      <link>http://localhost:1313/posts/2024-05may/2024-05may06--xmake-compile_commands_json-flycheck/</link>
      <pubDate>Mon, 06 May 2024 07:51:13 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024-05may/2024-05may06--xmake-compile_commands_json-flycheck/</guid>
      <description>&lt;p&gt;&#xA;cmake/warp등을 써보면서 c/c++ 개발할 때에 빌드도구 갖고 놀다가,&#xA;이번에 마음을 열고 xmake을 익혀봄.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;마음에 든다. 가볍고 빠르고 좋다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;ccache등도 바로 지원하고, lua으로 스크립팅도 그럭저럭 할만해 보이고,&#xA;[build.zig](&lt;a href=&#34;https://ziglang.org/learn/build-system/)&#34;&gt;https://ziglang.org/learn/build-system/)&lt;/a&gt;스러워서&#xA;당연하게도 좋은거 같아.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;계속 쓸거 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;emacs / flycheck + c/c++ 개발할 때에 단점이, 자동적으로 외부 3rd-party&#xA;라이브러리의 include-path을 설정해주지 않아서,&#xA;[dirs-local](&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html)&#34;&gt;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html)&lt;/a&gt;&#xA;같은걸 세팅해주길 기대한다는 점.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 그냥 &lt;code&gt;xmake project -vD -k compile_commands -m debug&lt;/code&gt; 같이&#xA;&lt;code&gt;compile_commands.json&lt;/code&gt; 생성하고,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;이걸 파싱해서 표준출력으로 include-paths&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/compile_commands_json_incdirs.py&#34;&gt;https://github.com/ageldama/configs/blob/master/compile_commands_json_incdirs.py&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;현재 소스코드 버퍼 기준으로 가장 가까운 compile_commands.json 파일&#xA;위치 찾는 elisp 함수&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/elisp/compcmdsjson-tiny.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/elisp/compcmdsjson-tiny.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;위 (1)+(2)을 조합해서 flycheck을 위한 변수 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 들을 설정하는 elisp 함수&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/elisp/flycheck-compcmdsjson.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/elisp/flycheck-compcmdsjson.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;그리고 위 (3)을 c/c++-mode에 자동적으로 적용하고, 또 단축키도&#xA;만드는 elisp 코드&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/feat/flycheck-compcmdsjson.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/feat/flycheck-compcmdsjson.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;…요렇게 만들어서 세팅해서 쓰니 편안.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lisp에서 Dynamic/Lexical Binding와 JavaScript의 var/let</title>
      <link>http://localhost:1313/posts/2019-12dec/lisp-dynamic-and-lexical-bindings-and-js/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2019-12dec/lisp-dynamic-and-lexical-bindings-and-js/</guid>
      <description>&lt;p&gt;&#xA;다음의 간단한 코드를 읽어보자.&lt;/p&gt;&#xA;&lt;div class=&#34;src src-js&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;lexical&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dynamic&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;???&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;&lt;code&gt;maker()()&lt;/code&gt; 의 결과는 &lt;code&gt;&amp;#39;dynamic&amp;#39;&lt;/code&gt; 이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;심지어, 맨 마지막에 있는 &lt;code&gt;{..}&lt;/code&gt; 블록을 넘어가서도 &lt;code&gt;x&lt;/code&gt; 의 값은 여전이&#xA;&lt;code&gt;&amp;#39;dynamic&amp;#39;&lt;/code&gt; 이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;자바스크립트에서 binding은 어딘가 이도 저도 아니게 심각하게 고장난&#xA;느낌이다. 이 글에서 이야기할 lexical binding이나 dynamic binding에도&#xA;속하지 않는 느낌이고, 이번에 새로 추가된 &lt;code&gt;let&lt;/code&gt; 도 이해하기가 어려운게&#xA;아니라 그냥 제대로 망가져 있는거 같다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
