<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asdf on 아겔로그</title>
    <link>http://localhost:1313/tags/asdf/</link>
    <description>Recent content in Asdf on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;http://localhost:1313/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Mon, 26 Oct 2020 00:00:00 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/asdf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>&#34;asdf-subdir-finder&#34; released!</title>
      <link>http://localhost:1313/posts/2020-10oct/asdf-subdir-finder-1st/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2020-10oct/asdf-subdir-finder-1st/</guid>
      <description>&lt;p&gt;&#xA;지난번 포스팅한 &amp;#34;&lt;a href=&#34;http://localhost:1313/posts/2020-10oct/lisp-asdf-subdir-finder/&#34;&gt;asdf 정의를 내 코드베이스의 하위디렉토리에서 자동으로&#xA;로딩하기&lt;/a&gt;&amp;#34;를 프로젝트으로 만들었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/asdf-subdir-finder&#34;&gt;https://github.com/ageldama/asdf-subdir-finder&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;사람마다 커먼리습으로 작업하는 스타일에 따라 많이 다를 수 있어서 안&#xA;써도 되기도 하지만, 그냥 정리해서 공개는 해봤다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;커먼리습 ASDF 불러오기 편하게 하기&#34; 대모험</title>
      <link>http://localhost:1313/posts/2020-10oct/lisp-asdf-subdir-finder/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2020-10oct/lisp-asdf-subdir-finder/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;ASDF와 system definition file 검색의 정석&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;이전에 &lt;a href=&#34;http://localhost:1313/posts/2018-11nov/cl-asdf-custom-load-script/&#34;&gt;ASDF을 이용하여 커먼리습 프로젝트의 의존성, 시스템을 로딩하기&lt;/a&gt;&#xA;  에 대해서 설명한 적이 있었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  이전에 다룬 내용은 정석적으로 &lt;code&gt;$HOME/common-lisp&lt;/code&gt; 디렉토리에 &lt;code&gt;.asd&lt;/code&gt;&#xA;  파일을 심볼릭링크를 걸고, &lt;code&gt;(asdf:load-system ..)&lt;/code&gt; 을 시도하는&#xA;  내용이었었다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;Prototyping등 더 편안하게 혼자 코딩을 할 때는…&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;혼자 커먼리습 코딩을 하면서, 나는 더 간단하게 프로젝트를 시작하는&#xA;  방법을 선호한다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  커먼리습이 파일 이름이나 경로에 대해서 의존하는 것이 아니고,&#xA;  컴파일시점, 로딩시점에 순서에 따라 로딩해서 최종적으로 컴파일하여&#xA;  적재한 결과 이미지를 더 중요하게 여기기 때문에, 그리고 그런 컴파일,&#xA;  빌드, 로딩과 같은 모든 단계들 자체도 커먼리습 표현식 그자체로&#xA;  동작하기 때문에 그냥 하나의 소스파일을 섹션별로 나눠서 작업하면&#xA;  편리하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>커먼리습 설정하기, ASDF 시스템 코드를 받기</title>
      <link>http://localhost:1313/posts/2019-12dec/tips-ecl-clisp/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:01 +0900</pubDate>
      <guid>http://localhost:1313/posts/2019-12dec/tips-ecl-clisp/</guid>
      <description>&lt;h1 id=&#34;1-asdf을-최신-버젼으로-설정한다&#34;&gt;1. ASDF을 최신 버젼으로 설정한다&lt;/h1&gt;&#xA;&lt;p&gt;(이부분에서 많이 고생했는데) SBCL와 다르게&#xA;&lt;a href=&#34;https://clisp.sourceforge.io/&#34;&gt;CLISP&lt;/a&gt;,&#xA;&lt;a href=&#34;https://common-lisp.net/project/ecl/&#34;&gt;ECL&lt;/a&gt; 은 최신 버젼의 ASDF을&#xA;내장한걸 패키징해놓지 않았다.&lt;/p&gt;&#xA;&lt;p&gt;대부분은 문제가 없이 동작하지만, 내가 작성한 커먼리습 시스템에서&#xA;실행파일을 빌드할 때 문제가 많았다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ASDF 의 최신 버젼을 &lt;code&gt;git clone&lt;/code&gt; 해서 적당한 디렉토리에 받는다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://common-lisp.net/project/asdf/&#34;&gt;https://common-lisp.net/project/asdf/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;make&lt;/code&gt;을 내려받은 ASDF 디렉토리에서 실행한다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;실행하면 &lt;code&gt;build/asdf.lisp&lt;/code&gt; 파일으로 한 파일으로 뭉쳐서 로딩하게&#xA;편안한 파일을 생성해준다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;내 커먼리습 구현체의 시작설정파일 맨 앞에 다음처럼 추가한다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;(load &amp;quot;~/local/asdf/build/asdf&amp;quot;)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;여기서 나는 &lt;code&gt;$HOME/local/asdf/&lt;/code&gt; 에 ASDF을 받았다고 가정.&lt;/li&gt;&#xA;&lt;li&gt;그리고 &lt;code&gt;asdf.lisp&lt;/code&gt; 파일이더라도, 마지막에 &lt;code&gt;.lisp&lt;/code&gt; 확장자는 생략했다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ECL은 &lt;code&gt;$HOME/.eclrc&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;CLISP은 &lt;code&gt;$HOME/.clisprc.lisp&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;그리고 중요한데, 그 다음에&#xA;&lt;a href=&#34;https://www.quicklisp.org/&#34;&gt;Quicklisp&lt;/a&gt; 초기화 내용이 오도록&#xA;한다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Quicklisp을 초기화하기 전에 ASDF 최신 버젼이 로딩되어 있는게 더&#xA;나을테니까.&lt;/li&gt;&#xA;&lt;li&gt;어차피 위의 (1~3)의 순서대로 ASDF 먼저 설정한 다음에&#xA;Quicklisp설치한 다음에 &lt;code&gt;ql:add-to-init-file&lt;/code&gt; 실행하면 이런&#xA;순서로 추가해준다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&amp;hellip;별거 아닌데, 이거 때문에 빌드한 결과 실행파일이 이상해서 좀 고생했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ASDF으로 간단한 의존성 연결과 로딩하기</title>
      <link>http://localhost:1313/posts/2018-11nov/cl-asdf-custom-load-script/</link>
      <pubDate>Sat, 03 Nov 2018 19:00:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/2018-11nov/cl-asdf-custom-load-script/</guid>
      <description>&lt;h1 id=&#34;system-이런게-왜-필요하지-require있잖아&#34;&gt;System? 이런게 왜 필요하지? &lt;code&gt;require&lt;/code&gt;있잖아&lt;/h1&gt;&#xA;&lt;p&gt;대부분의 유명한 프로그래밍언어들이 &lt;em&gt;커먼리습의 System&lt;/em&gt; 에 대응하는&#xA;기능이 명확하게 없으니까, 다른 프로그래밍 하거나 하는 방법으로&#xA;이야기를 하지는 않아야겠다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://lispcookbook.github.io/cl-cookbook/systems.html&#34;&gt;https://lispcookbook.github.io/cl-cookbook/systems.html&lt;/a&gt; 에서 마음에 드는 설명을 찾을수 있다.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A &lt;strong&gt;system&lt;/strong&gt; is a collection of Lisp files that together constitute an&#xA;application or a library, and that should therefore be managed as a&#xA;whole. A &lt;strong&gt;system definition&lt;/strong&gt; describes which source files make up the&#xA;system, what the dependencies among them are, and the order they&#xA;should be compiled and loaded in.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
