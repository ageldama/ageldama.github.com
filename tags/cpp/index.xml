<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpp on 아겔로그</title>
    <link>http://localhost:1313/tags/cpp/</link>
    <description>Recent content in Cpp on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;http://localhost:1313/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Wed, 08 Mar 2023 06:32:05 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>News 08/03/2023 .02 : reactjs, rust, zig, hiring, nes</title>
      <link>http://localhost:1313/posts/2023-03mar/2023-03mar08--02-ping--news/</link>
      <pubDate>Wed, 08 Mar 2023 06:32:05 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-03mar/2023-03mar08--02-ping--news/</guid>
      <description>&amp;#34;리액트가 날 인질으로 잡고 있어요&amp;#34; &amp;#34;헛소리/bullshit 없이 엔지니어링 재능이 있는 사람을 고용하기&amp;#34; &amp;#34;NESFab is a new programming language for creating NES games&amp;#34; &amp;#34;zig이 rust보다 빠르고 안전할 수 있는 경우&amp;#34; &amp;#34;리액트가 날 인질으로 잡고 있어요&amp;#34; https://emnudge.dev/blog/react-hostage&#xA;…말해 뭘할까 싶은데. :see_no_evil:&#xA;포스팅 자체는 react, hooks 같은 것들의 complexity에 대한 이야기이지만.&#xA;오히려 흥미롭게 생각하는 것은, 과거 한국에서 &amp;#39;퍼블리셔&amp;#39;라고 하던 사람들이 어떻게 되었는가 생각해보며, 함께 지금의 &amp;#39;프론트엔드 개발자&amp;#39;, 혹은 &amp;#39;앱 개발자&amp;#39;, &amp;#39;리액트 개발자&amp;#39;, &amp;#39;자바스크립트 개발자&amp;#39;들이 앞으로 어떻게 될지 상상해본다.</description>
    </item>
    <item>
      <title>Ping 04/02/2023 .01: 씨언어의 장자 zig, rust, golang, c&#43;&#43; ???</title>
      <link>http://localhost:1313/posts/2023-02feb/2023-02feb04--01-ping/</link>
      <pubDate>Sat, 04 Feb 2023 16:46:54 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-02feb/2023-02feb04--01-ping/</guid>
      <description>최근에 재미로 zig 을 정말 재밌게 &amp;#39;읽었다&amp;#39;. 공부해보고 실제로 뭔가 코딩을 많이 해보거나 한 것은 아니고, 대체 어떻게 동작하는 프로그램을 이걸로 만들라고 하는건지 이해하고 싶었기 때문에 해봤다.&#xA;zig으로 프로그램을 짜는게 궁금하던 부분은 haskell의 monad을 이용한 방식, 혹은 apl이나 prolog으로 실제프로그램을 어떻게 만들 수 있을지 패러다임부터 다른 언어를 공부하고 생각해보는 것과는 조금 다를수도 있겠다. 어쨌든 그냥 imperative언어이니까.&#xA;오히려, zig을 어떻게 써먹어야 할지 궁금하던 지점은, c++의 스마트포인터와 move semantics등을 이해하는 것이나, rust의 borrowing checker, rc/arc등을 이해하는 것과 마찬가지인 것 같다.</description>
    </item>
  </channel>
</rss>
