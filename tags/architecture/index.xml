<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on 아겔로그</title>
    <link>https://ageldama.github.io/tags/architecture/</link>
    <description>Recent content in Architecture on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;https://ageldama.github.io/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Wed, 12 Mar 2025 10:40:27 +0000</lastBuildDate>
    <atom:link href="https://ageldama.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>data-driven programming &amp; data-driven design &amp; data-oriented programming ???</title>
      <link>https://ageldama.github.io/posts/2025-03mar/2025-03mar12--01-data-prog/</link>
      <pubDate>Wed, 12 Mar 2025 10:40:27 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-03mar/2025-03mar12--01-data-prog/</guid>
      <description>&lt;p&gt;&#xA;비슷한 용어들. 내가 이해한 정리들은 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;data-driven programming&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;데이터처리를 중심으로 하는 프로그래밍언어나 도구, 스타일.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  예를 들어, awk, perl은 입력의 패턴에 따라 코드를 나누고 출력을&#xA;  만들기 수월한 방식을 제공.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data-driven_programming&#34;&gt;https://en.wikipedia.org/wiki/Data-driven_programming&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Perl/perl5/commit/8d063cd8450e59ea1c611a2f4f5a21059a2804f1&#34;&gt;a &amp;#34;replacement&amp;#34; for awk and sed&lt;/a&gt; (by Larry Wall)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;data-oriented design&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;현대 cpu의 아키텍처에 적절하도록, cpu cache, simd등을 잘 적용될 수&#xA;  있도록 애플리케이션 데이터구조를 설계하는 방식.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-2&#34; href=&#34;#footnote-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그리고 단순히 게임개발에서 ecs만이 아니라 lmax disruptor등도 포함될&#xA;  것 같다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data-oriented_design&#34;&gt;https://en.wikipedia.org/wiki/Data-oriented_design&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;dod의 예시: &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity_component_system&#34;&gt;Entity component system&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/articles/lmax.html&#34;&gt;lmax disruptor&lt;/a&gt; (by Martin Fowler)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-3&#34;&gt;&#xA;data-oriented programming&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;그리고 또 갑자기 위 2개의 정의처럼 완전 갑자기, dop은 다음과 같은&#xA;  원칙들을 이용한 애플리케이션 개발방식:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
