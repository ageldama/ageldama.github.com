<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Toy on 아겔로그</title>
    <link>http://localhost:1313/tags/toy/</link>
    <description>Recent content in Toy on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;http://localhost:1313/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Wed, 16 Oct 2019 00:00:01 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/toy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cl-toy-stack-lang 첫번째 버젼과 작업하면서 깨달은것</title>
      <link>http://localhost:1313/posts/2019-10oct/cl-toy-stack-lang/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:01 +0900</pubDate>
      <guid>http://localhost:1313/posts/2019-10oct/cl-toy-stack-lang/</guid>
      <description>&lt;p&gt;일단 첫번째 버젼 다 만들었다.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ageldama/cl-toy-stack-lang/releases/tag/v0.1.0&#34;&gt;https://github.com/ageldama/cl-toy-stack-lang/releases/tag/v0.1.0&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;그냥 장난으로 인터프리터도 아니라 그냥&#xA;&lt;a href=&#34;http://clhs.lisp.se/Body/f_eval.htm&#34;&gt;eval&lt;/a&gt; 이용한 간단한 파서도&#xA;필요없이 lexer만으로 만들만한&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Forth_(programming_language)&#34;&gt;Forth&lt;/a&gt;&#xA;비슷한 언어를 만듬.&lt;/p&gt;&#xA;&lt;p&gt;명령어도 실용적인 목적이 아닌만큼 그냥 문자열 장난 밖엔 없다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;느낀점&#34;&gt;느낀점&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;라이브러리 좋은거 갖다 잘쓰자&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://quickdocs.org/uiop/&#34;&gt;uiop&lt;/a&gt; 같은거,&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/24_aba.htm&#34;&gt;feature-expression&lt;/a&gt; 삽질을 적게하거나 안해도됨. 더&#xA;portable하고 잘 굴러가는.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Test!&lt;/strong&gt;&#xA;3. 짜고 하나씩 진화시켜가면서 다시 돌리는 재미.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Idiomatic하게&lt;/strong&gt; 그리고 역시 Test!&#xA;&lt;ol&gt;&#xA;&lt;li&gt;..처음엔 그냥 전역변수에 상태를 갖도록 만들고,&lt;/li&gt;&#xA;&lt;li&gt;그걸 &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/03_abaab.htm&#34;&gt;dynamic binding&lt;/a&gt;으로 바꿔서 파라미터화하고,&lt;/li&gt;&#xA;&lt;li&gt;또 그걸 다시 상태를 캡슐화하는 클래스로 감싸고,&lt;/li&gt;&#xA;&lt;li&gt;처음엔 단순하게 리습스럽게 짜고 그걸 진화시키고,&lt;/li&gt;&#xA;&lt;li&gt;그리고 역시 다시 테스트.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;em&gt;아는만큼 보인다&lt;/em&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;setf&lt;/code&gt; 병렬로 하기, +destructuring&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;asdf:operate&lt;/code&gt; + &lt;code&gt;:build-op&lt;/code&gt; :&#xA;&lt;a href=&#34;http://www.sbcl.org/&#34;&gt;SBCL&lt;/a&gt;/&lt;a href=&#34;https://common-lisp.net/project/ecl/&#34;&gt;ECL&lt;/a&gt;&#xA;등 리습컴파일러에 관계 없이 실행이미지 빌드 편안하게&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/xach/buildapp&#34;&gt;https://github.com/xach/buildapp&lt;/a&gt; 같은거 써볼까 하다가,&#xA;처음엔 그냥 간단히 쉘스크립팅으로 시작.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;기타 등등&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&amp;hellip;그리고 무엇보다 재밌었다. 그리고 뭐가됐든 그냥 짜보고 굴러가는&#xA;형태로 계속해서 작은 프로그램을 많이 만들고 하면서 놀아야겠다고&#xA;생각했다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
