<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Type on 아겔로그</title>
    <link>http://localhost:1313/tags/type/</link>
    <description>Recent content in Type on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;http://localhost:1313/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Fri, 03 Jan 2020 00:00:02 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/type/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Covariant, Contravariant, Invariant등 Type Variances 이해하기</title>
      <link>http://localhost:1313/posts/2020-01jan/type-variances/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:02 +0900</pubDate>
      <guid>http://localhost:1313/posts/2020-01jan/type-variances/</guid>
      <description>거의 그대로 베껴온 원본 글&#xA;계약서로서의 타입 타입을 생각할 때, &amp;lt;계약서&amp;gt;로 생각하는 것이 편하다.&#xA;왜냐하면, 전달한 값이 그 타입의 범위 안에서 전달 받은 쪽에서 취급이 제한된다는 보장이 있어야 안전한 코드를 컴파일러는 생성해줄 수 있다. (혹은 그렇게 안전한지 체크를 해준다.)&#xA;Subtype, 일반화(Generalization), 특화(Specialization) 타입을 말할 때, 나는 보통 객체지향언어에서의 클래스의 상속 관계를 떠올린다. 꼭 그렇지는 않겠지만, 이 글에서도 그렇게 설명을 해보겠다.&#xA;이 글에서는 계속 다음 3개의 타입이 있고, 다음과 같은 관계라고 가정하겠다.</description>
    </item>
  </channel>
</rss>
