<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zig on 아겔로그</title>
    <link>http://localhost:1313/tags/zig/</link>
    <description>Recent content in Zig on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;http://localhost:1313/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Wed, 08 Mar 2023 06:32:05 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/zig/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>News 08/03/2023 .02 : reactjs, rust, zig, hiring, nes</title>
      <link>http://localhost:1313/posts/2023-03mar/2023-03mar08--02-ping--news/</link>
      <pubDate>Wed, 08 Mar 2023 06:32:05 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-03mar/2023-03mar08--02-ping--news/</guid>
      <description>&lt;p&gt;&#xA;&lt;div&gt;&#xA;  &lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-1&#34;&gt;&amp;#34;리액트가 날 인질으로 잡고 있어요&amp;#34;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-2&#34;&gt;&amp;#34;헛소리/bullshit 없이 엔지니어링 재능이 있는 사람을 고용하기&amp;#34;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-3&#34;&gt;&amp;#34;NESFab is a new programming language for creating NES games&amp;#34;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-4&#34;&gt;&amp;#34;zig이 rust보다 빠르고 안전할 수 있는 경우&amp;#34;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;&amp;#34;리액트가 날 인질으로 잡고 있어요&amp;#34;&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://emnudge.dev/blog/react-hostage&#34;&gt;https://emnudge.dev/blog/react-hostage&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  …말해 뭘할까 싶은데. :see_no_evil:&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  포스팅 자체는 react, hooks 같은 것들의 complexity에 대한&#xA;  이야기이지만.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  오히려 흥미롭게 생각하는 것은, 과거 한국에서 &amp;#39;퍼블리셔&amp;#39;라고 하던&#xA;  사람들이 어떻게 되었는가 생각해보며, 함께 지금의 &amp;#39;프론트엔드&#xA;  개발자&amp;#39;, 혹은 &amp;#39;앱 개발자&amp;#39;, &amp;#39;리액트 개발자&amp;#39;, &amp;#39;자바스크립트&#xA;  개발자&amp;#39;들이 앞으로 어떻게 될지 상상해본다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 07/02/2023 .01 : C&#43;&#43;, D, Zig의 이름에 대한 추측</title>
      <link>http://localhost:1313/posts/2023-02feb/2023-02feb07--01-ping/</link>
      <pubDate>Tue, 07 Feb 2023 07:48:17 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-02feb/2023-02feb07--01-ping/</guid>
      <description>&lt;p&gt;&#xA;문득 떠오른 생각이라서, 그냥 추측.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/strong&gt; : &lt;em&gt;로마숫자(roman numeral)&lt;/em&gt; 으로 100.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;처음부터 의도한 숫자가 100이 아니었을거란건 나도 알거 같아.&#xA;BCPL이나 그런 역사에 대해 나도 조금은 아니까.&lt;/li&gt;&#xA;&lt;li&gt;그런데 그 이후에 따르는 언어들이 그런 패턴을 만든거 같아서 재미로&#xA;쓰는 글.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/strong&gt; : 위의 로마숫자이란 생각과 &lt;em&gt;C언어의 &lt;code&gt;x++&lt;/code&gt; 연산&lt;/em&gt; 으로 생각해보면,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;즉시 평가할 때에는 C == 100, 그냥 C와 같아 보임.&lt;/li&gt;&#xA;&lt;li&gt;그런데 저장된 값은 +1, == 101.&lt;/li&gt;&#xA;&lt;li&gt;…어쨌든 그냥 볼 때엔, 씨언어와 거의 같아 보이지만, 그래도 좀&#xA;더 성장했다고. 그리고 겸손하게 오직 +1.&lt;/li&gt;&#xA;&lt;li&gt;(그냥 겸손하다고 될 문제인가 싶다… C++ 좋아하지만 ㅎㅎ)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/strong&gt; : C에서 다음 단계으로 발전했으니, 이번엔 다섯배, 역시 로마숫자, 500.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 04/02/2023 .01: 씨언어의 장자 zig, rust, golang, c&#43;&#43; ???</title>
      <link>http://localhost:1313/posts/2023-02feb/2023-02feb04--01-ping/</link>
      <pubDate>Sat, 04 Feb 2023 16:46:54 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-02feb/2023-02feb04--01-ping/</guid>
      <description>&lt;p&gt;&#xA;최근에 재미로 &lt;a href=&#34;https://ziglang.org/&#34;&gt;zig&lt;/a&gt; 을 정말 재밌게 &amp;#39;읽었다&amp;#39;. 공부해보고 실제로 뭔가&#xA;코딩을 많이 해보거나 한 것은 아니고, 대체 어떻게 동작하는 프로그램을&#xA;이걸로 만들라고 하는건지 이해하고 싶었기 때문에 해봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;zig으로 프로그램을 짜는게 궁금하던 부분은 haskell의 monad을 이용한&#xA;방식, 혹은 apl이나 prolog으로 실제프로그램을 어떻게 만들 수 있을지&#xA;패러다임부터 다른 언어를 공부하고 생각해보는 것과는 조금 다를수도&#xA;있겠다. 어쨌든 그냥 imperative언어이니까.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;오히려, zig을 어떻게 써먹어야 할지 궁금하던 지점은, c++의&#xA;스마트포인터와 move semantics등을 이해하는 것이나, rust의 borrowing&#xA;checker, rc/arc등을 이해하는 것과 마찬가지인 것 같다.&#xA;둘 다 이해하고 익숙해지면 그렇게 부담스럽지 않을거 같긴 하다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
