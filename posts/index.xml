<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 아겔로그</title>
    <link>https://ageldama.github.io/posts/</link>
    <description>Recent content in Posts on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;https://ageldama.github.io/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Mon, 15 Sep 2025 08:26:26 +0000</lastBuildDate>
    <atom:link href="https://ageldama.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>freebsd &#43; 고물랩탑 쓸만하다(재밌다!)</title>
      <link>https://ageldama.github.io/posts/2025-09sep/freebsd-why/</link>
      <pubDate>Mon, 15 Sep 2025 08:26:26 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-09sep/freebsd-why/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;시도하기 이전에는&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;좀 오래되고, 이것저것 맛이 가기 시작한 싸구려 랩탑 asus e502ma-을&#xA;  서브랩탑으로 집책상에서 써왔었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  메모리도 4GB, 확장이 불가능하고. 배터리도 조금 부풀었고 충전도 잘 되지&#xA;  않는다. 거기에 외부전원어댑터를 붙이지 않으면 어째서인지 eDP이&#xA;  출력되지 않는다. ㅎㅎㅎ&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그래도 어쨌든 debian-stable 설치해놓고 samba 서버로 책상에서 쓰거나&#xA;  하기엔 적당했다. 딱히 동영상을 틀어 놓거나 하는 것도 포기해야 할&#xA;  정도로 빠르지도 않았다. 웹브라우징도 느렸다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;그러다가 freebsd 설치를 했다 (&lt;code&gt;14.3-RELEASE&lt;/code&gt; &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;)&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;원래도 freebsd이 gui이나 latency이 중요한 체감이 훨씬 가볍고 부드럽게&#xA;  느껴지는걸 알고 있었다. 그런데 이번에는 너무 &lt;span style=&#34;text-decoration: underline;&#34;&gt;극적으로 즐거웠다&lt;/span&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[작은 팁] freebsd 외장hdd 빠르게 쓰기 (exfat 파일시스템)</title>
      <link>https://ageldama.github.io/posts/2025-09sep/freebsd-exfat-faster-usb-exthdd/</link>
      <pubDate>Mon, 15 Sep 2025 08:25:26 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-09sep/freebsd-exfat-faster-usb-exthdd/</guid>
      <description>&lt;p&gt;&#xA;freebsd을 써오면서 좀 불만이었던게&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, usb으로 외장 hdd을 연결할 때&#xA;호환성 혹은 성능이 너무 느림.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 아예 빠른 유선랜을 연결해놓고 samba으로 파일을 백업/공유했었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;호환성은 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup&#34;&gt;linux luks&lt;/a&gt; 지원도 아쉽지만, 대부분의 외장하드 파일시스템을 잘&#xA;지원하지 못하는거 같았어서.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그런데, 이번에 다시 시도하면서 그냥 얌전하게 &lt;a href=&#34;https://wiki.freebsd.org/FUSEFS&#34;&gt;fusefs&lt;/a&gt; + &lt;a href=&#34;https://www.freshports.org/sysutils/fusefs-exfat&#34;&gt;fusefs-exfat&lt;/a&gt;&#xA;사용하니 그럭저럭 괜찮은 성능이 나와서 이렇게 해야겠구나 생각.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;fusefs + ntfs 같은 port도 있는데, 이것도 빠를거 같지만, exfat이 더&#xA;구현이 빠를거 같다. (파일시스템 구조부터 훨씬 단순할테니까)&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;Footnotes&#xA;&lt;/h2&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;footnotes&#34;&gt;&#xA;&lt;hr class=&#34;footnotes-separatator&#34;/&gt;&#xA;&lt;div class=&#34;footnote-definitions&#34;&gt;&#xA;&lt;div class=&#34;footnote-definition&#34;&gt;&#xA;&lt;sup id=&#34;footnote-1&#34;&gt;&lt;a href=&#34;#footnote-reference-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&#xA;&lt;div class=&#34;footnote-body&#34;&gt;&#xA;&lt;p&gt;물론 이런 불만 말고도 freebsd은 wifi칩, bluetooth, gpu지원 등등&#xA;hw driver지원이 항상 부족하지만.&lt;/p&gt;</description>
    </item>
    <item>
      <title>블로그 검색을 다시 짰다 (PageFind 제거)</title>
      <link>https://ageldama.github.io/posts/2025-09sep/no-pagefind-anymore/</link>
      <pubDate>Sat, 13 Sep 2025 10:10:04 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-09sep/no-pagefind-anymore/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://pagefind.app/&#34;&gt;pagefind&lt;/a&gt;이 freebsd 환경에서 동작하지 않아서, 그냥 다시 짰다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;fuse.js을 사용하는 예제 등이 있었지만&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, 그럴거면 그냥 ajax으로&#xA;얻은 &lt;code&gt;index.json&lt;/code&gt;-을 직접 검색해도 될거 같아서 그냥 javascript 작성&#xA;오랬만에.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그리고 ui등도 내 취향에 맞게 간단하게 만들어서 만족스럽다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;pagefind처럼 검색어에 따라 필요한 만큼만 http get하는게 아니라 조금&#xA;아쉽지만, 전체 &lt;code&gt;index.json&lt;/code&gt;-fetch해도 500kb 안쪽인거 같아서 괜찮지&#xA;않을까 싶음. (거기에 브라우저캐슁도 먹으니까)&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;Footnotes&#xA;&lt;/h2&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;footnotes&#34;&gt;&#xA;&lt;hr class=&#34;footnotes-separatator&#34;/&gt;&#xA;&lt;div class=&#34;footnote-definitions&#34;&gt;&#xA;&lt;div class=&#34;footnote-definition&#34;&gt;&#xA;&lt;sup id=&#34;footnote-1&#34;&gt;&lt;a href=&#34;#footnote-reference-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&#xA;&lt;div class=&#34;footnote-body&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://findstar.pe.kr/2021/07/10/fuse-search-on-hugo/&#34;&gt;https://findstar.pe.kr/2021/07/10/fuse-search-on-hugo/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ddakong v1.1 릴리즈: FreeBSD / kqueue</title>
      <link>https://ageldama.github.io/posts/2025-05may/term-ddakong-v1.1-release/</link>
      <pubDate>Thu, 08 May 2025 19:17:25 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2025-05may/term-ddakong-v1.1-release/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;릴리즈 v1.1&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&#xA;  freebsd 지원: 빌드가능하도록 수정 + kqueue 이벤트처리 추가&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  (원래는 epoll/linux만 지원)&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&amp;lt;&lt;a href=&#34;https://github.com/ageldama/term-ddakong/releases/tag/v1.1&#34;&gt;https://github.com/ageldama/term-ddakong/releases/tag/v1.1&lt;/a&gt;&amp;gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;darwin/osx, openbsd 등은 빌드+실행될거 같은데 확신은 못하겠믐.&lt;/li&gt;&#xA;&lt;li&gt;매 릴리즈마다 크로스컴파일해서 바이너리릴리즈해왔는데, 리눅스는&#xA;aarch64, armhf, i686, x86_64 자동화해놨는데, freebsd은 아직이라&#xA;이번엔 스킵.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;…오랬만에 freebsd 켜서 쓰는데, 반응속도감 역시 엄청좋다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ddakong v1.0 릴리즈: lua scripting 시스템</title>
      <link>https://ageldama.github.io/posts/2025-05may/term-ddakong-v1.0-release/</link>
      <pubDate>Wed, 07 May 2025 19:28:25 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2025-05may/term-ddakong-v1.0-release/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;릴리즈 v1.0&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&#xA;  ANSI C/DLL 플러그인만이 아니라, Lua scripting plugin 만들어서,&#xA;  그냥 루아스크립팅만으로 플러그인 같은 확장이 가능해졌다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그리고 이것저것 안정화/문서화하고, 더욱 hackable🪓🔥하고 가벼운&#xA;  터미널입력기가 되었음.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://github.com/ageldama/term-ddakong/releases/tag/v1.0&#34;&gt;https://github.com/ageldama/term-ddakong/releases/tag/v1.0&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ddakong v0.0.8 릴리즈: 안정화 및 플러그인 시스템</title>
      <link>https://ageldama.github.io/posts/2025-05may/term-ddakong-v0.0.8-release/</link>
      <pubDate>Sat, 03 May 2025 14:32:25 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-05may/term-ddakong-v0.0.8-release/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;스크린샷:&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ageldama.github.io/2025-05may/KIMCHI-cropped.png&#34; alt=&#34;/2025-05may/KIMCHI-cropped.png&#34; title=&#34;/2025-05may/KIMCHI-cropped.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&amp;lt; &lt;a href=&#34;https://github.com/ageldama/term-ddakong&#34;&gt;https://github.com/ageldama/term-ddakong&lt;/a&gt; &amp;gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&amp;lt; &lt;a href=&#34;https://github.com/ageldama/term-ddakong/releases/tag/v0.0.8&#34;&gt;https://github.com/ageldama/term-ddakong/releases/tag/v0.0.8&lt;/a&gt; &amp;gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;릴리즈 v0.0.8&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;안정화/문서화하고, 이제 플러그인 시스템을 도입해서 원하는대로&#xA;hackable🪓🔥한 터미널용 입력기가 되었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;플러그인 작성해서:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;한글만이 아니라 다른 언어 입력기로 사용할 수도 있음.&lt;/li&gt;&#xA;&lt;li&gt;UTF-8 이외에 다른 인코딩으로 출력가능함. (예: EUC-KR, EUC-JP …)&lt;/li&gt;&#xA;&lt;li&gt;토글키(&lt;code&gt;Control-H&lt;/code&gt;) 마음에 안들면 바꾸면 됨.&lt;/li&gt;&#xA;&lt;li&gt;등등등&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;오늘 한 작업들은:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;안정화 많이 진행했다.&lt;/li&gt;&#xA;&lt;li&gt;코드 문서화 주석작성 다 했다.&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;cross-platform build 자동화해서 릴리즈 때 편해졌다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;armhf (raspberry pi 32bit), aarch64 (raspberry pi 64bit),&#xA;i386 (32bit), x86_64 모두 릴리즈하고 있다.&lt;/li&gt;&#xA;&lt;li&gt;..혹시나 어디선가 i386 기계 터미널에서 한글을 입력하고 싶은&#xA;사람이 있을거 같아서.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ddakong 한글입력기 릴리즈</title>
      <link>https://ageldama.github.io/posts/2025-05may/term-ddakong-initial-release/</link>
      <pubDate>Fri, 02 May 2025 10:06:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-05may/term-ddakong-initial-release/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/term-ddakong&#34;&gt;https://github.com/ageldama/term-ddakong&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&#xA;일단 내가 fbterm에서 가볍게 한글쓰고 싶어서 만듦.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;ansi c99만으로 가볍게 작성했다. 다른 라이브러리 의존않고.&#xA;만족스럽다. 빌드하니까 25 KB 정도 나오네. 만족.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;더 했으면 하는 일들은:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;lua -or- dlopen 등으로 다른 입력기 지원하기 (예: 3벌식)&lt;/li&gt;&#xA;&lt;li&gt;utf-8 이외의 인코딩 지원하기&lt;/li&gt;&#xA;&lt;li&gt;raspberry pi 32/64 바이너리 릴리즈 (armhf, arm64)&lt;/li&gt;&#xA;&lt;li&gt;소스코드 조금 포매팅, 주석작성, 문서화&lt;/li&gt;&#xA;&lt;li&gt;빌드개선 : 사용하는 함수 등 체크하기 강화 (예: &lt;code&gt;epoll&lt;/code&gt; …어차피&#xA;거의 다 있지만.)&lt;/li&gt;&#xA;&lt;li&gt;스크린샷? ㅎㅎ&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>i3 키바인딩을 rofi으로 확인하고 실행하기</title>
      <link>https://ageldama.github.io/posts/2025-04apr/2025-04apr09--01-i3-bindsyms-rofi-dmenu/</link>
      <pubDate>Wed, 09 Apr 2025 08:45:25 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-04apr/2025-04apr09--01-i3-bindsyms-rofi-dmenu/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://i3wm.org/&#34;&gt;i3wm&lt;/a&gt; 써서 매일 리눅스 사용.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;키보드만 써서 사용하는건 좋은데, 키바인딩이 늘어나서 맨날 i3 키바인딩&#xA;까먹음.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 만들어봤다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;현재 i3 config에 등록된 키바인딩 자동으로 표시 🖥️&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/davatorium/rofi&#34;&gt;rofi&lt;/a&gt;에서 선택하면, 그걸 또 실행까지 해줌 🚀&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&lt;img src=&#34;https://ageldama.github.io/2025-04apr/i3-bindsyms-rofi-dmenu.png&#34; alt=&#34;/2025-04apr/i3-bindsyms-rofi-dmenu.png&#34; title=&#34;/2025-04apr/i3-bindsyms-rofi-dmenu.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;gist: &lt;a href=&#34;https://gist.github.com/ageldama/377d00159cfe0cb387f20297ca6a5e6b&#34;&gt;https://gist.github.com/ageldama/377d00159cfe0cb387f20297ca6a5e6b&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;src src-perl&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;13&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#13&#34;&gt;13&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;14&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#14&#34;&gt;14&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;15&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#15&#34;&gt;15&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;16&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#16&#34;&gt;16&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;17&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#17&#34;&gt;17&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;18&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#18&#34;&gt;18&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;19&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#19&#34;&gt;19&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;20&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#20&#34;&gt;20&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;21&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#21&#34;&gt;21&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;22&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#22&#34;&gt;22&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;23&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#23&#34;&gt;23&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;24&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#24&#34;&gt;24&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;25&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#25&#34;&gt;25&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;26&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#26&#34;&gt;26&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;27&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#27&#34;&gt;27&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;28&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#28&#34;&gt;28&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;29&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#29&#34;&gt;29&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;30&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#30&#34;&gt;30&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;31&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#31&#34;&gt;31&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;32&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#32&#34;&gt;32&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;33&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#33&#34;&gt;33&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;34&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#34&#34;&gt;34&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;35&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#35&#34;&gt;35&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;36&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#36&#34;&gt;36&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;37&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#37&#34;&gt;37&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;38&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#38&#34;&gt;38&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;39&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#39&#34;&gt;39&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;40&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#40&#34;&gt;40&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;41&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#41&#34;&gt;41&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;42&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#42&#34;&gt;42&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;43&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#43&#34;&gt;43&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;44&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#44&#34;&gt;44&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;45&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#45&#34;&gt;45&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;46&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#46&#34;&gt;46&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;47&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#47&#34;&gt;47&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;48&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#48&#34;&gt;48&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;49&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#49&#34;&gt;49&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;50&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#50&#34;&gt;50&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;51&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#51&#34;&gt;51&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;52&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#52&#34;&gt;52&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;53&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#53&#34;&gt;53&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;54&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#54&#34;&gt;54&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;55&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#55&#34;&gt;55&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;56&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#56&#34;&gt;56&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;57&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#57&#34;&gt;57&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;58&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#58&#34;&gt;58&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;59&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#59&#34;&gt;59&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;60&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#60&#34;&gt;60&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;61&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#61&#34;&gt;61&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;62&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#62&#34;&gt;62&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;63&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#63&#34;&gt;63&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;64&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#64&#34;&gt;64&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;65&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#65&#34;&gt;65&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;66&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#66&#34;&gt;66&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;67&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#67&#34;&gt;67&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;68&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#68&#34;&gt;68&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;69&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#69&#34;&gt;69&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;70&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#70&#34;&gt;70&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;71&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#71&#34;&gt;71&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;72&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#72&#34;&gt;72&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;73&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#73&#34;&gt;73&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Carp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;IPC::Open2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;escape_html&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;sr&#34;&gt;s/&amp;amp;/&amp;amp;amp;/g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;sr&#34;&gt;s/&amp;lt;/&amp;amp;lt;/g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;sr&#34;&gt;s/&amp;gt;/&amp;amp;gt;/g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;sr&#34;&gt;s/&amp;#39;&amp;#34;&amp;#39;/&amp;amp;quot;/g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;@bindsyms&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;grep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/^bindsym/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# only `bindsym`-s.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nb&#34;&gt;grep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/(^#)|(^\s*$)/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# omit comment or empty lines.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;sx&#34;&gt;qx&amp;lt;i3-msg -t get_config&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;chomp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;@bindsyms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;s/^bindsym //g&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;@bindsyms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;@key_to_cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;@m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=~&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt; /^(?&amp;lt;key&amp;gt;\S+)\s+(?&amp;lt;cmd&amp;gt;.+)$/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;@bindsyms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;@dmenu_items&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;escape_html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;span size=&amp;#39;large&amp;#39; weight=&amp;#39;heavy&amp;#39;&amp;gt;$key&amp;lt;/span&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;escape_html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\t\t$cmd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;join&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;@key_to_cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# p @dmenu_items;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;open2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;rofi -dmenu -p &amp;#39;i3 keybindings&amp;#39; -sep &amp;#39;\\0&amp;#39; -eh 2 -markup-rows -format i&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;confess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@dmenu_items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$stdin&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# print $_;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$stdout_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;$/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;&amp;lt;$stdout&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;waitpid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$exit_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# print STDERR &amp;#34;exit_code: $exit_code\n&amp;#34;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$exit_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;chomp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$stdout_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key_to_cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$stdout_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;STDERR&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;STDOUT: [$stdout_] =&amp;gt; [$cmd]\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;sb&#34;&gt;`i3-msg &amp;#39;$cmd&amp;#39;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;STDERR&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;EXIT: $exit_code\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;요걸 저장하고, &lt;code&gt;$HOME/.config/i3/config&lt;/code&gt; 에 다음을 추가하여 ⌨️ &lt;code class=&#34;verbatim&#34;&gt;Super+F1&lt;/code&gt; 으로 등록:&lt;/p&gt;</description>
    </item>
    <item>
      <title>가볍고 빠른 antiX Linux &#43; runit, koreader 그리고 bloatware</title>
      <link>https://ageldama.github.io/posts/2025-04apr/2025-04apr02--01-antix-linux/</link>
      <pubDate>Wed, 02 Apr 2025 05:51:49 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-04apr/2025-04apr02--01-antix-linux/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;antiX linux&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;오래된 랩탑으로 fedora 그냥 아무 생각없이 대충 쓰는데 좀 버벅. 어차피&#xA;메인드라이버도 아니고 그냥 그러려니 하고 살다가, 좀 답답해서&#xA;lightweight linux distro을 골라봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://antixlinux.com/&#34;&gt;https://antixlinux.com/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;거기에 이전에 시도했던 void linux에서 마음에 들었었던 runit을 init으로&#xA;쓰는 spin으로 선택해서 설치했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;결과는… 놀라울 정도로 가벼웠다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;luks disk encryption + btrfs을 기존에는 적용했다가(btrfs이&#xA;기본옵션이어서 귀찮아서), 이번에는 그냥 ext4만으로 설치해서 더&#xA;가벼운걸까 싶기도 하고.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;systemd은 익숙해질수로 편안해지기는 했었는데, 그럼에도 확실히 전통적인&#xA;linux/unix의 그것과는 조금 달라서 처음에 당혹스럽긴 했었었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>darkmode.js으로 변경</title>
      <link>https://ageldama.github.io/posts/2025-03mar/2025-03mar20--01--darkmode-js/</link>
      <pubDate>Thu, 20 Mar 2025 11:51:36 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-03mar/2025-03mar20--01--darkmode-js/</guid>
      <description>&lt;p&gt;&#xA;직접 짠 css/js에서 &lt;a href=&#34;https://darkmodejs.learn.uno/&#34;&gt;darkmode.js&lt;/a&gt;으로 변경했다.&#xA;css에서 보색관계를 고려하는 것도 좀 귀찮고 해서.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;변경도 예쁘게 애니메이션 나오고, system preference 지정도 자동으로 되고.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;(미래의 나를 위해) css/html에서 class&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;div class=&#34;src src-css&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt;2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt;3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;darkmode--activated&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;logo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;mix-blend-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;src src-html&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;darkmode-ignore&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;😬&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>xrandr 🖥️모니터 연결 자동전환 스크립트🐫</title>
      <link>https://ageldama.github.io/posts/2025-03mar/2025-03mar18--01-xrandr/</link>
      <pubDate>Tue, 18 Mar 2025 13:30:16 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-03mar/2025-03mar18--01-xrandr/</guid>
      <description>&lt;p&gt;&#xA;요즘 메인으로 사용하는 💻랩탑을 i3wm으로 세팅해서 쓰고 있다.&#xA;다 편한데, 🪟윈도나 icewm처럼 &lt;code&gt;Windows+P&lt;/code&gt; 누르면, 다음 모니터연결&#xA;조합으로 전환되는게 부러웠다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;매번 터미널 열고 &lt;code&gt;xrandr&lt;/code&gt; 치거나, &lt;a href=&#34;https://christian.amsuess.com/tools/arandr/&#34;&gt;arandr&lt;/a&gt; 열어서 세팅하기 귀찮으니까.&#xA;(물론 시스템 시작하면, 내가 좋아하는 설정이 적용되도록 해놓았지만)&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 그냥 윈도의 &lt;code&gt;Win+P&lt;/code&gt; 키처럼 동작하도록 스크립트를 짜봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;🐫 &lt;a href=&#34;https://github.com/ageldama/configs/blob/master/dotfiles/local_scripts/xrandr/combs.pl&#34;&gt;https://github.com/ageldama/configs/blob/master/dotfiles/local_scripts/xrandr/combs.pl&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Perl으로 왠만하면 외부라이브러리 의존 않고 짜려고 노력.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그리고 예전이랑 코딩스타일이 점점 변해가고 있다고 생각이 들었는데,&#xA;예전에는 기계공감에 더 비중을 뒀었다면, 이제는 내가 쓸때 더 편하고 별&#xA;생각없이 되는쪽에 더 비중을 두게 되는거 같다. 좋게 말하자면… 🤤&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo &#43; pagefind 붙여서 검색기능 추가했다</title>
      <link>https://ageldama.github.io/posts/2025-03mar/2025-03mar16--01-pagefind&#43;hugo/</link>
      <pubDate>Sun, 16 Mar 2025 06:25:48 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-03mar/2025-03mar16--01-pagefind&#43;hugo/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://pagefind.app/&#34;&gt;https://pagefind.app/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;페이지 생성시에 인덱싱하고 그걸로 웹브라우저내에서 js으로 검색하는&#xA;pagefind을 붙여봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;처음엔 좀 어색했는데, 커스터마이징을 별로 제공하지 않기는 했지만,&#xA;그래도 이것저것 뜯어서 CSS도 마음에 들게 좀 수정하고, JS/DOM 이벤트도&#xA;적당히 잡아서 마음에 들게 동작하게 고쳤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;별로라고 생각하던 부분들도 다 뜯어 고치고 하면서 더 블로그가 마음에&#xA;들어진다. 🤠&lt;/p&gt;</description>
    </item>
    <item>
      <title>css, design 새단장 &#43; dark-mode</title>
      <link>https://ageldama.github.io/posts/2025-03mar/2025-03mar15--01-new-css/</link>
      <pubDate>Sat, 15 Mar 2025 12:25:01 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-03mar/2025-03mar15--01-new-css/</guid>
      <description>&lt;p&gt;&#xA;css 더 단순하게 만들고, 디자인들도 그냥 내 마음에 들게 뜯어 고침.&#xA;다크모드도 작업해서 만들어 넣고.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;css 애니메이션도 작업해 넣었다가, gpu 너무 쓰는거 같아서 그냥 끄고&#xA;정적효과로만 냅둠.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;hugo 같은 static site generator이 좋은 점, 그리고 그냥 단순한 css와&#xA;오래된 jquery으로 그냥 뚝딱거려서 작업.&lt;/p&gt;</description>
    </item>
    <item>
      <title>data-driven programming &amp; data-driven design &amp; data-oriented programming ???</title>
      <link>https://ageldama.github.io/posts/2025-03mar/2025-03mar12--01-data-prog/</link>
      <pubDate>Wed, 12 Mar 2025 10:40:27 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-03mar/2025-03mar12--01-data-prog/</guid>
      <description>&lt;p&gt;&#xA;비슷한 용어들. 내가 이해한 정리들은 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;data-driven programming&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;데이터처리를 중심으로 하는 프로그래밍언어나 도구, 스타일.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  예를 들어, awk, perl은 입력의 패턴에 따라 코드를 나누고 출력을&#xA;  만들기 수월한 방식을 제공.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data-driven_programming&#34;&gt;https://en.wikipedia.org/wiki/Data-driven_programming&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Perl/perl5/commit/8d063cd8450e59ea1c611a2f4f5a21059a2804f1&#34;&gt;a &amp;#34;replacement&amp;#34; for awk and sed&lt;/a&gt; (by Larry Wall)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;data-oriented design&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;현대 cpu의 아키텍처에 적절하도록, cpu cache, simd등을 잘 적용될 수&#xA;  있도록 애플리케이션 데이터구조를 설계하는 방식.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-2&#34; href=&#34;#footnote-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그리고 단순히 게임개발에서 ecs만이 아니라 lmax disruptor등도 포함될&#xA;  것 같다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data-oriented_design&#34;&gt;https://en.wikipedia.org/wiki/Data-oriented_design&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;dod의 예시: &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity_component_system&#34;&gt;Entity component system&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/articles/lmax.html&#34;&gt;lmax disruptor&lt;/a&gt; (by Martin Fowler)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-3&#34;&gt;&#xA;data-oriented programming&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;그리고 또 갑자기 위 2개의 정의처럼 완전 갑자기, dop은 다음과 같은&#xA;  원칙들을 이용한 애플리케이션 개발방식:&lt;/p&gt;</description>
    </item>
    <item>
      <title>xmake, compile_commands.json, flycheck</title>
      <link>https://ageldama.github.io/posts/2024-05may/2024-05may06--xmake-compile_commands_json-flycheck/</link>
      <pubDate>Mon, 06 May 2024 07:51:13 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2024-05may/2024-05may06--xmake-compile_commands_json-flycheck/</guid>
      <description>&lt;p&gt;&#xA;cmake/warp등을 써보면서 c/c++ 개발할 때에 빌드도구 갖고 놀다가,&#xA;이번에 마음을 열고 xmake을 익혀봄.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;마음에 든다. 가볍고 빠르고 좋다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;ccache등도 바로 지원하고, lua으로 스크립팅도 그럭저럭 할만해 보이고,&#xA;[build.zig](&lt;a href=&#34;https://ziglang.org/learn/build-system/)&#34;&gt;https://ziglang.org/learn/build-system/)&lt;/a&gt;스러워서&#xA;당연하게도 좋은거 같아.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;계속 쓸거 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;emacs / flycheck + c/c++ 개발할 때에 단점이, 자동적으로 외부 3rd-party&#xA;라이브러리의 include-path을 설정해주지 않아서,&#xA;[dirs-local](&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html)&#34;&gt;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html)&lt;/a&gt;&#xA;같은걸 세팅해주길 기대한다는 점.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 그냥 &lt;code&gt;xmake project -vD -k compile_commands -m debug&lt;/code&gt; 같이&#xA;&lt;code&gt;compile_commands.json&lt;/code&gt; 생성하고,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;이걸 파싱해서 표준출력으로 include-paths&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/compile_commands_json_incdirs.py&#34;&gt;https://github.com/ageldama/configs/blob/master/compile_commands_json_incdirs.py&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;현재 소스코드 버퍼 기준으로 가장 가까운 compile_commands.json 파일&#xA;위치 찾는 elisp 함수&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/elisp/compcmdsjson-tiny.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/elisp/compcmdsjson-tiny.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;위 (1)+(2)을 조합해서 flycheck을 위한 변수 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 들을 설정하는 elisp 함수&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/elisp/flycheck-compcmdsjson.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/elisp/flycheck-compcmdsjson.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;그리고 위 (3)을 c/c++-mode에 자동적으로 적용하고, 또 단축키도&#xA;만드는 elisp 코드&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/feat/flycheck-compcmdsjson.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/feat/flycheck-compcmdsjson.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;…요렇게 만들어서 세팅해서 쓰니 편안.&lt;/p&gt;</description>
    </item>
    <item>
      <title>공각기동대, 1995</title>
      <link>https://ageldama.github.io/posts/2024-03mar/2024-03mar23--01-ping/</link>
      <pubDate>Sat, 23 Mar 2024 15:46:14 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2024-03mar/2024-03mar23--01-ping/</guid>
      <description>&lt;p&gt;&#xA;가끔 다시 본다. 그리고 마지막 장면을 보면서 덕력이 폭발하면서 종종 그런 생각에 빠짐.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;저런 시나리오를 쓴 사람은 어떤 기분이었을까 완전 쩐다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>FreeBSD &#43; Samba 4.16 &#43; Symbolic Links 설정</title>
      <link>https://ageldama.github.io/posts/2023-11nov/2023-11nov05--freebsd-samba4-symlink/</link>
      <pubDate>Sun, 05 Nov 2023 05:40:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-11nov/2023-11nov05--freebsd-samba4-symlink/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;freebsd에서 samba 파일서버 세팅은 프비핸드북 참고&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.freebsd.org/en/books/handbook/network-servers/#network-samba&#34;&gt;https://docs.freebsd.org/en/books/handbook/network-servers/#network-samba&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;symlink을 samba에 노출하기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&#xA;&lt;code&gt;/usr/local/etc/smb4.conf&lt;/code&gt; 파일에 다음을 추가:&lt;/p&gt;&#xA;&lt;div class=&#34;src src-conf&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;[global]&#xA;...&#xA;allow insecure wide links =&#x9;yes&#xA;&#xA;&#xA;[share]&#xA;...&#xA;follow symlinks = yes&#xA;wide links = yes&#xA;unix extensions = no&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-3&#34;&gt;&#xA;mdns으로 samba 파일서버를 네트웍에 광고하기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&#xA;  보통은 avahi을 써왔는데, mdnsresponder이 더 가볍다고 해서 이렇게 세팅해봄.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;pkg install mDNSResponder&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;/etc/rc.conf&lt;/code&gt; 에 추가:&lt;/p&gt;&#xA;&lt;div class=&#34;src src-conf&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;mdnsresponderposix_enable=&amp;#34;YES&amp;#34;&#xA;mdnsresponderposix_flags=&amp;#34;-f /usr/local/etc/mdnsresponderposix.conf&amp;#34;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;호스트이름은 &lt;code&gt;freebsd-samsung&lt;/code&gt; 으로 smb서비스를 노출.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debian Bookworm(12.2), Chromium &#43; Wayland에서 ibus 한글 입력 고치기</title>
      <link>https://ageldama.github.io/posts/2023-11nov/2023-11nov05--chromium-gtk4-wayland-ibus/</link>
      <pubDate>Sun, 05 Nov 2023 05:28:12 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-11nov/2023-11nov05--chromium-gtk4-wayland-ibus/</guid>
      <description>&lt;p&gt;&#xA;나도 x11에서 wayland 기반으로 옮겨가고 있는데, 다른 것들은 대부분&#xA;괜찮거나 포기.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;가볍고 좋은데, debian chromium에서 ibus으로 한글 입력이 안되어서&#xA;알아봤다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;1) 문제 원인 :: gtk3 backend으로 chromium이 동작해서, ibus연동이 안됨.&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;힌트 얻음: &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=2058976&#34;&gt;https://bugzilla.redhat.com/show_bug.cgi?id=2058976&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;2) 확인 :: 실행중인 chromium이 어떤 버젼의 gtk3/4와 연결되었는지?&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;div class=&#34;src src-shell&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt;2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt;3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt;4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; pid in  &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;pgrep chromium&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;#echo $pid&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      grep -i gtk /proc/&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$pid&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;/maps&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;==&amp;gt; 기본 bookworm/chromium 상태에서는 gtk3임을 확인. ~~&amp;gt; ibus&#xA;연동안됨.&lt;/p&gt;</description>
    </item>
    <item>
      <title>내 책상에서 유선랜 환경</title>
      <link>https://ageldama.github.io/posts/2023-03mar/2023-03mar15--wired-desktop/</link>
      <pubDate>Wed, 15 Mar 2023 15:37:14 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-03mar/2023-03mar15--wired-desktop/</guid>
      <description>&lt;p&gt;&#xA;개인환경을 조금 특이하게 사용하는데, 그 이유와 방식.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;why: 유선랜? (무선랜 대신)&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;키보드/마우스 입력이 가장 부드럽게 전달되어서 유선으로 연결해서&#xA;  사용한다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  x2x으로 연결하거나, ssh-x11-forwarding으로 다른 컴퓨터에서 실행하는&#xA;  프로그램을 디스플레이와 입력장치만 현재 자리에서 그대로 사용할 때에&#xA;  네트웍 연결속도가 딜레이가 적어야 쾌적해서. &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;why: x11? (wayland 대신)&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;요즘 리눅스/bsd 데스크탑 기본설치하면 wayland으로 세팅하는 경우도&#xA;  많은데, 네트웍을 통해서 ssh-x11-forwarding &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&#xA;  사용하거나 x2x 사용하기는 아직 부족한거 같아서, 나는 그냥 x11&#xA;  사용함.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  거기에 &lt;a href=&#34;https://github.com/jordansissel/xdotool&#34;&gt;xdotool&lt;/a&gt; 같은 gui-automation/scripting이나 &lt;a href=&#34;https://github.com/rvaiya/warpd&#34;&gt;warpd&lt;/a&gt; 같은 키보드를&#xA;  마우스으로 편안하게 쓰도록 해주는 xtest이나, &lt;a href=&#34;https://qjoypad.sourceforge.net/&#34;&gt;qjoypad&lt;/a&gt; 처럼 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-2&#34; href=&#34;#footnote-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&#xA;  게임패드/조이스틱을 편안하게 마우스/키보드으로 매핑해서 쓰는게 나는&#xA;  많은데 모두 x11만 지원하거나, 아직은 x11에서만 쓸만한 수준으로&#xA;  동작해서.&lt;/p&gt;</description>
    </item>
    <item>
      <title>News 08/03/2023 .02 : reactjs, rust, zig, hiring, nes</title>
      <link>https://ageldama.github.io/posts/2023-03mar/2023-03mar08--02-ping--news/</link>
      <pubDate>Wed, 08 Mar 2023 06:32:05 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-03mar/2023-03mar08--02-ping--news/</guid>
      <description>&lt;p&gt;&#xA;&lt;div&gt;&#xA;  &lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-1&#34;&gt;&amp;#34;리액트가 날 인질으로 잡고 있어요&amp;#34;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-2&#34;&gt;&amp;#34;헛소리/bullshit 없이 엔지니어링 재능이 있는 사람을 고용하기&amp;#34;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-3&#34;&gt;&amp;#34;NESFab is a new programming language for creating NES games&amp;#34;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-4&#34;&gt;&amp;#34;zig이 rust보다 빠르고 안전할 수 있는 경우&amp;#34;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;&amp;#34;리액트가 날 인질으로 잡고 있어요&amp;#34;&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://emnudge.dev/blog/react-hostage&#34;&gt;https://emnudge.dev/blog/react-hostage&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  …말해 뭘할까 싶은데. :see_no_evil:&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  포스팅 자체는 react, hooks 같은 것들의 complexity에 대한&#xA;  이야기이지만.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  오히려 흥미롭게 생각하는 것은, 과거 한국에서 &amp;#39;퍼블리셔&amp;#39;라고 하던&#xA;  사람들이 어떻게 되었는가 생각해보며, 함께 지금의 &amp;#39;프론트엔드&#xA;  개발자&amp;#39;, 혹은 &amp;#39;앱 개발자&amp;#39;, &amp;#39;리액트 개발자&amp;#39;, &amp;#39;자바스크립트&#xA;  개발자&amp;#39;들이 앞으로 어떻게 될지 상상해본다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 08/03/2023 .01 : 전자책읽기</title>
      <link>https://ageldama.github.io/posts/2023-03mar/2023-03mar08--01-ping/</link>
      <pubDate>Wed, 08 Mar 2023 06:15:08 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-03mar/2023-03mar08--01-ping/</guid>
      <description>&lt;p&gt;&#xA;linux에서 전자책 편안하게 읽는 방법들 간단하게 몇가지 팁들만 나열,&#xA;별로 내용은 길게 늘여 쓰지 않으려고:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;linux, 그중에서도 가벼운 하드웨어와 단순하게 잘 동작하는 배포판.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;여러가지 불필요한 군더더기 없고, 패키지들이 조금 오래된&#xA;버젼이어도, 안정적으로만 동작하면 상관 없음.&lt;/li&gt;&#xA;&lt;li&gt;그래서, debian stable -or- testing 쓰면 속이 편함.&lt;/li&gt;&#xA;&lt;li&gt;하드웨어는 raspberry pi 3/4 둘 다 좋았다. &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&#xA;…특히 전력소모도 거의 없고, 딱 모니터 연결해 놓고 팬소음 거의&#xA;없이 쾌적하게 책을 읽기 좋다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;calibre 책파일 관리, 읽기 모두 만족스러움&lt;/p&gt;</description>
    </item>
    <item>
      <title>`ncal -3` 직접 Perl으로 짜봤다</title>
      <link>https://ageldama.github.io/posts/2023-03mar/perl-cal3/</link>
      <pubDate>Thu, 02 Mar 2023 17:50:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-03mar/perl-cal3/</guid>
      <description>&lt;p&gt;&#xA;&lt;code class=&#34;verbatim&#34;&gt;ncal -3&lt;/code&gt; 이 뭐냐하면:&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://man7.org/linux/man-pages/man1/cal.1.html&#34;&gt;https://man7.org/linux/man-pages/man1/cal.1.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;…뭐 이런건데, 개인적으로 저전력 글쓰기 전용머신에서 사용하는&#xA;스크립트에서 배포판이 달라서 패키지를 못찾겠어서 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, …그냥 직접&#xA;짜서 대체했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/commit/66bd92b42ba5a5ee03b9336370c3a8f84293e488&#34;&gt;https://github.com/ageldama/configs/commit/66bd92b42ba5a5ee03b9336370c3a8f84293e488&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 스크린샷은:&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;img src=&#34;https://ageldama.github.io/2023-03mar/journal-edit-cal3.png&#34; alt=&#34;/2023-03mar/journal-edit-cal3.png&#34; title=&#34;/2023-03mar/journal-edit-cal3.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;재밌었던 부분은:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;어차피 Perl으로 전부 짜서 쓰는 스크립트였는데,&#xA;아예 외부 커맨드라인 도구 의존성을 더 없애서 뿌듯하다.&lt;/li&gt;&#xA;&lt;li&gt;매달 달력을 문자열으로 뽑았는데, 3달치를 뽑아서, 이걸 한 row에&#xA;표시하고 싶었는데, &lt;a href=&#34;https://metacpan.org/pod/Text::Table&#34;&gt;Text::Table&lt;/a&gt;으로 적절히 간단히 완료.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Term::ANSIColor&#34;&gt;Term::ANSIColor&lt;/a&gt;와 &lt;a href=&#34;https://perldoc.perl.org/perlre&#34;&gt;perlre&lt;/a&gt;을 써서 깔끔하게 원하는 일자에 highlighting&#xA;해서 편안했다.&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;…더 해킹을 해서, &lt;code class=&#34;verbatim&#34;&gt;calendar(..)&lt;/code&gt; 결과문자열을 적당히 파싱해서,&#xA;작은 Text::Table으로 만들어서, 그것들으로 조합하고 했었어도 될거&#xA;같아.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;: Golang-ish `defer`-macro</title>
      <link>https://ageldama.github.io/posts/2023-03mar/cxx-defer/</link>
      <pubDate>Thu, 02 Mar 2023 16:00:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-03mar/cxx-defer/</guid>
      <description>&lt;p&gt;&#xA;별거 없는데, 문득 심심해서 툭닥거려봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;div&gt;&#xA;  &lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-1&#34;&gt;원하는 것과 접근법&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-2&#34;&gt;&lt;code class=&#34;verbatim&#34;&gt;defer.inl&lt;/code&gt; :&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-3&#34;&gt;사용예&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-4&#34;&gt;제약사항과 생각해볼꺼리&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-5&#34;&gt;Footnotes&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;원하는 것과 접근법&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://go.dev/blog/defer-panic-and-recover&#34;&gt;https://go.dev/blog/defer-panic-and-recover&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.rs/defer/latest/defer/fn.defer.html&#34;&gt;https://docs.rs/defer/latest/defer/fn.defer.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ziglang.org/documentation/master/#defer&#34;&gt;https://ziglang.org/documentation/master/#defer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;  golang/zig에서처럼 &lt;code class=&#34;verbatim&#34;&gt;defer&lt;/code&gt; 등록한 LIFO순서대로 호출되도록.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  검색해보면, 대부분 RAII을 사용하거나 하는 것들이 보인다:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://duckduckgo.com/?q=c%2B%2B+golang+defer&#34;&gt;DDG: c++ golang defer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/33050620/golang-style-defer-in-c&#34;&gt;https://stackoverflow.com/questions/33050620/golang-style-defer-in-c&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/45617758/proper-way-to-release-resources-with-defer-in-a-loop&#34;&gt;https://stackoverflow.com/questions/45617758/proper-way-to-release-resources-with-defer-in-a-loop&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://codesire-deng.github.io/2022/02/06/One-Minute-to-C-defer/&#34;&gt;https://codesire-deng.github.io/2022/02/06/One-Minute-to-C-defer/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;  …그냥 &lt;code class=&#34;verbatim&#34;&gt;std::shared_ptr&amp;lt;void&amp;gt;&lt;/code&gt; 을 이용하는 방식이 마음에&#xA;  들었다. 그리고 조금 더 간단하게 사용하려고 매크로로 만들어 봤다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;&lt;code class=&#34;verbatim&#34;&gt;defer.inl&lt;/code&gt; :&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div class=&#34;src src-c++&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;13&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#13&#34;&gt;13&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cm&#34;&gt;/* -*- mode: c++; -*- */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cp&#34;&gt;#ifndef defer_INL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;cp&#34;&gt;#define defer_INL 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cp&#34;&gt;#define _Defer_CONCAT_IMPL( x, y ) x##y&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;cp&#34;&gt;#define _Defer_CONCAT( x, y ) _Defer_CONCAT_IMPL( x, y )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cp&#34;&gt;#define Defer(blk) std::shared_ptr&amp;lt;void&amp;gt; _Defer_CONCAT(Defer_, __COUNTER__ )(nullptr, blk)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cp&#34;&gt;#endif &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*defer_INL*/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html&#34;&gt;&lt;code class=&#34;verbatim&#34;&gt;__COUNTER__&lt;/code&gt;&lt;/a&gt; 이용해서 매크로가 생성한 &lt;code class=&#34;verbatim&#34;&gt;std::shared_ptr&amp;lt;..&amp;gt;&lt;/code&gt; 변수의&#xA;  이름이 겹치지 않도록 해봤다. (…위에 검색한 링크들에도 사용하듯이)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 26/02/2023 .01 : 디자인 css 가볍게 수정</title>
      <link>https://ageldama.github.io/posts/2023-02feb/2023-02feb26--01-css/</link>
      <pubDate>Sun, 26 Feb 2023 08:19:57 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-02feb/2023-02feb26--01-css/</guid>
      <description>&lt;p&gt;&#xA;아예 아무런 스타일도 주지 않고, 그냥 알아서 html/css만으로 잘 보이도록&#xA;고쳤다. 웹폰트니 그런것도 그냥 껐고.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;불필요한 스타일이나 폰트로딩을 줄여서 가볍고, 어차피 웹브라우져의&#xA;&amp;#39;reader mode&amp;#39; 지원 같은걸로 내가 스타일 주는 것보다 훨씬 읽기 편안하게&#xA;볼 수 있을테니까.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;lynx, w3m 같은 &lt;a href=&#34;https://en.wikipedia.org/wiki/Text-based_web_browser&#34;&gt;텍스트 웹브라우져&lt;/a&gt;에서 읽으나 그냥 무거운 웹브라우져으로&#xA;읽으나 사람마다 알아서 잘 읽히도록 하는데에만 집중해봤다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 19/02/2023 .02 : 이름에 대한 추측 (2) HAL, IBM, JCL</title>
      <link>https://ageldama.github.io/posts/2023-02feb/2023-02feb19--02-ping/</link>
      <pubDate>Sun, 19 Feb 2023 17:05:36 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-02feb/2023-02feb19--02-ping/</guid>
      <description>&lt;p&gt;&#xA;(…지난번 &lt;a href=&#34;../2023-02feb07--01-ping/&#34;&gt;C/C++/D/Zig 이름에 대한 추측&lt;/a&gt;&#xA;에 이어서, 그냥 떠올라서)&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HAL_9000&#34;&gt;HAL 9000&lt;/a&gt; –&amp;gt; IBM&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ASCII방식, 혹은 그냥 알파벳에서 한글자씩 앞으로 땡기면, &amp;#34;IBM&amp;#34;이 된다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Job_Control_Language&#34;&gt;JCL&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;IBM의 &amp;#34;Job Control Language&amp;#34;, 메인프레임 등에서 스크립팅을 위해&#xA;쓴다고 한다.&lt;/li&gt;&#xA;&lt;li&gt;&amp;#34;IBM&amp;#34;에서 다시 또 한글자씩 앞으로 땡기면, &amp;#34;JCL&amp;#34;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;ㅎㅎ뭐 그냥 그렇다고.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 19/02/2023 .01 : 어른이 되기</title>
      <link>https://ageldama.github.io/posts/2023-02feb/2023-02feb19--01-ping/</link>
      <pubDate>Sun, 19 Feb 2023 06:55:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-02feb/2023-02feb19--01-ping/</guid>
      <description>&lt;p&gt;&#xA;(최근 며칠 우울하고 내가 어른이기는 한가 싶은 자괴감에&#xA;빠졌었다. 그래서인지 자기합리화를 위해 이런 글을 쓰고 있는거 같기도&#xA;하다.)&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;div&gt;&#xA;  &lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-1&#34;&gt;나의 옛날 이야기&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-2&#34;&gt;어른의 사정&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-3&#34;&gt;그런데 어떤 어린이는 어른을 이해한다. 때로는&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-4&#34;&gt;The Overfitting&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-5&#34;&gt;아직은 어린 마음인, 그래야만 한다는 강박&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-6&#34;&gt;짝사랑, 혹은 도착증과 그 반대로써인 쩌리의 자존심&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-7&#34;&gt;신화적인 닌텐도와 그 빠&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-8&#34;&gt;&amp;#34;괜찮아&amp;#34;&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-9&#34;&gt;Footnotes&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;나의 옛날 이야기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;80년대의 기억에는, 참 자주도 불량식품 단속에 대한 이야기가 나오던 것&#xA;  같아. 그리고 실제로도 만화, 애니메이션, 게임, 장난감 등등의 라이센스나&#xA;  품질관리에 대한 관념이 희박했던거 같아.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 07/02/2023 .01 : C&#43;&#43;, D, Zig의 이름에 대한 추측</title>
      <link>https://ageldama.github.io/posts/2023-02feb/2023-02feb07--01-ping/</link>
      <pubDate>Tue, 07 Feb 2023 07:48:17 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-02feb/2023-02feb07--01-ping/</guid>
      <description>&lt;p&gt;&#xA;문득 떠오른 생각이라서, 그냥 추측.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/strong&gt; : &lt;em&gt;로마숫자(roman numeral)&lt;/em&gt; 으로 100.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;처음부터 의도한 숫자가 100이 아니었을거란건 나도 알거 같아.&#xA;BCPL이나 그런 역사에 대해 나도 조금은 아니까.&lt;/li&gt;&#xA;&lt;li&gt;그런데 그 이후에 따르는 언어들이 그런 패턴을 만든거 같아서 재미로&#xA;쓰는 글.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/strong&gt; : 위의 로마숫자이란 생각과 &lt;em&gt;C언어의 &lt;code&gt;x++&lt;/code&gt; 연산&lt;/em&gt; 으로 생각해보면,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;즉시 평가할 때에는 C == 100, 그냥 C와 같아 보임.&lt;/li&gt;&#xA;&lt;li&gt;그런데 저장된 값은 +1, == 101.&lt;/li&gt;&#xA;&lt;li&gt;…어쨌든 그냥 볼 때엔, 씨언어와 거의 같아 보이지만, 그래도 좀&#xA;더 성장했다고. 그리고 겸손하게 오직 +1.&lt;/li&gt;&#xA;&lt;li&gt;(그냥 겸손하다고 될 문제인가 싶다… C++ 좋아하지만 ㅎㅎ)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/strong&gt; : C에서 다음 단계으로 발전했으니, 이번엔 다섯배, 역시 로마숫자, 500.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 04/02/2023 .01: 씨언어의 장자 zig, rust, golang, c&#43;&#43; ???</title>
      <link>https://ageldama.github.io/posts/2023-02feb/2023-02feb04--01-ping/</link>
      <pubDate>Sat, 04 Feb 2023 16:46:54 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-02feb/2023-02feb04--01-ping/</guid>
      <description>&lt;p&gt;&#xA;최근에 재미로 &lt;a href=&#34;https://ziglang.org/&#34;&gt;zig&lt;/a&gt; 을 정말 재밌게 &amp;#39;읽었다&amp;#39;. 공부해보고 실제로 뭔가&#xA;코딩을 많이 해보거나 한 것은 아니고, 대체 어떻게 동작하는 프로그램을&#xA;이걸로 만들라고 하는건지 이해하고 싶었기 때문에 해봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;zig으로 프로그램을 짜는게 궁금하던 부분은 haskell의 monad을 이용한&#xA;방식, 혹은 apl이나 prolog으로 실제프로그램을 어떻게 만들 수 있을지&#xA;패러다임부터 다른 언어를 공부하고 생각해보는 것과는 조금 다를수도&#xA;있겠다. 어쨌든 그냥 imperative언어이니까.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;오히려, zig을 어떻게 써먹어야 할지 궁금하던 지점은, c++의&#xA;스마트포인터와 move semantics등을 이해하는 것이나, rust의 borrowing&#xA;checker, rc/arc등을 이해하는 것과 마찬가지인 것 같다.&#xA;둘 다 이해하고 익숙해지면 그렇게 부담스럽지 않을거 같긴 하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>나이브스아웃 1, 2편, 그리고 K드라마, K영화</title>
      <link>https://ageldama.github.io/posts/2023-02feb/film-knivesout&#43;ksoapoperas/</link>
      <pubDate>Fri, 03 Feb 2023 19:00:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-02feb/film-knivesout&#43;ksoapoperas/</guid>
      <description>&lt;p&gt;&amp;ldquo;나이브스 아웃&amp;rdquo; 1편을 몇 년 묵혀 놓고 시청하지 않았었다.&lt;/p&gt;&#xA;&lt;p&gt;최근에 넷플릭스에 2편인 &amp;ldquo;글래스 어니언&amp;quot;도 공개되어 연달아서 이틀 동안&#xA;시청, 정말 즐겁고 감동적이었다.&lt;/p&gt;&#xA;&lt;p&gt;1, 2편 모두 출연배우들도 어이가 없게 화려한 영화이고, 그 배우의 그간의&#xA;쌓아놓은 내가 인식하는 통상적인 캐릭터를 잘 비트는 배역도 마음에&#xA;들었다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;언제부터인가 아가사 크리스티 원작이거나 한 정통추리극이 많이&#xA;개봉하던거 같다. 최근에 다시 만드는 그런 영화들을 많이 시청하지는&#xA;못했다.&lt;/p&gt;&#xA;&lt;p&gt;나는 추리극을 많이 본적이 없는거 같다. 아니면 내가 감상하는 방식이&#xA;추리물을 추리물으로 본 것이 아니라, 미스테리이거나 아니면 그냥 또다른&#xA;방식의 서사물이거나 블랙코미디처럼 봐왔기 때문인거 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 03/02/2023 .01: 블로그 디자인 수정</title>
      <link>https://ageldama.github.io/posts/2023-02feb/2023-02feb03--01-ping/</link>
      <pubDate>Fri, 03 Feb 2023 18:00:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-02feb/2023-02feb03--01-ping/</guid>
      <description>&lt;p&gt;블로그를 내려놓았다가, 다시 글을 쓰고 생각들을 어느 정도는 공개를 하고&#xA;지내고 싶어져서 다시 열었다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/athul/archie&#34;&gt;사용하던 테마&lt;/a&gt;를 수정해서 쓰기로&#xA;하고, CSS을 여기저기서 복붙해서 적용해보고, &lt;a href=&#34;https://galmuri.quiple.dev/&#34;&gt;갈무리&#xA;웹폰트&lt;/a&gt;도 적용해서, 오히려 원본 테마보다&#xA;더 가볍게 적당히 만들어봤다.&lt;/p&gt;&#xA;&lt;p&gt;색상도, 외양과 기능 디자인 모두 어느 정도 내 취향에 맞게 꾸며 봤다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 02/02/2023 .01: xemacs, gemini, gemtext</title>
      <link>https://ageldama.github.io/posts/2023-02feb/2023-02feb02--01-ping/</link>
      <pubDate>Thu, 02 Feb 2023 15:00:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-02feb/2023-02feb02--01-ping/</guid>
      <description>&lt;div&gt;&#xA;  &lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#1-제미니-계획&#34;&gt;1. &amp;ldquo;제미니 계획&amp;rdquo;&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#2-just-like-the-good-ol-days&#34;&gt;2. just like the good ol&amp;rsquo; days&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#차라리-돈을-내고-글을-읽겠다만&#34;&gt;차라리 돈을 내고 글을 읽겠다&amp;hellip;만&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;추억이 그리워지는 시대여서 그런거 같기도 하다.&#xA;그럼에도 어차피 그렇게 다시 사용하기엔 끔찍할텐데.&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-제미니-계획&#34;&gt;1. &amp;ldquo;제미니 계획&amp;rdquo;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Gemini_(protocol)&#34;&gt;gemini protocol&lt;/a&gt; 을 기반으로 뭔가 새로운 것을 상상하면 즐겁지만,&lt;/p&gt;&#xA;&lt;p&gt;정말 제한적이어서, 내 마음대로의 확장을 떠올리게 된다.&lt;/p&gt;&#xA;&lt;p&gt;실은, gemtext와 gemini protocol은 마음에 드는 부분이 바로 그런점이지만: 오히려 제한적이고, 그냥 무시해도 되는 것들을 굳이 지원해줘야 할 것 같은 기분에 져서 우겨넣으면서 complexity만 무한대으로 보낼바엔, 이렇게 무시할 것은 잘 무시하는게 더 좋은거 같아.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 13/11/2022 .01</title>
      <link>https://ageldama.github.io/posts/2022-11nov/2022-11nov13--01-ping/</link>
      <pubDate>Sun, 13 Nov 2022 08:05:25 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2022-11nov/2022-11nov13--01-ping/</guid>
      <description>&lt;p&gt;비가 많이 내렸다. 일년간 어떻게든 자라던 잎들이 낙엽이 되어 떨어졌다.&lt;/p&gt;&#xA;&lt;p&gt;그런데 딱히 걱정스러울게 없었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>react.js, next.js, ssr, progressive hydration, 그리고 &#34;Islands Architecture&#34;와 fresh/deno</title>
      <link>https://ageldama.github.io/posts/2022-06jun/2022-06jun29--02-ping/</link>
      <pubDate>Wed, 29 Jun 2022 17:03:58 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/2022-06jun29--02-ping/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jasonformat.com/islands-architecture/&#34;&gt;https://jasonformat.com/islands-architecture/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;이전에 몇번 언급한 &lt;a href=&#34;https://hotwired.dev/&#34;&gt;hotwired&lt;/a&gt; 처럼. ㅎㅎ&lt;/p&gt;&#xA;&lt;p&gt;지금의 reactjs, vuejs등은 다음과 같은 방식이 기본:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;server: rest/gql등으로 요청을 받아서, json으로 응답.&lt;/li&gt;&#xA;&lt;li&gt;browser(client): 응답으로 받은 json을 받아서, html을 생성하여 렌더링.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&amp;hellip;이게 편하다고 생각해서 여기로 온거 같아. 나말고도 대부분의 사람들이&#xA;웹화면을 개발하던 시절에는 이렇게 만들고 싶었었던거 같아. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;그리고 당연히 ui개발이기 때문에 &amp;lsquo;컴포넌트모델&amp;rsquo;이나 값바인딩 같은 것들을 원했었고, 현재의 리액트와 같은 형태에 이르른 것 같아.&lt;/p&gt;&#xA;&lt;p&gt;물론, vdom이 복잡도를 많이 낮춰줬지만, 희안하게도 예상하지 못하던 문제를 몇가지 더 만들어낸 것 같아. 그래서 요즘엔 ssr이니 seo을 생각해서 다른 방식의 프레임웍들을 사용하려고 하고 있고, 더 나아가서 &lt;a href=&#34;https://www.patterns.dev/posts/progressive-hydration/&#34;&gt;progressive hydration&lt;/a&gt; 같은 쪽으로 더 세밀해지는 양상 같아.&lt;sup id=&#34;fnref1:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux/unix 팁 29/06/2022 .01</title>
      <link>https://ageldama.github.io/posts/2022-06jun/2022-06jun29--01-ping/</link>
      <pubDate>Wed, 29 Jun 2022 15:08:22 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/2022-06jun29--01-ping/</guid>
      <description>&lt;div&gt;&#xA;  &lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#zoxide-으로-chdir-간단하게&#34;&gt;zoxide 으로 chdir 간단하게&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#ssh으로-키보드마우스-안-붙이고&#34;&gt;ssh으로 키보드/마우스 안 붙이고&lt;/a&gt;&#xA;      &lt;ul&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#vconsole-conspy&#34;&gt;vconsole: &lt;code&gt;conspy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#x11-x2x으로-여러-머신스크린에-걸쳐서-마우스키보드-공유&#34;&gt;x11: &lt;code&gt;x2x&lt;/code&gt;으로 여러 머신/스크린에 걸쳐서 마우스/키보드 공유&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;/ul&gt;&#xA;    &lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;리눅스/유닉스/터미널/쉘은 아는만큼 편하게 쓰기 좋은거 같다.&lt;/p&gt;&#xA;&lt;p&gt;그리고 어떻게 연결해서 활용해 쓰는가에 따라서, 정말 편리해지기도 해서.&lt;/p&gt;&#xA;&lt;h1 id=&#34;zoxide-으로-chdir-간단하게&#34;&gt;zoxide 으로 chdir 간단하게&lt;/h1&gt;&#xA;&lt;p&gt;최근/디렉토리 이동한 히스토리에 따라서 (&amp;ldquo;frecent&amp;rdquo;) 이동하기:&lt;/p&gt;&#xA;&lt;p&gt;fzf+zsh의 &lt;code&gt;Control-R&lt;/code&gt;도 좋고&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;,&lt;/p&gt;&#xA;&lt;p&gt;oh-my-zsh 내장인 &lt;code&gt;plugins=(z)&lt;/code&gt;도 좋지만&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;나는 가능하면 &lt;a href=&#34;https://github.com/ajeetdsouza/zoxide&#34;&gt;zoxide&lt;/a&gt;이 가장 가볍고 좋은거 같다.&lt;/p&gt;&#xA;&lt;p&gt;설치하고 나서,&#xA;&lt;code&gt;eval &amp;quot;$(zoxide init zsh)&amp;quot;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;그리고, &lt;code&gt;z SOME-DIR&lt;/code&gt;, &lt;code&gt;zi&lt;/code&gt; 같이 으로 사용하면 되고, fzf연동도 잘되고 해서. ㅎㅎ&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Grug Brained Developer</title>
      <link>https://ageldama.github.io/posts/2022-06jun/2022-06jun24--01-grug/</link>
      <pubDate>Fri, 24 Jun 2022 04:16:26 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/2022-06jun24--01-grug/</guid>
      <description>&lt;p&gt;감동적인 글이다ㅋ:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://grugbrain.dev/&#34;&gt;https://grugbrain.dev/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;문법도 완전 grug스럽게 작성해서 반가운 글이었다.&lt;/p&gt;&#xA;&lt;p&gt;완전히 모두 내 생각과 같지는 않아도, 이야기하는 &lt;em&gt;&amp;ldquo;FOLD&amp;rdquo; 때문에&lt;/em&gt; 일어나는 일들과&#xA;조금은 그래도 &lt;em&gt;grug답게&lt;/em&gt; 그냥 해내려는 생각들이 유용.&lt;/p&gt;&#xA;&lt;p&gt;그치, grug이 공룡과 구분되는 점은 그런거겠지. ㅎㅎ&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;msa, reactjs, ejb, osgi. 공감하는 생각들.&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip; black think juice 맛있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;Software disenchantment&#34;</title>
      <link>https://ageldama.github.io/posts/2022-06jun/2022-06jun19--01-sw-disenchantment/</link>
      <pubDate>Sun, 19 Jun 2022 15:26:29 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/2022-06jun19--01-sw-disenchantment/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tonsky.me/blog/disenchantment/&#34;&gt;https://tonsky.me/blog/disenchantment/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;재밌게 읽었다. 계속 생각해오던, 이전 포스팅에서도 이야기한 생각들.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;&amp;hellip;의 진보도 항상 그때그때의 1보만이 진보이며 2보도 3보도 n+1보도 결코&amp;hellip;&amp;rdquo;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;:winking_face:&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;그치 ejb/xml을 쓰든, 뭔가 또 새로운 언어나 프레임웍으로 대단한것처럼, 진보한것처럼 쓰려고 해도,&#xA;현실적으로는 빌드도 오히려 &lt;a href=&#34;https://ant.apache.org/&#34;&gt;apache ant&lt;/a&gt; 쓸때보다 더 엉망일지도. 성능이든 iteration의 가벼움이든.&lt;/p&gt;&#xA;&lt;p&gt;정말 진보는 커녕 오히려 더 ㅎㅎ&amp;hellip; 오히려, apache ant으로라면 명확하게 확실하게 동작하도록 만들기나 잘 하겠지만.&lt;/p&gt;&#xA;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol&gt;&#xA;&lt;li id=&#34;fn:1&#34;&gt;&#xA;&lt;p&gt;Walter Benjamin의 &amp;ldquo;Arcades Project&amp;quot;의 인용, &amp;ldquo;매달린 절벽에서 손을 뗄 수 있는가?&amp;rdquo; 강신주 저. &amp;hellip;책에서는 그런 문맥이 아니었었지만, 내 생각엔 이런 문맥에도 맞지 않나 싶어서.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 17/06/2022 .01</title>
      <link>https://ageldama.github.io/posts/2022-06jun/2022-06jun17--01-ping/</link>
      <pubDate>Fri, 17 Jun 2022 02:50:41 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/2022-06jun17--01-ping/</guid>
      <description>&lt;h1 id=&#34;code-bloat-has-become-astronomical&#34;&gt;&amp;ldquo;Code bloat has become astronomical&amp;rdquo;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.positech.co.uk/cliffsblog/2022/06/05/code-bloat-has-become-astronomical/&#34;&gt;https://www.positech.co.uk/cliffsblog/2022/06/05/code-bloat-has-become-astronomical/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;극공감. 그렇다고 의존성 포함하면 몇 기가나 되는 것들이, 하는 일을 보면 안습.&#xA;&amp;hellip;그렇다고 그런 방법들만을 고르는 안목이 엄청나게 힙한것도, 스스로에게 이익이 되는것도 아니고.&lt;/p&gt;&#xA;&lt;p&gt;데스크탑에 작은 서브모니터 연결해놓은 rpi3b+이 rpi4보다 빠르지는 않을지 몰라도, micro-sd 버벅거림이랑&#xA;발열 때문에 버벅거리는건 훨씬 적다.&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;rpi4은 빠르니까!&amp;ldquo;이라면서 나름대로 데탑/랩탑에서 쓰는 설정 그대로, openbox+lxpanel 정도 올려서 쓰고 있고,&#xA;rpi3b+은 icewm 세팅하고 추가로 뭔가를 더 해놓지 않은 탓이 있을까 싶기도 하지만. &amp;hellip;어차피 둘 다 엄청 가벼울거 같은데도.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 15/06/2022 .01</title>
      <link>https://ageldama.github.io/posts/2022-06jun/2022-06jun15--01-ping/</link>
      <pubDate>Wed, 15 Jun 2022 11:22:48 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/2022-06jun15--01-ping/</guid>
      <description>&lt;p&gt;비 내리는 화요일. &amp;#x2614;&lt;/p&gt;&#xA;&lt;div&gt;&#xA;  &lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#jinja2-template-include--cache--file-time&#34;&gt;jinja2 template include + cache? + file-time&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#postgresql-as-an-api-server&#34;&gt;postgresql, as an api server?&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;jinja2-template-include--cache--file-time&#34;&gt;jinja2 template include + cache? + file-time&lt;/h1&gt;&#xA;&lt;p&gt;재밌는걸 찾았다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://jinja.palletsprojects.com/en/3.1.x/&#34;&gt;jinja2&lt;/a&gt;을 사용하면서, 하위 include으로 내려갈수록,&#xA;file을 생성해줘도, 그냥 touch을 해줘서 파일시간을 갱신해줘야&#xA;template cache을 무시하는거 같아.&lt;/p&gt;&#xA;&lt;p&gt;그래서,&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// gulpfile.js:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buildTask&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;series&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cleanTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;esbuildTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;injectTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;touchInjectedTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;watchTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./js/**/*.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buildTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;watch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;watchTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buildTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clean&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cleanTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;&amp;hellip;대략 잘 동작하고, &lt;a href=&#34;https://esbuild.github.io/&#34;&gt;webpack보다 엄청나게 빠르다&lt;/a&gt; ㅎㅎ.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;모두를 위한 algebraic effects!&#34; ...정말루?</title>
      <link>https://ageldama.github.io/posts/2022-06jun/algebraic-effects-for-everyone/</link>
      <pubDate>Mon, 13 Jun 2022 14:11:14 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/algebraic-effects-for-everyone/</guid>
      <description>&lt;p&gt;뭐 대충 다음과 같은 글들:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.eff-lang.org/handlers-tutorial.pdf&#34;&gt;https://www.eff-lang.org/handlers-tutorial.pdf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf&#34;&gt;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;그리고 몇 개의 구현체, 포스팅들: (아직은 별루인거 같은데)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/fused-effects&#34;&gt;https://hackage.haskell.org/package/fused-effects&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dry-rb/dry-effects&#34;&gt;https://github.com/dry-rb/dry-effects&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/digital-fabric/affect&#34;&gt;https://github.com/digital-fabric/affect&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/macabeus/js-proposal-algebraic-effects&#34;&gt;https://github.com/macabeus/js-proposal-algebraic-effects&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nythrox/effects.js&#34;&gt;https://github.com/nythrox/effects.js&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.janestreet.com/tech-talks/effective-programming/&#34;&gt;https://www.janestreet.com/tech-talks/effective-programming/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ocaml-multicore/effects-examples&#34;&gt;https://github.com/ocaml-multicore/effects-examples&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://overreacted.io/algebraic-effects-for-the-rest-of-us/&#34;&gt;https://overreacted.io/algebraic-effects-for-the-rest-of-us/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;음&amp;hellip; 분명히 한국말으로 번역도 해놓았고, 심지어 js버젼으로 설명/예시도 있는데 나는 전혀 모르겠다 싶었음.&lt;/p&gt;&#xA;&lt;p&gt;오히려 dry-rb, affect이 더 명확하기는 한거 같아.&lt;/p&gt;&#xA;&lt;p&gt;가장 실용적으로 접근한 예는, ocaml-multicore에서 활용한 것들 같아 보인다.&lt;/p&gt;&#xA;&lt;p&gt;분명히 장점을 볼 수 있을거 같은 개념 같다.&lt;/p&gt;&#xA;&lt;p&gt;왜냐하면,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;지금의 monad을 이용한 효과와 사용처의 분리 방식을 생각해보면,&lt;/li&gt;&#xA;&lt;li&gt;하나의 monad context에서는, 한가지 타입의 monad만을 표현가능.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;그래서 여러개의 monad context을 위해 monad transformer 같은것들으로 stacking하여 사용.&lt;/li&gt;&#xA;&lt;li&gt;(&amp;hellip;그때 그때 Haskell do-notation등에 따라 분리해서 표현)&lt;/li&gt;&#xA;&lt;li&gt;좋은점이라면 좋은점일수도 있겠지만.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;그런데, aeffects을 이용한다면,&#xA;&lt;ol&gt;&#xA;&lt;li&gt;굳이 그렇게 복잡하게 나누지 않아도 괜찮고,&lt;/li&gt;&#xA;&lt;li&gt;monad처럼 사용처에서 그 효과의 내용을 분리하기도 좋아 보여.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;당연히 그렇기 때문에, 원래의 모나드에서 같는 장점을 그대로 잃지 않으면서, 더 평범하게 적어나가기 좋을거 같다. (&amp;hellip;일반적인 imperative programming language에서 I/O/async/await, Maybe등이 동시에 나오거나, &amp;hellip;처럼)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 13/06/2022 .01</title>
      <link>https://ageldama.github.io/posts/2022-06jun/2022-06jun13--01-ping/</link>
      <pubDate>Mon, 13 Jun 2022 05:10:14 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/2022-06jun13--01-ping/</guid>
      <description>&lt;p&gt;기운 없는 날&amp;hellip; 쉬어야겠다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>jq manpage와 code</title>
      <link>https://ageldama.github.io/posts/2022-06jun/06jun12sun--02-jq-as-vm/</link>
      <pubDate>Sun, 12 Jun 2022 13:45:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/06jun12sun--02-jq-as-vm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;https://stedolan.github.io/jq/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;jq이 뭐하는 도구인지 소개는 한국어로 많은데, 그걸 갖고 조금 복잡한 패턴을 처리하는 자료는,&#xA;머리 나쁜 내가 이해하기에 적합한 자료는 찾지 못해서, 그냥 manpage을 읽고 시도.&lt;/p&gt;&#xA;&lt;p&gt;이미 알고 있는 도구, 혹은 이미 대부분의 unix-like, linux 시스템에 깔려있는 도구들이 있는데,&#xA;막상 그 도구의 manpage을 차분히 읽어 보면, 내가 너무 게을렀었고 알려고 하지 않았기에&#xA;내 삶을 더 도움을 받을 수 있었을텐데, 그렇지 못했었던 도구들이 많은것 같아.&lt;/p&gt;&#xA;&lt;p&gt;gnu coreutils, m4, awk, perl 만 해도 그랬었고, 조금이라도 알아가고 응용을 할수록 매일매일이&#xA;더 재밌고 강력해졌었던거 같아.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;Some Engineering Tough Sells&#34;</title>
      <link>https://ageldama.github.io/posts/2022-06jun/06jun12sun--01-some-engr-tough-sells/</link>
      <pubDate>Sun, 12 Jun 2022 04:37:12 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/06jun12sun--01-some-engr-tough-sells/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://posco.dev/blog/2022-04-23_draft_some-engineering-tough-sells/&#34;&gt;https://posco.dev/blog/2022-04-23_draft_some-engineering-tough-sells/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;공감이 가는 부분들은:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;dynamic serialization isn’t worth it, use statically defined serialization&lt;/li&gt;&#xA;&lt;li&gt;untested code is virtually always somewhat wrong&lt;/li&gt;&#xA;&lt;li&gt;doing things right pays off sooner than we usually imagine&lt;/li&gt;&#xA;&lt;li&gt;an ounce of design is worth a pound of implementation&lt;/li&gt;&#xA;&lt;li&gt;in data engineering, the data very often violates your beliefs about the shape&lt;/li&gt;&#xA;&lt;li&gt;thinking about, and minimizing edges in your code’s dependency graph is a win&lt;/li&gt;&#xA;&lt;li&gt;a good (i.e. programmable, fast, reliable, reproducible) build system solves a lot of practical software engineering problems&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&amp;hellip;많은것들을 경험하되, 숙고와 자기객관화는 중요. 아니라면, 경험과 시간은 그저 흘러가게 되니.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 11/06/2022</title>
      <link>https://ageldama.github.io/posts/2022-06jun/2022-06jun11-ping/</link>
      <pubDate>Sat, 11 Jun 2022 03:10:36 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/2022-06jun11-ping/</guid>
      <description>&lt;div&gt;&#xA;  &lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#jekyll--hugo&#34;&gt;Jekyll &amp;ndash;&amp;gt; Hugo&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#생각&#34;&gt;생각&lt;/a&gt;&lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;jekyll--hugo&#34;&gt;Jekyll &amp;ndash;&amp;gt; Hugo&lt;/h1&gt;&#xA;&lt;p&gt;&amp;hellip;Jekyll에서, 결국 다시 가볍고 그냥 잘 동작하는 Hugo으로 블로그 변경.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;생각&#34;&gt;생각&lt;/h1&gt;&#xA;&lt;p&gt;남들이 뭐래도 별 관심 없이.&#xA;실은 그냥 포장지와 리본장식만 변해가는거고,&lt;/p&gt;&#xA;&lt;p&gt;반면.&#xA;그 포장지, 리본장식과 그 의미와 가치를 제대로 분간해내지 못하니까.&lt;/p&gt;&#xA;&lt;p&gt;도구를 도구로 보면 안되고, 도구가 나를 쓴다는것을 이해해야 하는데.&#xA;그래서 도구를 이용해 자유로워질거라 착각하면, 도구에 얽메여 끌려만 가면&amp;hellip;,&#xA;그런데 도구에 이용당해 복종할수록 자유로워진다면 &amp;hellip;이겠지.&lt;/p&gt;&#xA;&lt;p&gt;끌려가며, 내가 생각치 않은곳에 끌려와 진짜 성장을 얻기도 하는 이도 있고,&#xA;끌려가며 원치 않는 방향으로 가며 그게 성장이라고 허울로 하기도 하는 이도 있고.&lt;/p&gt;</description>
    </item>
    <item>
      <title>pytest fixtures와 의존성관리, 그리고 복잡도관리</title>
      <link>https://ageldama.github.io/posts/2022-jekyll/2022-06-08--02-pytest-fixtures-and-complexity-mgmt/</link>
      <pubDate>Wed, 08 Jun 2022 18:20:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2022-jekyll/2022-06-08--02-pytest-fixtures-and-complexity-mgmt/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-13&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-13&#34;&gt;13&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-14&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-14&#34;&gt;14&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-15&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-15&#34;&gt;15&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-16&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-16&#34;&gt;16&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ...tests/conftest.py&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pytest&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@pytest.fixture&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Pokemon&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@pytest.fixture&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;monster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ...tests/foo_test.py :&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_beast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;monster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# &amp;lt;--- `def monster(..)`의 결과를 주입 받음.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.pytest.org/en/6.2.x/fixture.html&#34;&gt;https://docs.pytest.org/en/6.2.x/fixture.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;파이썬에 다른 의존성주입 컨테이너들도 있지만, 흥미롭고 실용적이어서 자주 쓰게됨.&#xA;내가 소프트웨어 프로젝트에서 가장 중요하다고 생각하는 부분을 잘 캐치해주고, 편안하게 해주는 방식 같아.&lt;/p&gt;</description>
    </item>
    <item>
      <title>(HN) &#34;asshole test&#34;</title>
      <link>https://ageldama.github.io/posts/2022-jekyll/2022-06-08--01-asshole-test/</link>
      <pubDate>Wed, 08 Jun 2022 18:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2022-jekyll/2022-06-08--01-asshole-test/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Some years back I applied to join IBM&amp;rsquo;s grad scheme, there was a peculiar stage to the process I&amp;rsquo;ve not seen elsewhere. It was during the onsite day, where a batch of 20 or so applicants were put through various tests in an IBM office. They called it the &amp;ldquo;group test&amp;rdquo;; around 8 of us were led to a room and asked to solve a puzzle together. Each of us was given an information pack, there was a white board, and a timer ticking down from 60 minutes. At first there was silence as we looked at our packs, then the first voice: &amp;ldquo;Let&amp;rsquo;s pool our information&amp;rdquo;, someone stands up by the whiteboard, grasping a marker. Silence, it&amp;rsquo;s not clear how this information should be parsed. One person starts reading theirs out word for word. This is not going to scale. Someone interrupts. Before long the whiteboard leader has been deposed and another is wielding the marker. Then another fights for control. The 60 minutes has run out, the puzzle is unsolved. Confused and drained we head off to the next test.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hotwired 재밌다.</title>
      <link>https://ageldama.github.io/posts/2022-jekyll/2022-06-06--01-hotwired-fun/</link>
      <pubDate>Mon, 06 Jun 2022 19:50:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2022-jekyll/2022-06-06--01-hotwired-fun/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hotwired.dev/&#34;&gt;Hotwired&lt;/a&gt; 재밌다.&lt;/p&gt;&#xA;&lt;p&gt;Stimulus, Turbo + Rails 7 갖고 이것저것 패턴별로 생각해보고 만드는게 즐겁네.&lt;/p&gt;&#xA;&lt;p&gt;딱, 이렇게 문제 그자체를 이해하고 설계해놓은 것들은 익히고 사용하는게 너무 즐겁다.&#xA;rails도 그랬었고, &amp;hellip;처음 볼때에는 뭐 이렇게 단순해? 싶을 정도로.&lt;/p&gt;&#xA;&lt;p&gt;너무 거창하거나, 실제로는 그 문제를 깊이 생각해서 푼게 아니라, 너무 범용적이고 범우주적인 해법(예: 상태관리, 컴포넌트 모델)만으로 퉁치려는것보다는. &amp;hellip;이제 그런것들에 혹하거나 끌리지 않게 되었다.&lt;/p&gt;&#xA;&lt;p&gt;그리고 또 한편으로는, 모든 해법은 단순하고 우아해야만 한다고 믿고 싶어서 믿는 fanboy가 되고 싶지도 않고.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 19/Jun/2021</title>
      <link>https://ageldama.github.io/posts/2021-06jun/ping-19sat/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2021-06jun/ping-19sat/</guid>
      <description>&lt;p&gt;&#xA;그간은 여러 수고를 줄이고 싶어서 블로그도 문을 닫아 놓고,&#xA;github repositories도 대부분은 private으로 변경해놓고 지냈었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;하지만 그래도 coding과 글쓰기는 계속 하고 있었었고, 글을 조금씩이라도 공개할까 싶어 다시 문을 연다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그간 변한 것이 있다면, 적어도 공부와 코딩 그리고 컴퓨팅에 대해서만,&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Rust을 하고 지낸다는 점, 그리고 새로운 네트웍 프로토콜에 관심을 갖고 살고 있는 것,&#xA;또 라즈베리파이4와 좋아하는 배포판들이 더 생겼다는 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그리고 여전히 emacs을 즐겁게 잘 사용하고 있고, 오히려 더 vim을 간간히 쓰는 것은 덜 쓰게 된 것 같아.&#xA;이제는 너무 이맥스 + evil 설정 등에 익숙해져서 vim을 오히려 더 설정해서 쓰고 싶은 생각도 들지 않는다.&#xA;..하지만 다른 이들에게 이맥스를 쓰라고 권하기는 머뭇거려진다. 어릴 때부터 이맥스를 사용했고 그렇게 습관으로 하나씩 하나씩 이맥스 컨벤션과 모드들에 익숙해져서 시간이 오래 걸렸었던 것 같으니까.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 29/Nov/2020</title>
      <link>https://ageldama.github.io/posts/2020-11nov/ping-29sun/</link>
      <pubDate>Sun, 29 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/ping-29sun/</guid>
      <description>&lt;p&gt;&#xA;2020년이 지나간다. 금새 또 봄이 올텐데 기대된다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 23/Nov/2020</title>
      <link>https://ageldama.github.io/posts/2020-11nov/ping-23tue/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/ping-23tue/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;logitech k480 bluetooth keyboard&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.logitech.com/ko-kr/product/multi-device-keyboard-k480&#34;&gt;https://www.logitech.com/ko-kr/product/multi-device-keyboard-k480&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  받아서 묵혀두던 키보드. 팬터그래프 방식을 쓰던 것과는 또 다르지만&#xA;  그럭저럭 마음에 든다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  가장 마음에 드는 부분은, 키들끼리의 간격이 적당하고, 키보드&#xA;  레이아웃에서 마우스 이동이 없도록 키패드 부분이 없는 방식인 점,&#xA;  그리고 장난감스러운 키보드지만 그렇다고 오타가 넘치도록 너무 대충&#xA;  만들어진 것은 아닌 것 같아서 그럭저럭 짜증을 유발하지 않으면서&#xA;  적당히 쓸 수 있는 것 같아서.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  책상에 공간을 너무 잡아먹지도 않아서 그럭저럭 괜찮다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  다만 블루투스 방식이어서, 건전지를 써서 내게는 조금은 감점.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 13/Nov/2020</title>
      <link>https://ageldama.github.io/posts/2020-11nov/ping-13fri/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/ping-13fri/</guid>
      <description>&lt;p&gt;&#xA;금새 겨울이 오고 있구나. &lt;/p&gt;</description>
    </item>
    <item>
      <title>Python &#43; Generator / LeetCode &#34;1614. max nesting depth of the parentheses&#34;</title>
      <link>https://ageldama.github.io/posts/2020-11nov/leet-code-1614-3rd/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/leet-code-1614-3rd/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://ageldama.github.io/posts/2020-10oct/leet-code-1614/&#34;&gt;지난 번 작성한 Common Lisp / LOOP매크로을 이용한 구현&lt;/a&gt; 을 다른&#xA;언어에서였다면, 비슷한 조건으로 메모리 복잡도 O(1)으로 풀어보고&#xA;싶었다.&lt;/p&gt;&#xA;&lt;div class=&#34;src src-python&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt;2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt;3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt;4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt;5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt;6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt;7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt;8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;itertools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;accumulate&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;find_paren_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;gen_only_parens&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;accumulate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gen_only_parens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;다른 언어에서도 lazy stream을 지원한다면 비슷하게 풀 수 있을 것 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 10/Nov/2020</title>
      <link>https://ageldama.github.io/posts/2020-11nov/ping-10tue/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/ping-10tue/</guid>
      <description>&lt;p&gt;&#xA;올해 초에는 Vue.js을 많이 쓸일이 있었었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;아주 오래 전에, Adobe Flex에서 MXML, ActionScript3 같은 것을 써서 화면&#xA;컴포넌트를 만들던 이후로 거의 10여년 만에 화면에 필요한 컴포넌트를&#xA;만들고 개발을 해봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그 중간 중간 jQuery을 이용해서 웹화면을 만들거나 하는 경험도 있기는&#xA;했었는데, 재밌게도 그 이전에 사용하던 MXML, AS3의 컴포넌트 중심&#xA;개발방식이 훨씬 앞선 것이었다는 생각을 했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;실제로 2008년 정도에도, 현재의 ES6 같은 느낌의 AS3으로, Class based&#xA;OO을 하고 코딩을 하고, 화면 컴포넌트들을 JSX와 유사한 모양의 MXML으로&#xA;조직하고, 또 바인딩을 이용해서 지금의 Vue, React에서 State을 이용하여&#xA;데이터를 이용하여 컴포넌트를 어떻게 그릴지 결정해서 개발을 했었었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 05/Nov/2020</title>
      <link>https://ageldama.github.io/posts/2020-11nov/ping-05thu/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/ping-05thu/</guid>
      <description>&lt;p&gt;&#xA;책을 몇 권 주문했다. 관심이 생긴 새로운 분야에 대한 책들이었는데&#xA;흥미롭게도 그 중 두 권이 서로 완전히 다른 분야인데 역저자가&#xA;같았다. 아마도 역자 소개에 나온 자신의 업무, 맡은 영역에서 필요하거나&#xA;관심이 깊어서 번역한 것 같다. 재밌었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그리고 갖고 있는 한국어로는 아직 나오지 않은 책을 세 권 정도 읽고&#xA;싶어서 다시 펼쳤다. 예전에도 조금 읽었었던 책들인데 마음에 들었던&#xA;구절들, 생각들이 다시 읽혀져 즐거웠다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;org-more.el&#34; released!</title>
      <link>https://ageldama.github.io/posts/2020-11nov/org-more-1st-rel/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/org-more-1st-rel/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/org-more&#34;&gt;org-more.el: search .org files have certain tags (#+tags[]:&#xA;or #+tags[]:)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;개인 위키, KB처럼 org 파일 모음을 사용하고 있는데, 디렉토리 계층과&#xA;직접 링크 관계만이 아니라 같은 태그들으로 묶어서 각 파일들을 검색하고&#xA;리스팅 할 수 있도록 만들었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 02/Nov/2020</title>
      <link>https://ageldama.github.io/posts/2020-11nov/ping-02mon/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/ping-02mon/</guid>
      <description>&lt;p&gt;&#xA;(functional) reactive 관련들을 다시 찾아 보고 있다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;예전에 webdev은 아니고 백엔드를 위해서 &lt;a href=&#34;https://github.com/ReactiveX/rxjs&#34;&gt;rxjs&lt;/a&gt; 을 쓸 일이 있었었고&#xA;꽤 재밌었다. node.js에서 async/await 이전에 동시성 처리를 하기에&#xA;유용하게 쓸 수 있었었고, 실은 그냥 &lt;a href=&#34;https://stackoverflow.com/questions/51542865/is-rxjs-observable-a-monad&#34;&gt;monad이어서&lt;/a&gt; 조금만 이해를 하고&#xA;사용하면 여러모로 편리했었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;https://github.com/stoeffel/awesome-frp-js 여기에 보면 rxjs이외에도&#xA;다른 js을 위한 FRP라이브러리들이 많이 생겼었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그 중에 흥미가 있어서 &lt;a href=&#34;https://github.com/baconjs/bacon.js&#34;&gt;bacon.js&lt;/a&gt; 을 읽고 rxjs에서 만들어 본 작은 예제&#xA;프로젝트를 다시 작성해봤다. 깔끔했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;rxjs으로 작성했었던 작은 예제는 다음과 같다.&lt;/p&gt;&#xA;&lt;div class=&#34;src src-javascript&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;13&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#13&#34;&gt;13&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;14&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#14&#34;&gt;14&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;15&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#15&#34;&gt;15&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;16&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#16&#34;&gt;16&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;17&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#17&#34;&gt;17&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;18&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#18&#34;&gt;18&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;19&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#19&#34;&gt;19&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;20&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#20&#34;&gt;20&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;21&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#21&#34;&gt;21&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;22&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#22&#34;&gt;22&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;23&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#23&#34;&gt;23&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;24&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#24&#34;&gt;24&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;25&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#25&#34;&gt;25&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;26&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#26&#34;&gt;26&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;27&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#27&#34;&gt;27&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;28&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#28&#34;&gt;28&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fromEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Subject&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rxjs&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// eslint-disable-next-line object-curly-newline&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;debounceTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rxjs/operators&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jquery&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;counter$&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;counter$&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;scan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;debounceTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jquery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#count&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;counter2$&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;counter2$&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jquery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#count2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;increase$&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fromEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jquery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#increase&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mapTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;decrease$&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fromEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;jquery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#decrease&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mapTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;increase$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;counter$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;increase$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;counter2$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;decrease$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;counter$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;decrease$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;counter2$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;(&lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;webpack.config.js&lt;/code&gt;, 관련 html 파일 등은 생략했다.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;asdf-subdir-finder&#34; released!</title>
      <link>https://ageldama.github.io/posts/2020-10oct/asdf-subdir-finder-1st/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/asdf-subdir-finder-1st/</guid>
      <description>&lt;p&gt;&#xA;지난번 포스팅한 &amp;#34;&lt;a href=&#34;https://ageldama.github.io/posts/2020-10oct/lisp-asdf-subdir-finder/&#34;&gt;asdf 정의를 내 코드베이스의 하위디렉토리에서 자동으로&#xA;로딩하기&lt;/a&gt;&amp;#34;를 프로젝트으로 만들었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/asdf-subdir-finder&#34;&gt;https://github.com/ageldama/asdf-subdir-finder&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;사람마다 커먼리습으로 작업하는 스타일에 따라 많이 다를 수 있어서 안&#xA;써도 되기도 하지만, 그냥 정리해서 공개는 해봤다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;커먼리습 ASDF 불러오기 편하게 하기&#34; 대모험</title>
      <link>https://ageldama.github.io/posts/2020-10oct/lisp-asdf-subdir-finder/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/lisp-asdf-subdir-finder/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;ASDF와 system definition file 검색의 정석&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;이전에 &lt;a href=&#34;https://ageldama.github.io/posts/2018-11nov/cl-asdf-custom-load-script/&#34;&gt;ASDF을 이용하여 커먼리습 프로젝트의 의존성, 시스템을 로딩하기&lt;/a&gt;&#xA;  에 대해서 설명한 적이 있었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  이전에 다룬 내용은 정석적으로 &lt;code&gt;$HOME/common-lisp&lt;/code&gt; 디렉토리에 &lt;code&gt;.asd&lt;/code&gt;&#xA;  파일을 심볼릭링크를 걸고, &lt;code&gt;(asdf:load-system ..)&lt;/code&gt; 을 시도하는&#xA;  내용이었었다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;Prototyping등 더 편안하게 혼자 코딩을 할 때는…&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;혼자 커먼리습 코딩을 하면서, 나는 더 간단하게 프로젝트를 시작하는&#xA;  방법을 선호한다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  커먼리습이 파일 이름이나 경로에 대해서 의존하는 것이 아니고,&#xA;  컴파일시점, 로딩시점에 순서에 따라 로딩해서 최종적으로 컴파일하여&#xA;  적재한 결과 이미지를 더 중요하게 여기기 때문에, 그리고 그런 컴파일,&#xA;  빌드, 로딩과 같은 모든 단계들 자체도 커먼리습 표현식 그자체로&#xA;  동작하기 때문에 그냥 하나의 소스파일을 섹션별로 나눠서 작업하면&#xA;  편리하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CommonLisp (w/o LOOP-macro) / LeetCode &#34;1614. max nesting depth of the parentheses&#34;</title>
      <link>https://ageldama.github.io/posts/2020-10oct/leet-code-1614-2nd/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/leet-code-1614-2nd/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://ageldama.github.io/posts/2020-10oct/leet-code-1614/&#34;&gt;어제 작성한 LOOP매크로을 이용한 구현&lt;/a&gt; 을 풀어서, 만약 LOOP매크로가&#xA;없었더라면 어떻게 짰을지 작성해봤다.&lt;/p&gt;&#xA;&lt;div class=&#34;src src-lisp&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;max-nested-parentheses-raw&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;optimize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;safety&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;simple-string&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;fixnum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;dotimes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s--cur-idx&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;elt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s--cur-idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;#\(&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;incf&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eql&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\(&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;여전히 타입을 지정해서 자동으로 타입추론, 최적화 하도록 했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그런데 여전히 &lt;code&gt;dotimes&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;incf&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt; 같은 커먼리습&#xA;HyperSpec에서 표준에 포함시킨 매크로 등을 사용했다. 물론 이런 것들도&#xA;다 풀어서 작성해도 되겠지만 별 의미는 없을 것 같아서.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CommonLisp / LeetCode &#34;1614. max nesting depth of the parentheses&#34;</title>
      <link>https://ageldama.github.io/posts/2020-10oct/leet-code-1614/</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/leet-code-1614/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;문제&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses/&#34;&gt;https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;작성한 코드     &#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div class=&#34;src src-lisp&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt;2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt;3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt;4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt;5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt;6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt;7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt;8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;max-nested-parentheses&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;optimize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;safety&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;simple-string&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;fixnum&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;across&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;#\(&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;incf&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eql&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\(&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;nv&#34;&gt;maximizing&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-3&#34;&gt;&#xA;코드 의도&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;우아한 코드보다는 공간복잡도가 &lt;code&gt;O(1)&lt;/code&gt; 이고 싶었다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-4&#34;&gt;&#xA;&lt;em&gt;Edit&lt;/em&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SBCL에 맞춰 코드에 타입을 지정해줘봤다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;결과 어셈블리 코드가 조금 짧아졌다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ping 19/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-19mon/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-19mon/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;가을&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;도르트문트 집은 꽤 평화로웠다. 날씨가 좋은 날도 많고 공기도&#xA;  맑았다. 한가한 주말이 되면 창문을 열고 잔디가 깔린 정원을 보며&#xA;  담배를 태우고 커피를 내려 마셨다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그리고 지하세탁장에 빨래를 돌려놓고 핑크플로이드의 다크사이드 오브&#xA;  더 문 앨범을 좋은 스피커로 틀어놓았다. 잘 어울렸다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  서울의 변두리에서 맞는 이번 가을은 그런 기분이다. 조용하고 가을&#xA;  햇살과 공기가 맑아졌다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그리고 핑크플로이드를 그렇게 여유롭게 들을 수 있었다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;오늘 읽으려는 글&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.mcs.vuw.ac.nz/comp/Publications/CS-TR-02-9.abs.html&#34;&gt;http://www.mcs.vuw.ac.nz/comp/Publications/CS-TR-02-9.abs.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ping (2nd) 17/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-17sat-2nd/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-17sat-2nd/</guid>
      <description>&lt;p&gt;&#xA;  올해 초 &lt;a href=&#34;https://github.com/ageldama/cl-state-machine&#34;&gt;cl-state-machine 라이브러리&lt;/a&gt;를 만들어 공개한 이후로&#xA;  커먼리습을 쓰지는 않았다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  다른 직업상 쓰는 언어들만을 쓰고 오픈소스와 개인적으로 만들고 싶은&#xA;  프로젝트를 위해서 쓰는 언어인 커먼리습은 미뤄두었었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  다시 커먼리습을 해야겠다고 생각이 들었다. 개인적으로 만들고 싶은&#xA;  프로젝트도 있고, 그 프로젝트를 위해서 프론트엔드를 만드는데 React와&#xA;  Vue을 써보고 이해하고 있어도 쓰고 싶지는 않기 때문이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  사실 커먼리습은 그렇게 문법이 예쁘지도, 멋진 React와 같은 멋진&#xA;  프레임웍이나 최신의 유행하는 라이브러리들을 모두 갖고 있지도 않다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://en.wikipedia.org/wiki/Common_Lisp_HyperSpec&#34;&gt;HyperSpec&lt;/a&gt;을 읽다 보면 아주 쉽게 정의되어 있는 키워드들이 일관성이&#xA;  있지도, 지금 시대의 관점에서 보기에 익숙한 현대적인 용어들을&#xA;  사용해서 이름을 지어놓지도 않았다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 17/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-16fri/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-16fri/</guid>
      <description>&lt;p&gt;&#xA;웹프론트엔드 개발을 조금씩 해보고 있다. 처음에는 예전 방식으로만&#xA;하려고 하다가 조금씩 겨우 써보던 webpack을 다시 가이드를 차근차근&#xA;공부하고 동작하는 방식을 이해하도록 뜯어보고 돌려봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;생각보다 단순하게, 그리고 확장성 있게 쓸만한 빌드도구였다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다만 문제는 설정이 복잡하고 이해하기 힘든 점보다는 빌드 시간이 너무&#xA;느린 점이었다. (내게는)&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 parcel bundler을 시도 했는데, 설정도 거의 필요 없이 바로&#xA;동작하고 하는 점은 좋고, 성능도 정말 빨랐다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다만 Vim/Emacs으로 파일을 편집하고 저장할 때, &lt;code&gt;parcel watch&lt;/code&gt; 대상인&#xA;파일들을 종종 아예 dev-server을 재시작해야만 제대로 동작하는 상태로&#xA;빠지는게 조금 짜증났다. 기본으로 webpack보다는 이런 자잘한 부분이 좀&#xA;덜 다듬어진걸까 싶다.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 16/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-17sat/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-17sat/</guid>
      <description>&lt;p&gt;&#xA;ADT&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;만큼 만들어 쓰는 것은 아니지만, 그냥 Kotlin, Python의&#xA;dataclass 정도는 쓰고 싶어서 CommonLisp 매크로를 만들어봤다.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-2&#34; href=&#34;#footnote-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://common-lisp.net/project/cdr/document/8/cleqcmp.html&#34;&gt;equals&lt;/a&gt; 라이브러리를 써서 동치 비교와 CLOS의 &lt;code&gt;print-object&lt;/code&gt; generic&#xA;function을 구현해서 to-string 정도만 되도록 만들어 봤다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;macro body&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div class=&#34;src src-lisp&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;13&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#13&#34;&gt;13&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;14&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#14&#34;&gt;14&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;15&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#15&#34;&gt;15&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;16&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#16&#34;&gt;16&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;17&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#17&#34;&gt;17&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;18&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#18&#34;&gt;18&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;19&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#19&#34;&gt;19&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;20&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#20&#34;&gt;20&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;21&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#21&#34;&gt;21&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;22&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#22&#34;&gt;22&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;23&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#23&#34;&gt;23&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;24&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#24&#34;&gt;24&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;25&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#25&#34;&gt;25&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;26&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#26&#34;&gt;26&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;27&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#27&#34;&gt;27&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;28&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#28&#34;&gt;28&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;29&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#29&#34;&gt;29&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;30&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#30&#34;&gt;30&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;31&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#31&#34;&gt;31&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;32&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#32&#34;&gt;32&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;33&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#33&#34;&gt;33&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;define-data-class&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;class-name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;parent-classes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;slot-names&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;&amp;amp;key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;no-print-slot-names&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;no-equals-slot-names&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;flet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;accessor-symbol&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;slot-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;alexandria:format-symbol&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*package*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                     &lt;span class=&#34;s&#34;&gt;&amp;#34;~a-~a&amp;#34;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;class-name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;slot-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;progn&lt;/span&gt;          &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;c1&#34;&gt;;; defclass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;slot-defs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;slot-name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;slot-names&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                 &lt;span class=&#34;nv&#34;&gt;collecting&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;slot-name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                              &lt;span class=&#34;ss&#34;&gt;:initarg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;alexandria:make-keyword&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;slot-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                              &lt;span class=&#34;ss&#34;&gt;:accessor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;accessor-symbol&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;slot-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defclass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;class-name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parent-classes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;slot-defs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;c1&#34;&gt;;; defmethod print-object&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print-slot-names&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;set-difference&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;slot-names&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                                   &lt;span class=&#34;nv&#34;&gt;no-print-slot-names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fmt-ctrl&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~{~a=~~a~^, ~}&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;print-slot-names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defmethod&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print-object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;class-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;print-unreadable-object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:type&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;with-slots&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print-slot-names&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;obj&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fmt-ctrl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print-slot-names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;c1&#34;&gt;;; defmethod equals:equals&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equals-slot-names&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;set-difference&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;slot-names&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                                    &lt;span class=&#34;nv&#34;&gt;no-equals-slot-names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equals-exprs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;equals-slot-name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;equals-slot-names&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                     &lt;span class=&#34;nv&#34;&gt;collecting&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equals:equals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;slot-value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lhs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;quote&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equals-slot-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;slot-value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rhs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;quote&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equals-slot-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defmethod&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;equals:equals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lhs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;class-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rhs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;class-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;&amp;amp;rest&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ignore&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equals-exprs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;synopsis / usage&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div class=&#34;src src-lisp&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt;2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt;3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt;4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt;5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt;6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;define-data-class&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;animal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;define-data-class&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bird&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equals:equals&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;make-instance&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;animal&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:age&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;make-instance&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;animal&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:age&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;  오랬만에 재밌었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping (2nd) 15/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-15thu-2nd/</link>
      <pubDate>Thu, 15 Oct 2020 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-15thu-2nd/</guid>
      <description>&lt;p&gt;&#xA;… &amp;#39;田大&amp;#39;이라고 적혀 있었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다른 한문으로 쓰여 있어 읽지 못하는 각각의 수 많은 바램들과 이름들&#xA;사이로 삐뚤빼뚤한 어색한 글씨로 그렇게 적혀 있었었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;너무 단순한 이름, 그리고 설명이 붙어 있었듯이, 다른 사람들처럼 많은&#xA;이야기를 적고 싶었지만, 아이여서 그랬는지, 아니면 글을 몰라 그랬는지,&#xA;이름만이라도 적어놓은 그 못그린 그림 같은 두 글자를 읽었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;누군가 아주 오래 전에 그 사람도 아마도 나와 별로 다를 것도 없는&#xA;고민들을 하며 매일을 살았었던 것을 느꼈다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;아주 오랜 세월이 흐른 후에야 그렇게 만났었던 모르는 어떤 사람이&#xA;떠올랐다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 15/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-15thu/</link>
      <pubDate>Thu, 15 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-15thu/</guid>
      <description>&lt;p&gt;&#xA;예전에 다니던 회사의 소식을 뉴스로 봤다. 사고 자체는 그렇게 좋은&#xA;이야기는 아니어서 안타까웠었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그리고 나오기 이전에 팀의 문화나 프로세스, 방법론 같은 이야기를 대표와&#xA;많이 나누고 많은 글을 써서 전달한 것이, 관련 검색에 보이는 구인란에 잘&#xA;적혀있고 문화와 시스템에 반영된 것 같아서 기분이 정말 좋았다. 비록&#xA;그것에 대한 기여가 내 몫으로 내 이름을 빛나게 하거나 경제적 이익이&#xA;되지는 못했지만, 그래도 그런 내용들을 이해 해주고 반영한 사람에 대해서&#xA;다시금 애정과 존경의 마음이 들었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 11/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-11sun/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-11sun/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;어째서 더 잘 그럴 수 있을까&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;무엇인가를 만드는 일은 사실 두 가지 단계로 발전하는 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  단지 목적한 그것만을 만드는 일과, 또는 그것을 반복적으로 생산하고 또&#xA;  더 나은 방법으로 추상화하여 내는 도구를 만들어내는 일으로 구분할 수&#xA;  있는 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  직관적으로 생각했을 때에는, 목적이 명확하다면 당연히 그것 자체를&#xA;  만드는 일을 이미 존재하는 도구들을 통해서 표현하고 만들면 그만인 것&#xA;  같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그리고 더 나아가서 결과물을 그냥 직접 만드는 것이 아니라, 그 결과물을&#xA;  만들기 위한 도구까지 같이 만들거나, 그 결과물이 그를 만들기 위해&#xA;  고안된 도구를 통해서 만드는 경우가 비교할 수 없이 생산적이고 그 결과물&#xA;  또한 훨씬 매끄럽고 완성도가 높은 경우가 오히려 보통인 것 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 10/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-10sat/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-10sat/</guid>
      <description>&lt;p&gt;&#xA;오래 써오던 맥북에어의 WIFI이 성능이 계속 안 좋아졌었던 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;모델명을 알아보니, 2012년 형이었다. 정말 오래 썼구나. &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;어차피 MacOS을 여러 가지 이유로 좋아하지 않아서 그냥&#xA;아치리눅스&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-2&#34; href=&#34;#footnote-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;를 설치하고 그대로 쓰고 있다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;최근에는 아예 WIFI을 USB-LAN으로 연결해주는 RPi을 만들어 쓰고&#xA;있었다. 물론 내장WIFI은 너무 느려서 &lt;code&gt;nmcli r wifi off&lt;/code&gt; 을 기본으로&#xA;아예 S/W Disable시켜놓고 살았다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;어쩌다 계기가 있어서, USB-LAN연결용 RPi을 챙기지 못한 외부에서 어쩔 수&#xA;없이 쓰려고 시도해보니, 아예 조금 내장WIFI을 쓰면 조금 동작하다가&#xA;시스템이 뻗어버린다. …아예 맛이 갔나보다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 08/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-08thu/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-08thu/</guid>
      <description>&lt;p&gt;&#xA;벌써 겨울 날씨에 매일 다가가는 것 같다. 시간이 흘러가는 것을 며칠&#xA;눈치 채지 못하다가 다시 눈치 챌 수 있게 되었다. 다행이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping (2nd) 04/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-04sun-2nd/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-04sun-2nd/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;막귀의 이어폰 선호&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;정말 이어폰을 여러 개를 아작을 내면서 살아온 것 같다. 헤드폰은&#xA;  겨울에만 편안한거 같고.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  일을 하며 소음에서 분리되고 싶을 때, 집중하면서 또 집중 상태에 들기&#xA;  위해서 시간을 버리며 고생하고 싶지 않을 때도 많이 쓴다. 덕분에&#xA;  청력은 조금 나빠지는 거 같다.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  과거에는 정말 싸구려 이어폰, KTX에서 나눠주는 일회용 이어폰을 꽤&#xA;  오래 쓴적도 있다. 특유의 딱딱하고 AM라디오스럽게 소리를 만들어&#xA;  버려서 이상한 소리가 나지만 막 쓰기 좋아서였다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그리고 그 이후로는 나도 모르게 어쩌다가 DAC칩이 좋은 것이 붙어&#xA;  있다는 스마트폰과 거기에 번들로 줬었던 쿼드비트 이어폰을 재밌게&#xA;  썼었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 04/Oct/2020</title>
      <link>https://ageldama.github.io/posts/2020-10oct/ping-04sun/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/ping-04sun/</guid>
      <description>&lt;p&gt;&#xA;연휴 이전에는 이런 저런 사람들을 만나고 이야기를 나눌 기회가 많았다.&#xA;그러면서 대부분 흔하게 느끼고 생각한 것은 사람들은 자신의 머릿 속에&#xA;이미 만남 이전부터 만들어놓은 상상에 있는 누군가를 만나고, 실제로는&#xA;나를 만나서 이야기를 나눈 사람들은 극히 드물었던 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;물론 그 이전에도 마찬가지였다. 어떤 사람들은 같이 생활하고 일하거나&#xA;하며 지내는 경우에도 그렇게 살아가며, 자기 자신의 이미지에 대해서도&#xA;너무 현실과 괴리가 커서 문제를 일으키는 사람들도 보았다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;누구나 직접 누군가나 어떤 상황을 마주하는 것이 아니라 이미지와 각자가&#xA;이해하고 수용할 수 있는 정도로 살아가겠지만 그 정도가 너무 심한 경우를&#xA;본다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 26/Sep/2020</title>
      <link>https://ageldama.github.io/posts/2020-09sep/ping-26sat/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-09sep/ping-26sat/</guid>
      <description>&lt;p&gt;&#xA;영화, 소설, ..심지어 프로그래밍언어나 사람, idea을 접할 때 어떤 것들은&#xA;그 자체로 화려해보이고 천재적이라는 것을 느낄 수 있을지도 모른다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;프로그래밍언어이나 기술, idea에 대해서는 오히려 그렇게 직관적으로&#xA;결론을 내리기 어려울 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;영화와 같은 표현은 그런 것을 만날 수 있을거라고 쉽게 오해하는 것&#xA;같다. 단지 바라보는 것만으로 명작임을 느낄 수 있을거라고&#xA;말이다. 그리고 그렇기 때문에 자신의 입맛을 만족시키는 그것이, 또는&#xA;그것만이 명작일 것이라고 오해하기 쉽다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그런데 그렇지 않은 경우를 많이 본다. 영화만을 한정지어서도 그것을&#xA;이해하기 위해서 더 많은 주변을 둘러보고 그 자체를 깊게 살펴보고&#xA;생각해야 하는 경우. 그렇게 바라본 다음에야 그 영화가 영화라는 매체로서&#xA;표현될 수 밖에 없는 이야기와 방식을 너무 적절하게 사용했음을&#xA;알아챈다. 그리고 그런 것을 나는 명작이라고 생각한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 23/Sep/2020</title>
      <link>https://ageldama.github.io/posts/2020-09sep/ping-23wed/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-09sep/ping-23wed/</guid>
      <description>&lt;p&gt;&#xA;이제서야 유한하다는 것을 더욱 깊이 생각해본다. 그리고 얼마나 달콤한&#xA;행복을 살아가는지 깨닫는다. 매일 매일이 별 것 없지만 그대로 너무나&#xA;내게는 행복하다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;언젠가 내 마지막을 맞이하면 모든 것들이, 나만이 마음 속에 간직한 이&#xA;많은 감정과 기쁨들 모두 그대로 담아둔 채 떠나야겠지만 그게 모두의&#xA;다들 똑같을 것만 같다. 그렇게 억울하지는 않아졌다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 17/Sep/2020</title>
      <link>https://ageldama.github.io/posts/2020-09sep/ping-17thu/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-09sep/ping-17thu/</guid>
      <description>&lt;p&gt;&#xA;영화 &amp;#39;바그다드 카페&amp;#39;를 어릴 때에는 &amp;#39;주말의 명화&amp;#39; 정도에서 다&#xA;번역/더빙된, 그리고 아마 편집에 엄청나게 많이 짤려나갔을 버젼으로&#xA;봤었던거 같은데 아무것도 기억에 남아있지 않았었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;심지어 이번에 다시 디렉터스컷으로 구해서 보면서 내가 기억에 남아 있던&#xA;것들은 완전 다른 영화인 것 같았다. 그렇게 기억만큼 어둡지도 않았고&#xA;오히려 너무 밝아서 오글거렸다. 아마도 좋은 오글거림이지만.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;기억에는 그렇게 남은 이미지는 브라운관 화면과 더빙 품질 등도 한 몫&#xA;했을 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;실은 영어를 어떻게 쓰는지, 처음 단어별로 끊어서 이야기 하는 시점(時&#xA;─)과 그 이후에 사람 이름을 어떻게 발음 하는 것(야스민/재스민 등)&#xA;억양과 발음, 단어 등등 듣고 있으면서 시간이 흘러감에 따라서 변화하는&#xA;것을 봐야 하는 영화인데 더빙이었다면 어떻게 표현했을지 난감할 것&#xA;같다.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 16/Sep/2020</title>
      <link>https://ageldama.github.io/posts/2020-09sep/ping-16wed/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-09sep/ping-16wed/</guid>
      <description>&lt;p&gt;&#xA;그간 작업해오던 일이 있어서 과분하게 고마운 제안, 이미 익숙한&#xA;사람들과, 거기에 훌륭한 이들과 멋진 일을 함께 하자는 제안들을 거절을&#xA;하며 손해를 보며 살고 있었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그리고 그 일은 마무리를 짓고 다시 또 이야기들을 하고 들으며&#xA;돌아다녔다. 그리고 생각보다 훨씬 체력소모가 컸었던 것 같다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;글쓰기, 코딩하기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;지난 기간 동안 해온 작업을 마무리지었고, 앞으로는 다른 일에 매진해야&#xA;  할 것 같다. 하지만 그럼에도 가능하면 너무 흐름을 잃지 않고 글을&#xA;  꾸준히 쓰고 공개하지 않더라도 깃헙에 올리며 살아가야겠다. &lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 14/Sep/2020</title>
      <link>https://ageldama.github.io/posts/2020-09sep/ping-14mon/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-09sep/ping-14mon/</guid>
      <description>&lt;p&gt;&#xA;작년 말, 올해 초만해도, 그때 내가 사람들과 이야기를 하며 기본소득에&#xA;대한 지지를 이야기하면 반응은 시원찮았었다. 자신이 초능력자라고 말하는&#xA;예전 대선에 도전했었던 어느 사람에 비유하며 웃었었고 나는 그런&#xA;반응들이 못마땅했었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;또는 나는 나 자신이 못 가진 자라고 생각해서 은근히 더 공정하고 분배에&#xA;집중한 사회가 되기를 바랬었다. 왜냐하면 내가 더 안정적이고 피곤할&#xA;일들, 혹은 감정적으로도 시달리며 살기는 이미 지친 것 같아서다. 그런&#xA;일들을 감내하게 만드는 것은 경제적 이유였었고 더한 모습들이 우리&#xA;사회에서는 결국 돈 때문일테니까라고 생각해서였다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 12/Sep/2020</title>
      <link>https://ageldama.github.io/posts/2020-09sep/ping-12sat/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-09sep/ping-12sat/</guid>
      <description>&lt;p&gt;&#xA;어떤 개념에 대해 너무도 미신적인 관점을 가진 사람들을 너무 흔하게&#xA;본다. 하지만 그들이 생각하는 것은 그렇게 믿고 싶어서 선택한 신화적인&#xA;모습이라 더 이상하다. 경험에 기반한 성숙함이 다르기 때문이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;하지만 그들이 믿고 싶은 것과 현실은 정반대일수밖에 없다. 그리고 내가&#xA;경험한 바에 따라서도 실제로도 항상 예외를 찾지 못하도록 그렇다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다만 세상을 보는 시각이 아직은 어둡기 때문이거나, 마치 그것이 진실인&#xA;양 주장하고 싶은 이이기 때문이리라.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;어느쪽이건 좋은 일이 있든 힘이 들든 진심으로 축하하고 위로를 할 방법도&#xA;알지 못하거나, 마지 못해 해야하는 상황에서도 그 방법도 의도도 모두&#xA;혼탁해 함께 하면 괴로울 따름이다. 그들이 딱지붙이기를 하고 싶은 이들이&#xA;오히려 비교할 수 없이 인간적이고, 존중과 존경을 받을만한 인격을 갖추고&#xA;있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python에 대한 내 관점</title>
      <link>https://ageldama.github.io/posts/2020-09sep/perspective-on-python/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-09sep/perspective-on-python/</guid>
      <description>&lt;p&gt;&#xA;Python은 조금 지루한 문법의 언어다. 거기에 매크로 같은 기능도 없어서&#xA;항상 평이한 문장을 작성하게 되는 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;하지만 다른 비슷한 언어들과는 다르게, 파이썬 문장 자체는 깔끔하면서도&#xA;density가 높다. 리습, 하스켈 같은 언어들으로 작성한 것을 생각해봐도&#xA;밀도가 높아 표현력이 좋다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Java와 같은 언어는 밀도도 낮고 표현력도 가끔은 너무 아쉽다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;파이썬이 이렇게 밀도가 높을 수 있는 이유는, 언어 자체적으로 매크로를&#xA;지원하거나 해서 문법을 확장하는 방법을 채택하는 것이 아니라 SymPy에서&#xA;그랬었던 것처럼 값을 계속 쌓아갈 수 있게 만들고 연산자를 재정의해서&#xA;문장이 다르게 해석되도록 만드는 방법이고, 이쪽이 더 Pythonic한 방법&#xA;같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 31/Aug/2020</title>
      <link>https://ageldama.github.io/posts/2020-08aug/ping-31mon/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/ping-31mon/</guid>
      <description>&lt;p&gt;&#xA;여름이 끝나가는 느낌이다. 또 무더워지는 날이 며칠 있겠지만 지금은&#xA;가을이 온 것만 같은 밤공기와 풀냄새가 향긋하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 30/Aug/2020</title>
      <link>https://ageldama.github.io/posts/2020-08aug/ping-30sun/</link>
      <pubDate>Sun, 30 Aug 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/ping-30sun/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;프로젝트 마무리&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;문서도 초안을 다 썼고, 마무리 중.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  분산 커밋로그에 저장하고 읽는 것들을 aync. io을 이용해서 실행되도록&#xA;  하고 있다. 처음엔 그냥 C라이브러리 기반으로 된 blocking 버젼으로&#xA;  만족스러울 정도로 빠른 커밋로그라 그럭저럭 괜찮았는데 한개의 실제&#xA;  사이클인 것처럼 줄일 수 있어서.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  또 그냥 failure을 처리하는 부분을 바꾸고, 전체 애플리케이션을&#xA;  특정시점에 더 실제 실행시점처럼 흉내내서 동작하도록 만들 수 있게&#xA;  했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  마무리도 마지막 검증이랑 마쳐가고 있고. 8월도 마무리&#xA;  되어간다. 시간이 빠르다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;&lt;strong&gt;EDIT&lt;/strong&gt; 모두 완료!&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;클라이언트 애플리케이션, 문서, 만족스러운 검증 등등 원하는 것들을 다&#xA;  완료했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 28/Aug/2020</title>
      <link>https://ageldama.github.io/posts/2020-08aug/ping-28fri/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/ping-28fri/</guid>
      <description>&lt;p&gt;&#xA;날씨가 덥고 습하다. 거기에 마스크까지 해야해서 내가 좋아하는&#xA;오래걷기를 하기에 그다지 좋은 시절은 아니다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;문득 생각이 들었다. 아주 얼마 전까지만해도 이런 상황을 대부분의 자기&#xA;자신이 정상이라고 믿고 싶어하는 이들은 모두가 이렇게 살아가는 세상을&#xA;이야기를 들으면 비웃었을 것이다. 그리고 실제로 그런 일들을 많이 보아온&#xA;것 같다. 방독면이나 산소마스크 방호복 대신에 KF94 마스크일뿐인.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;많은 아이디어와 예견들이 맞아들어가는 시절이다. 한편으로는 그런 것을&#xA;이해하고 세상의 변화에 대해서 조금은 알맞게 나 자신이 알아채고 살아온&#xA;것이 뿌듯하면서도 꼭 달갑지는 않기도 하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux 5.8와 TP-Link Archer T2U Plus (RTL8821AU)</title>
      <link>https://ageldama.github.io/posts/2020-08aug/linux-5.8-and-tp-link-archer-t2u-plus-rtl8821au/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/linux-5.8-and-tp-link-archer-t2u-plus-rtl8821au/</guid>
      <description>&lt;p&gt;&#xA;arch-desktop의 커널을 무심코 5.8으로 pacman -Syu 했다가 낭패였다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;USB무선랜이 잡히지 않았다. 그래서 하는 수 없이, FB워크스테이션을&#xA;쓰다가 또 라즈베리파이3에 FB에 달아놓은 realtek USB 무선랜을 붙이고&#xA;유선을 통해 dnsmasq으로 연결해서 고쳐나갔다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;정말 커널 5.8에서 빌드가 잘 되지는 않았다. 그나마&#xA;&lt;a href=&#34;https://github.com/aircrack-ng/rtl8812au&#34;&gt;https://github.com/aircrack-ng/rtl8812au&lt;/a&gt; 이 드라이버가 살렸다.&lt;/p&gt;&#xA;&lt;div class=&#34;src src-text&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt;2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# lsusb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Bus 002 Device 009: ID 2357:0120 TP-Link Archer T2U PLUS [RTL8821AU]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;그것도 DKMS으로 빌드하면 안되고 그냥 &lt;code&gt;make install&lt;/code&gt; 해서 동작하게&#xA;되었다. 다행이었다. &lt;/p&gt;&#xA;&lt;p&gt;&#xA;그리고 나서 나중에도 로딩하도록 /etc/module-load&#xA;&lt;code&gt;/etc/modules-load.d/rtlusb.conf&lt;/code&gt; 에 &lt;code&gt;88XXau&lt;/code&gt; 라인을 넣고 저장.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 27/Aug/2020</title>
      <link>https://ageldama.github.io/posts/2020-08aug/ping-27thu/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/ping-27thu/</guid>
      <description>&lt;p&gt;&#xA;그간 진행해오던 프로젝트는 성능에 대해서 premature optimization을&#xA;고려해서 만들기 보다는 architectural한 면에 비중을 갖고 가능성을&#xA;염두에두고 선택을 해오며 만들었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그럼에도 꽤 괜찮은 성능이었었고, 이제는 첫번째 버젼의 완성과 문서&#xA;작성도 완료한 시점이어서 앞으로 성능을 높일 방안을 고민해보고 실험을&#xA;몇개 수행해서 방법 결정해봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;(현재 사용하는 방법과 새로이 사용할 방안의 이름은 모두 변경했다.)&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;기존 성능 측정은:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;X event-writer&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;commit을 한번에 하지 않고, 매 이벤트마다 수행해서&#xA;느림. (현재는 변경되었음)&lt;/li&gt;&#xA;&lt;li&gt;약 11,196-microseconds (11-ms)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;X journal-writer&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 25/Aug/2020</title>
      <link>https://ageldama.github.io/posts/2020-08aug/ping-25tue/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/ping-25tue/</guid>
      <description>&lt;p&gt;&#xA;the end of the belle époque?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 24/Aug/2020</title>
      <link>https://ageldama.github.io/posts/2020-08aug/ping-24mon/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/ping-24mon/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;&amp;#34;프로젝트&amp;#34;&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;진행해온 프로젝트의 문서를 작성 중.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  문서를 작성하면서 더 보충/보강할 내용들이 튀어나온다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  이 또한 사실 즐겁다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;게임하기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;Doom64 리메이크를 클리어했다. 마지막 레벨에서는 도저히 깰 수 없어서&#xA;  그냥 마지막 한 마리를 잡기 위해서 치트를 켜서 아쉽다. 하지만 그&#xA;  마지막 보스 이전에 타이드는 그냥 제정신으로 다 죽여서 재밌었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  다음 게임은 퀘이크 시리즈를 다시 플레이할까 생각 중. 폴아웃4,&#xA;  스카이림을 다시 로드해서 플레이를 하며 그 세계에서 시간을 보내도&#xA;  좋겠지만 조금은 다른 게임을 하고 싶어서.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping (2nd) 14/Aug/2020</title>
      <link>https://ageldama.github.io/posts/2020-08aug/ping2-14fri/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/ping2-14fri/</guid>
      <description>&lt;p&gt;&#xA;ㅎㅎ좋다. 이제 문서와 추가적인 작은 도구 몇 개를 더 만드는 것만 남았구나.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 14/Aug/2020</title>
      <link>https://ageldama.github.io/posts/2020-08aug/ping-14fri/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/ping-14fri/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;빌드도구의 경험과 Meson을 사용하기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://github.com/ageldama/meson-abc&#34;&gt;Meson-ABC 갖고 놀아본 코드&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  아주 예전에 commercially 성공적이었었던 C++ 프로젝트를 홀로 기획, 설계, 개발했었었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  처음에는 GNU Makefile으로 간단히 시작했었었다. 타겟 플랫폼이 뻔하게 윈도였기 때문이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그 이전에는 ANSI C으로 작성한 &lt;a href=&#34;https://sourceforge.net/projects/sdlhan/&#34;&gt;SDL 조합형 비트맵 출력 오픈소스&lt;/a&gt;&#xA;  라이브러리 같은 것들을 작업할 때는 그냥 GNU Autotools 을 쓰거나&#xA;  했었었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  하지만 그렇게 configure 하거나 할 부분도 없고 처음 혼자 시작하며&#xA;  다른 신경 쓸 것도 무지하게 많았었던 프로젝트였고 더욱이 기간도&#xA;  한정적이었었다.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그리고 SCons 같은 것을 조금 쓰다가, 결국 더 간단히 Rake으로 빌드를&#xA;  작성해 한동안 썼었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 13/Aug/2020</title>
      <link>https://ageldama.github.io/posts/2020-08aug/ping-13thu/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/ping-13thu/</guid>
      <description>&lt;p&gt;&#xA;프비 워크스테이션을 만들어놓고 그렇게 좋은 사양은 절대 아닌 조용한&#xA;슬림PC에서, 또 가능한 마우스를 안 써도 좋게 세팅해놓고 편안하게&#xA;이맥스에서 작업을 해나간다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;FM라디오의 가끔 지글거리는 잡음도 좋은 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;계속해서 신경을 쓰게 만들고 끊기고 광고가 나오고 또 클릭을 유도하고&#xA;멍청하게 징징거리는 것으로 돈으로 바꾸는 요즘의 수많은 다른 매체들보다&#xA;훨씬 나를 편안하게 만든다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다른 매체들도 비슷하지 않을까. SNS도 그런 것 같고 대부분의 앱, 심지어&#xA;운영체제도 그런 환경들과는 다른.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping (2nd) 01/Aug/2020</title>
      <link>https://ageldama.github.io/posts/2020-08aug/ping2-01sat/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/ping2-01sat/</guid>
      <description>&lt;p&gt;&#xA;지난번 포스팅에서 이야기한 것처럼, 인연이 있던 창업자가 새로 창업한&#xA;회사에 제안이 있었었다. 더 없이 아쉬운 기회이고 미안했지만 내가 하고&#xA;있던 일을 계속하고 싶어서 아쉬운 기회이지만 거절했다. 내 능력에 벅찬&#xA;일일 것이고, 또 내게 손해가 있겠지만 내가 결심한바대로 해나가는 것이&#xA;내게는 맞는 일이란 생각이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;이미 당시에 한국에서 유명한 기업으로부터 창업한지 얼마 되지도 않아&#xA; 투자를 잘 받고, 안정적으로 성장할 준비를 하고 있었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그 키워드의 기술을 당시에 연구하고 공개한 MS 이외에도 IBM에서도&#xA;오픈소스로 작업한 툴킷을 공개하고 실용적인 단계에서 활용이 가능한&#xA;형태로 공유를 시작했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 01/Aug/2020</title>
      <link>https://ageldama.github.io/posts/2020-08aug/ping-01sat/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-08aug/ping-01sat/</guid>
      <description>&lt;p&gt;&#xA;오랬만에 내 환경을 더 다듬었다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;Emacs, Evil, General.el.&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;매일 이맥스에서 코딩을 하면서 조금은 Vim보다 키바인딩이 편집에&#xA;    불리한 것 같았었다. 그렇다고 Vim을 쓰고 싶지는 않았다. 검색이나&#xA;    다중편집 같은 이맥스만의 기능을 Vim에서 흉내내는 것은 별로 마음에&#xA;    차지 않는 정도이고 또 화면 flickering도 이맥스 GUI을 쓸 때보다&#xA;    터미널 Vim은 심해서 난 피곤해.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;    그래서 Evil-mode을 종종 썼는데 문제는 내가 만들어놓은 general.el&#xA;    키바인딩들이 Evil을 고려하지 않고 만들어서 evil모드를 toggle하며&#xA;    써야했었었다. 특히 내 이맥스 모드에서의 키바인딩의 prefix이&#xA;    C-z인데, evil-mode에서는 emacs mode으로 전환을 위해서 사용.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 24/Jul/2020</title>
      <link>https://ageldama.github.io/posts/2020-07jul/ping-24fri/</link>
      <pubDate>Fri, 24 Jul 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-07jul/ping-24fri/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;여름방학을 보내고 왔다.&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;지난 한달여, 꽤 즐겁게 보낸 것 같다. 그리고 순수하고 맑은 마음으로&#xA;  행복했었던 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  하늘도 여름 같이 맑고 파랗고 공기도 좋았었다. 매일 열심히 집중해서&#xA;  일할 수 있었고 좋았다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그리고 그렇기 때문에 조금은 아련하다. &lt;/p&gt;&#xA;&lt;p&gt;&#xA;  이런 느낌.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;(기쿠지로의 여름 OST) Summer / 히사이시 조&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/_t1KvFMUNws&#34;&gt;https://youtu.be/_t1KvFMUNws&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;Games: Doom 64, Ion Fury.&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;Doom 64을 플레이. 클래식 둠, 둠2이랑은 또 완전히 다른&#xA;  게임이었음. 몬스터들 모델링, 음악, 레벨디자인 모두 완전히 새로&#xA;  만들어서 재밌었다. 그리고 꽤 다른 분위기라서 플레이하기 좋았다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 19/Jul/2020</title>
      <link>https://ageldama.github.io/posts/2020-07jul/ping-19sun/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-07jul/ping-19sun/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;쉬는 날.&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;그간 4개월 정도 집중해온 작업이 어느 정도 궤도에 올라갔다. 앞으로도&#xA;  더 많은 작업을 해야겠다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  하지만 일요일이고, 오늘 하루는 조금 마무리 작업을 해놓고 휴식을 할까&#xA;  마음 먹었다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;1Q84, 하루키 소설 영문판 읽기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;군생활을 할 때 시간을 쪼개서 영문판 책들을 많이 읽었었다. 진중문고와&#xA;  그밖에 휴가를 다녀온 사람들이 놓고간, 세월이 흘러가며 쌓여있는&#xA;  아무도 읽지 않는 좋은 책들을 많이 읽었었던 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그중에는 아직도 다시 읽고 싶은 책들과 좋아하는 작가와 철학자들이&#xA;  많이 생겼었던 것 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 17/Jul/2020</title>
      <link>https://ageldama.github.io/posts/2020-07jul/ping-17fri/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-07jul/ping-17fri/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;GitHub &amp;#34;Arctic Code Vault Contributor&amp;#34;이 되었다.&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ageldama.github.io/images/2020-07jul/gh-arctic-code-vault-contributor.png&#34; alt=&#34;/images/2020-07jul/gh-arctic-code-vault-contributor.png&#34; title=&#34;/images/2020-07jul/gh-arctic-code-vault-contributor.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;우연히 기여한 몇몇 프로젝트들이 보관되기로 결정됐나보다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;2020년의 코딩.&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ageldama.github.io/images/2020-07jul/gh-ageldama-2020jul.png&#34; alt=&#34;/images/2020-07jul/gh-ageldama-2020jul.png&#34; title=&#34;/images/2020-07jul/gh-ageldama-2020jul.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;중간에 비는 부분들이 있지만. ㅎㅎ 공개한 오픈소스 저장소도 2~3개이고,&#xA;가장 많은 비중을 차지하는 것은 비공개로 진행하고 있는 저장소 1개.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;기간으로 봐도 3~4개월이 되어간다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ageldama.github.io/images/2020-07jul/pytest-pylint-mypy.png&#34; alt=&#34;/images/2020-07jul/pytest-pylint-mypy.png&#34; title=&#34;/images/2020-07jul/pytest-pylint-mypy.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;검증 가능하게 꼼꼼히 만들면서 성취감이 크다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ping 08/Jul/2020</title>
      <link>https://ageldama.github.io/posts/2020-07jul/ping-08wed/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-07jul/ping-08wed/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;배워가기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;올 한해의 절반이 지나갔다. 그리고 중요한 시점에 정말 좋은 결정을&#xA;  내렸던 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  생각과 관점이 더 발전하고 그에 따라 삶도 더 변화해갔다. 어떤 것들을&#xA;  거쳐서 어떻게 변화했는지는 쓰고 싶지는 않다. 그리고 어째서 인터넷에&#xA;  그런 글들이 생각보다 잘 없는지 이제는 조금 이해할 수 있어서 굳이 쓸&#xA;  생각도 없다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  너무 당연한 원인, 행동 그리고 결과의 연결이라 만족스럽다. 앞으로의&#xA;  삶을 바라보는 관점도 많이 변했고 더 없이 행복하다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ping 29/Jun/2020</title>
      <link>https://ageldama.github.io/posts/2020-06jun/ping-29mon/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-06jun/ping-29mon/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;이해하기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;읽고 생각하고, 글을 쓰고 살아온 방법과 길에 대해서, 만난 이들과의&#xA;  일화들에 대한 이해가 더욱 깊어진 것 같다. 그리고 내가 내린 판단과&#xA;  결정이 만족스러운 것이었었다. 더욱 명확한 기분이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  하던 생각들이, 꽤 정확하게 파악했었더라, 그를 기반해 예측한 것이&#xA;  맞는 것을 알게 될 때면 더욱 만족스러운 기분이 든다. &lt;/p&gt;&#xA;&lt;p&gt;&#xA;  훌륭한 이들, 존경스러운 이도 있고, 한편으로는 말을 꺼내기도 한심해질&#xA;  정도의 이도 있다. 정말 안타까운 느낌이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  정말 시간은 위대하다는 생각을 한다. 내가 시간의 역할을 욕심내어서는&#xA;  안되겠다는 생각도 한다. &lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 16/Jun/2020</title>
      <link>https://ageldama.github.io/posts/2020-06jun/ping-16tue/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-06jun/ping-16tue/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;FreeBSD을 조금 오래된 컴퓨터에 계속 사용하기.&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;매일 업무를 보는데에 메인 피씨, 랩탑은 여전히 아치리눅스를 잘 쓰고&#xA;  있다. 그리고 조금 사양이 부족한 사이드킥 피씨 본체에는 FreeBSD을&#xA;  여전히 설치해놓고 쓰고 있다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  처음 생각보다 훨씬 더 많이 활용하게 되는 것 같다. 그리고 훨씬&#xA;  가볍게, 안정적이고 강력한 느낌이다. 물론 오히려 리눅스가 더&#xA;  빠르다거나 안정적인 부분들을 금새 발견할 수 있다. 그리고 리눅스와&#xA;  동일하게 쓰려고 들지 않는게 더 속편한 부분도 많다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  예를 들어, 당연히 Steam 같은 것은 기대를 안한다. 그리고 의외로&#xA;  USB스택은 리눅스에 비해서 종종 실망스럽고, 다양한 파일시스템 지원도&#xA;  그렇다. FUSE을 통해서 리눅스처럼 다양한 파일시스템을 지원하지만&#xA;  그렇게 안심하고 쓸만한 것은 아닌 것 같다. (몇 개의 경험을 해보고&#xA;  나니)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 06/Jun/2020</title>
      <link>https://ageldama.github.io/posts/2020-06jun/ping-06sat/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-06jun/ping-06sat/</guid>
      <description>&lt;p&gt;&#xA;조금 더 혼자 진행해오던 일을 계속하기로 결정했다. &lt;/p&gt;&#xA;&lt;p&gt;&#xA;좋은 사람들과 스타트업임을 알고 있고, 이전에 함께 일하면서도&#xA;인격적으로나 능력적으로 모두 훌륭한 사람들임을 잘 알고 있다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그럼에도 나 자신이 이번엔 더 차이를 만들어야겠다고 결심했던 것을&#xA;끝까지 해나가고 싶어서다. 합류하면 정말 많은 부분 이득이 많겠지만,&#xA;개인적으로도 많이 힘든 고민을 하고 결정을 내렸다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>코드 편집기에 대한 생각</title>
      <link>https://ageldama.github.io/posts/2020-05may/editors/</link>
      <pubDate>Thu, 28 May 2020 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-05may/editors/</guid>
      <description>&lt;p&gt;&#xA;코드 편집기를 어떻게 써왔었는지 잠깐 생각해봤다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;DOS시절: MS-DOS Editor.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GW-BASIC 시절에는 정말&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/MS-DOS_Editor&#34;&gt;https://en.wikipedia.org/wiki/MS-DOS_Editor&lt;/a&gt; 을 열심히 썼었던 것&#xA;같다.&lt;/li&gt;&#xA;&lt;li&gt;그리고 그 다음엔 &lt;a href=&#34;https://en.wikipedia.org/wiki/PowerBASIC#PowerBASIC_for_DOS_(PBDos)&#34;&gt;PowerBASIC for DOS&lt;/a&gt; 열심히 썼었다. QuickBASIC&#xA;같은 바이트코드으로 컴파일해서 .exe 파일에 인터프리터와&#xA;바이트코드를 embedding 하는 VB의 P-code 같은 가짜 컴파일 방식&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;이&#xA;아니라 정말 네이티브 코드로 컴파일해주고, 인라인 어셈블리와&#xA;메모리 조작이 가능한 베이직 컴파일러, IDE여서 좋은 환경이었던&#xA;것 같다.&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;터보C 2.0 편집기. PowerBASIC이랑 유사해서 익숙하게 쓸 수 있었던&#xA;것 같다. 파워베이직도 그렇지만, 의외로 도스시절의 이런 IDE들이&#xA;F1 - Help 메뉴에서 항목별로 문서 정리가 잘 되어 있어서 읽으면서&#xA;즐거웠었던 것 같다. (초등학생~중학생이어서 영어를 잘 이해하지는&#xA;못했지만)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 28/May/2020</title>
      <link>https://ageldama.github.io/posts/2020-05may/ping-28thu/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-05may/ping-28thu/</guid>
      <description>&lt;p&gt;&#xA;5월, 요즘은 매일이 날씨와 공기가 아름답다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;지금처럼 참 행복하게 지내기 좋은 계절인 것 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 23/May/2020</title>
      <link>https://ageldama.github.io/posts/2020-05may/ping-23sat/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-05may/ping-23sat/</guid>
      <description>&lt;p&gt;&#xA;지난 2달여간 매일 같이 몰입해 매진한 작업의 성능 테스트를&#xA;진행했다. 그리고 매 시점마다 테스트와 측정 결과에서 놀라던 것과&#xA;마찬가지 포인트에서 많은 관점이 변화한다. 아직도 많은 일을 더&#xA;해나가야겠지만 그래도 지금은 이 정도에서 우선은 만족스럽다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;작년과 재작년, 그 이전에는 매 일터마다 배울 점들이 있었던 것&#xA;같다. 그리고 지난 포스팅에도 말했듯이 내 많은 관점들을 발전시켜준 좋은&#xA;사람들과 멋진 경험들을 했었던 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다만 올해 잠시 조인했었던 곳에서는 정반대의 경험이었었다. 많은, 이미&#xA;알고 있는 것들을 다시 확인했는데 그것들은 나 자신으로부터 배운 것들과&#xA;타산지석의 가르침들이었었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 18/May/2020</title>
      <link>https://ageldama.github.io/posts/2020-05may/ping-18mon/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-05may/ping-18mon/</guid>
      <description>&lt;p&gt;&#xA;오랬만에 예전 직접 같이 일한 것은 아니지만, 같은 회사에서 일하던&#xA;사람을 만나 오래 이야기를 나눴다. 많은 이야기를 해준 덕분에 재미있는&#xA;이야기들을 많이 알게 됐다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;누군가를 만나고 아주 조금이라도 시간을 함께 하면 언제나 놀랍다. 나&#xA;자신을 변화시키는 경험을 하게 해주는 이였다. 아주 짧은 단편적인&#xA;일화들만을 경험해도 그렇게 해주는 이를 만나 이야기를 나누는 것은&#xA;감사하다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;지나간 사람들과 시간들을 최근에 생각해보며 어떤 사람들이 어떻게 내&#xA;생각에 영향을 주었는지를 보았다. 그리고 감사한 이들이 많이&#xA;떠올랐다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Void Linux &#43; Runit으로 데스크탑/랩탑 환경 설정하기</title>
      <link>https://ageldama.github.io/posts/2020-04apr/void-linux/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-04apr/void-linux/</guid>
      <description>&lt;p&gt;&#xA;지난 한 달여간 눈코 뜰새 없이 바쁘게 지냈었다. 그렇게 지내다가&#xA;오랬만에 툭닥거려봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;재미로 &lt;a href=&#34;https://voidlinux.org/&#34;&gt;Void Linux&lt;/a&gt;을 설치해봤다. 사실 설치해보고 한적은 꽤 됐고, 메모리&#xA;사용량이 훨씬 가볍고 빠른 성능 때문에, Arch Linux도 충분히 가볍고&#xA;좋지만, 제대로 설정해서 사양이 좋지 않은 랩탑, 데스크탑들을 위해서&#xA;쓰기로 생각하고 있었었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;2007년 정도에 Gentoo Linux으로 회사 데스크탑과 Oracle DBMS 서버를&#xA;재밌게 설정한 이후로, 오랬만에 정말 가벼운 리눅스 배포판을 설치하는&#xA;느낌이었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;아치리눅스는 Pacman, Makepkg, AUR 같은 것들도 체계가 잘 잡혀있고,&#xA;오히려 Portage 보다 잘 관리되고 괜찮지 않은가 싶기도 할 때가 많아서&#xA;굳이 Gentoo을 다시 쓸 일은 없을 것 같다. 그리고 FreeBSD의 Ports도&#xA;좋지만, AUR에 비해서 포함하는 패키지, 업데이트 빈도가 다른&#xA;느낌이다. 사실 AUR이 정말 빈도가 높은 편이라 그렇겠지. FreeBSD Ports도&#xA;정말 열심히 업데이트 되지만.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 25/Apr/2020</title>
      <link>https://ageldama.github.io/posts/2020-04apr/ping-25sat/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-04apr/ping-25sat/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;계속해서 글을 쓰기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;내용은 없음 *&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Grub2, Archlinux ISO으로 만능 USB 메모리스틱 만들기</title>
      <link>https://ageldama.github.io/posts/2020-02feb/make-grub2-usb/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-02feb/make-grub2-usb/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;경고&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&amp;#34;만능USB&amp;#34;이란 말은 사실 &lt;strong&gt;과대광고입니다&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  하지만, 몇 가지 장점이 있는 USB 메모리스틱을 만드는 방법임:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;아치리눅스 설치ISO 이미지으로 부팅 가능한 USB 스틱이면서도,&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ISO파일의 용량만큼만 USB메모리를 활용하는 것이 아니라,&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;용량이 되는만큼 그냥 일반적인 메모리스틱처럼 파일 복사용으로도&#xA;쓸 수 있음.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;사실 리눅스든 다른 OS의 설치 이미지를 USB메모리에 올리면, 딱 그 설치&#xA;  이미지만큼만 사용할 수 있게 만들어 버리고, 그나마도 Read-only 상태인&#xA;  ISO이 되어버리고, 더더욱 나쁘게 다른 추가 파티션을 만들어서 남는&#xA;  공간을 활용할 수도 없게 만든다. (파티션 이미지가 아니라&#xA;  디스크이미지인가보다.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 22/Feb/2020</title>
      <link>https://ageldama.github.io/posts/2020-02feb/ping-22sat/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-02feb/ping-22sat/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;내가 책상을 쓰는 방법, 고물 컴퓨터를 고쳐 쓰기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;오래된 피씨 본체를 얻었다. 슬림한 케이스의 삼성 컴퓨터.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  윈도7 설치된 것도 꽤 가볍고 빠르게 정리되어 있었다. 그냥 FreeBSD을&#xA;  처음에는 설치하려고 하다가, 결국 애플리케이션이나 그냥 적당히 잘&#xA;  돌아가는, 이맥스 정보만 잘 동작하는 기계면 될 것 같아서 아치리눅스를&#xA;  설치.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  만족스럽다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  데스크탑 원래 사용하던 것도 그렇게 엄청나게 좋은 것은 아니지만&#xA;  만족스러운 사용인데, 문제는 책상 가운데에 모니터랑 키보드를 놓고&#xA;  쓰면 책을 읽을 자리가 없어져서 항상 키보드 등을 한 켠으로&#xA;  밀어놓는다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 15/Feb/2020</title>
      <link>https://ageldama.github.io/posts/2020-02feb/ping-15sat/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-02feb/ping-15sat/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;새벽, 이른 저녁, 풍경과 공기, 일상, 꾸준함&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;매일 이른 새벽에 깨어나 일정한 방식으로 하루를 보낸다. 만족스럽다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  매일 매일 조금씩 다른, 하지만 같은 궤도를 걷는다. 그리고 궤도는&#xA;  조금씩 변해가겠지.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  춥거나 공기가 좋지 않거나. 하지만 그래도 일상은 매일매일이 귀한&#xA;  시간이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  꾸준히 이렇게 살아가면서 행복하다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;트위스비 에코&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;매일 일터에서 집에서 메모, 스케치를 하고 글을 쓸 때 만년필을 여전히&#xA;  쓴다. 결국 계속해서 꾸준히 쓰는 만년필은 라미 사파리와 트위스비&#xA;  에코.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  라미 사파리는 잉크를 다 쓰고 나면 잘 씻어서 보관을 해둘까 생각하고&#xA;  있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 09/Feb/2020</title>
      <link>https://ageldama.github.io/posts/2020-02feb/ping-09sun/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-02feb/ping-09sun/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;책: 초난감 기업의 조건&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&amp;#39;기계인간&amp;#39;님의 트윗으로 소개를 받았다. 너무 잘 소개를 해주셔서&#xA;  기대가 많았다. 그리고 기대만큼 재밌는 책이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  경영서적, 마케팅, 혹은 자기계발서처럼 무언가 교훈을 얻고 싶어서&#xA;  읽지는 않는다. 그냥 다른 사람들의 처절한 실패담과 그 아둔함을 보면서&#xA;  쓰게 웃고 싶을 뿐이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그 사람들이 얼마나 멍청했는지는 잘 모르겠다. 그리고 그걸 비웃고 싶은&#xA;  것은 아니다. 오히려 사람들이 그런 멍청함을 구현해내는 분위기, 흐름,&#xA;  예의를 지키느라, 혹은 눈치를 보느라 제대로된 길에 들어서지 못하는&#xA;  어떤 형태의 인간 사회에 대해 그렇게 냉소하고 싶어지게 만든다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>100일의 기록</title>
      <link>https://ageldama.github.io/posts/2020-01jan/100days-of/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-01jan/100days-of/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://ageldama.github.io/images/2020-01jan/100days.png&#34; alt=&#34;/images/2020-01jan/100days.png&#34; title=&#34;/images/2020-01jan/100days.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;어느 날이었을지, 기록과 기억이 생생하다. 왜인지는 모르겠지만, 그날&#xA;새벽부터 앞으로 100일간 시도해보고 싶은게 생겼다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 그 당장 시작했다. 그리고 별로 해낸 것도 없는 주제에 당당하게&#xA;만족스러운 기분으로 &amp;#34;1일&amp;#34;과 그날 날짜를 필기 노트에 적었다. 그리고 그&#xA;다음 날, 또 다음 날.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그렇게 100일을 채웠다. 매일 나는 행복했다. 고요함, 주변에서 일어나는&#xA;일들을 내려놓고 평화로웠다. 그리고 수 많은 것들을 다시 생각하고&#xA;무엇보다 생각을 비울 수 있었다. 덕분에 이제는 관점과 행동이 더 많이&#xA;변한 것 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Covariant, Contravariant, Invariant등 Type Variances 이해하기</title>
      <link>https://ageldama.github.io/posts/2020-01jan/type-variances/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:02 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-01jan/type-variances/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://blog.daftcode.pl/covariance-contravariance-and-invariance-the-ultimate-python-guide-8fabc0c24278&#34;&gt;거의 그대로 베껴온 원본 글&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;계약서로서의 타입&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;타입을 생각할 때, &amp;lt;계약서&amp;gt;로 생각하는 것이 편하다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  왜냐하면, 전달한 값이 그 타입의 범위 안에서 전달 받은 쪽에서&#xA;  취급이 제한된다는 보장이 있어야 안전한 코드를 컴파일러는 생성해줄 수&#xA;  있다. (혹은 그렇게 안전한지 체크를 해준다.)&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;Subtype, 일반화(Generalization), 특화(Specialization)&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;타입을 말할 때, 나는 보통 객체지향언어에서의 클래스의 상속 관계를&#xA;  떠올린다. 꼭 그렇지는 않겠지만, 이 글에서도 그렇게 설명을 해보겠다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  이 글에서는 계속 다음 3개의 타입이 있고, 다음과 같은 관계라고&#xA;  가정하겠다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs 시작 시간 빠르게 만들기</title>
      <link>https://ageldama.github.io/posts/2020-01jan/esup-emacs-init-speed/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-01jan/esup-emacs-init-speed/</guid>
      <description>&lt;p&gt;&#xA;이맥스 설정이 조금씩 자라날 때마다 이맥스를 새로 시작하는 시간도&#xA;길어져서 짜증이 슬슬나기 시작했다. 그래서 조금 개선해봤다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;Quelpa + MELPA 거절하기&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/quelpa/quelpa&#34;&gt;Quelpa&lt;/a&gt; 을 이용해서, MELPA등에 등록된 패키지가 아닌 내가 작성해서&#xA;  GitHub에 올려놓고 사용하는 패키지를 Git으로 받아서 등록해&#xA;  사용한다.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그런데, 어차피 use-pacakge을 이용해서 MELPA 등 패키지를 받아와서&#xA;  사용하는데, 불필요하게 MELPA 인덱스를 시작할 때마다 받아오고&#xA;  한다는걸 알게 됐다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  당연히 껐다. 한참 빨라졌다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  참고: &lt;a href=&#34;https://github.com/quelpa/quelpa#inhibit-melpa-git-checkout-or-updates-on-init&#34;&gt;Inhibit MELPA git checkout or updates on init&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;esup profiler&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;Elisp 자체는 프로파일링이 가능한데&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-2&#34; href=&#34;#footnote-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, &lt;code&gt;$HOME/.emacs&lt;/code&gt; 같은 init&#xA;  file을 실행하는 시간은 측정이 어려운거 같아서 검색해봤다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&lt;소프트스킬&gt;, &lt;커뮤니케이션 스킬&gt;은 어떻게 한국 사회에서 괴물을 만드는지</title>
      <link>https://ageldama.github.io/posts/2020-01jan/real-communication-skills/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-01jan/real-communication-skills/</guid>
      <description>&lt;p&gt;&#xA;우선 이야기를 시작하기 전에 일러두고 싶다. 내게 &amp;lt;소프트스킬&amp;gt;&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;은&#xA;매우 재밌게, 유용하게 읽은 책이었다. (2016년에)&lt;/p&gt;&#xA;&lt;p&gt;&#xA;이 이야기는 사실 커뮤니케이션스킬, 소프트스킬을 권장하고, 어떻게&#xA;해야 할까 하는 고민에서 나오는, 또한 그런 정말 중요한 것이 어떻게&#xA;(적어도 내가 느끼기엔) 이상한 괴물을 옹호하기 위해 변질되어 쓰이는지에&#xA;대한 것이다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;&amp;lt;사회생활&amp;gt;, &amp;lt;원만함&amp;gt;에 대해&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;나는 자라오며 계속해서 잔소리를 들어왔다. 말해주는 사람들은 내&#xA;  아버지와 몇몇 친척 형, 주변 친구들이었다. 그리고 하나도 그런 말들을&#xA;  새겨 듣지 않았고, 잘했다고 생각한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lisp에서 Dynamic/Lexical Binding와 JavaScript의 var/let</title>
      <link>https://ageldama.github.io/posts/2019-12dec/lisp-dynamic-and-lexical-bindings-and-js/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/lisp-dynamic-and-lexical-bindings-and-js/</guid>
      <description>&lt;p&gt;&#xA;다음의 간단한 코드를 읽어보자.&lt;/p&gt;&#xA;&lt;div class=&#34;src src-js&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;lexical&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dynamic&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;???&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;&lt;code&gt;maker()()&lt;/code&gt; 의 결과는 &lt;code&gt;&amp;#39;dynamic&amp;#39;&lt;/code&gt; 이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;심지어, 맨 마지막에 있는 &lt;code&gt;{..}&lt;/code&gt; 블록을 넘어가서도 &lt;code&gt;x&lt;/code&gt; 의 값은 여전이&#xA;&lt;code&gt;&amp;#39;dynamic&amp;#39;&lt;/code&gt; 이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;자바스크립트에서 binding은 어딘가 이도 저도 아니게 심각하게 고장난&#xA;느낌이다. 이 글에서 이야기할 lexical binding이나 dynamic binding에도&#xA;속하지 않는 느낌이고, 이번에 새로 추가된 &lt;code&gt;let&lt;/code&gt; 도 이해하기가 어려운게&#xA;아니라 그냥 제대로 망가져 있는거 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>direnv &#43; direnv-mode 이맥스 지원 &#43; C/C&#43;&#43;/Python등 프로젝트 설정 적용하기</title>
      <link>https://ageldama.github.io/posts/2019-12dec/direnv/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/direnv/</guid>
      <description>&lt;p&gt;&#xA;프로젝트의 빌드 디렉토리, virtualenv와 같은 경로의 설정, &#xA;경로 설정에 따른 빌드/실행/테스팅/스크립트을 편하게 하려고 만든&#xA;&lt;a href=&#34;https://ageldama.github.io/posts/2019-12dec/moonshot-1st-rel/&#34;&gt;moonshot.el&lt;/a&gt; 와 유사한걸 검색해봤다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;몇 가지&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;이런 비슷한게 몇 가지 있는데, 내 상황에 쓸만한 것은 direnv&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;NPM: dotenv&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/dotenv&#34;&gt;https://www.npmjs.com/package/dotenv&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Node.js에서 Unix environment variable으로 &lt;code&gt;.env&lt;/code&gt; 파일을 로딩해주는&#xA;역할인 듯.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Shell에서 Hook 걸어서 사용하기엔 별로 인거 같았다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그리고 Node.js 이외의 프로젝트에 적용하려면 매번 JS으로 wrapper을&#xA;짜주고 하기 싫었고,&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;code&gt;.env&lt;/code&gt; 파일이 그냥 정적인 key-value 문자열의 나열이라, 파일시스템에서&#xA;경로를 조립하고 하는데 별로라는 생각이 들었다. 항상 절대 경로만&#xA;표기하거나, &lt;code&gt;getenv&lt;/code&gt; 해서 문자열을 가져와서 상대 경로 등으로 지정된&#xA;값을 매번 절대 경로로 만드는 작업을 해야할테니까.&lt;/p&gt;</description>
    </item>
    <item>
      <title>moonshot.el 최초 릴리즈</title>
      <link>https://ageldama.github.io/posts/2019-12dec/moonshot-1st-rel/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/moonshot-1st-rel/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/moonshot&#34;&gt;moonshot.el&lt;/a&gt; 을 만들어서 공개했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;이맥스를 써오면서 불편하다고 생각한걸 간단히 하고 싶었었다:&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;불편함들&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;빌드 디렉토리&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;   Projectile을 사용하니까 프로젝트 디렉토리는 관리가 쉬운데, 빌드&#xA;   디렉토리는 관리가 어려웠다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;아예 Projectile이 추론하는 디렉토리 바깥에 빌드 디렉토리는&#xA;위치하는 경우도 있으니까.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;예) GNU Autotools &lt;code&gt;configure&lt;/code&gt; 이나 CMake으로 작업할 때,&#xA;소스트리 바깥에 빌드 디렉토리를 걸어놓아서 정리를 깔끔하게 할&#xA;수 있으니까.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;그런데 이 &amp;#39;빌드 디렉토리&amp;#39;가 중요한게,&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;말그대로 컴파일한 &lt;code&gt;.o&lt;/code&gt; 파일이나 최종 결과 실행파일 등이&#xA;여기에 쌓이니까&lt;/li&gt;&#xA;&lt;li&gt;디버깅, 테스트를 위해서 실행파일을 실행하거나,&lt;/li&gt;&#xA;&lt;li&gt;심지어 &lt;code&gt;make&lt;/code&gt; 이나 &lt;code&gt;ninja&lt;/code&gt; 같은 빌드 커맨드를 실행하기&#xA;위해서도 빌드 디렉토리를 지정하거나 이동해서 실행해야 하니까&#xA;귀찮다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-3&#34;&gt;&#xA;compilation-mode, realgud: 실행 파일 찾아서 실행하기, 디버깅하기&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;   예전에 만들어 써오던 &lt;a href=&#34;https://github.com/ageldama/configs/blob/a24f4606cd95a41c9d3140dac7c0c298883ae72a/emacs/c-c%252B%252B-gtags%252Brtags.el#L193&#34;&gt;이맥스를 위한 C/C++ 설정&lt;/a&gt; 처럼,&lt;/p&gt;</description>
    </item>
    <item>
      <title>2018, 2019년을 돌아보며</title>
      <link>https://ageldama.github.io/posts/2019-12dec/look-back-2018-2019/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/look-back-2018-2019/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;&amp;#34;일의 기쁨과 슬픔&amp;#34;&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;2018년은 정말 바쁘게 회사에 시간을 쏟으며 보낸거 같다. 그렇다고&#xA;  개인적인 발전이나 성과를 얻을만한 일은 아니었다. 오히려 알던 것들을&#xA;  소비하고 엔지니어링 이외의 분야에 많은 흥미로운 경험과 성장을 했던거&#xA;  같다. 그리고 한국을 떠날때 싫었던 점들을 역시 그대로 느낄 수 밖에&#xA;  없었던거 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그리고 2019년에는 한국에서 다시 시작했었던, 내겐 그다지 만족스럽지&#xA;  못했던 회사생활을 정리했다. 정리하는데 반년 정도가 걸렸다. 나도&#xA;  우유부단하게 괜한, 그리고 헛된 기대를 했었기 때문에 시간을 오래&#xA;  끌었었는데, 문제를 경험하고 처음 받았던 인상과 결정이 맞았다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hololog Perl/CLI 버젼</title>
      <link>https://ageldama.github.io/posts/2019-12dec/hololog-perl-cli-1st-rel/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/hololog-perl-cli-1st-rel/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/hololog-perl-cli&#34;&gt;https://github.com/ageldama/hololog-perl-cli&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;한줄씩 메모를 하는걸 좋아하고, 그냥 데스크탑에서 PDF을 읽거나&#xA;웹페이지를 읽으면서 어딘가에 생각난거나 이해한걸 필기하면서 진행하고&#xA;싶어서 만들었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다음 트윗 타래에서 이야기한것처럼, 그냥 트위터 비밀계를 써도 괜찮지만,&#xA;그것도 너무 웹브라우져 열고 하다보면 산만해져서.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;tweet 1206138361968070656 &lt;/p&gt;&#xA;&lt;p&gt;&#xA;처음 시작은 &lt;a href=&#34;https://www.gnu.org/software/coreutils/manual/html_node/cat-invocation.html&#34;&gt;Unix/GNU cat&lt;/a&gt; 을 간단하게 터미널에서 쓰면 된다는 생각이&#xA;들었다.&lt;/p&gt;&#xA;&lt;div class=&#34;src src-shell&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &amp;gt;&amp;gt; foo.txt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;..그런데 유닉스가 아닌 사람들, 윈도를 쓰는 사람들은 어떻게 하지?&lt;/p&gt;&#xA;&lt;div class=&#34;src src-shell&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;copy con foo.txt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;..사실 위와 같이 &lt;code&gt;cmd.exe&lt;/code&gt; 에서 실행해도 되겠지만, 뭔가 그래도 윈도&#xA;사용자들이나 터미널 화면을 무서워하는 사람들이 저런거&#xA;좋아할까.. 싶어서 조금 생각.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Org모드에서 스프레드시트 기능과 Babel 섞어쓰기</title>
      <link>https://ageldama.github.io/posts/2019-12dec/org-spreadsheet-and-babel/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/org-spreadsheet-and-babel/</guid>
      <description>&lt;p&gt;&#xA;쩌는 &lt;a href=&#34;https://seorenn.github.io/org-spreadsheet.html&#34;&gt;Org-mode Spreadsheet 소개&lt;/a&gt; 를 읽고 감명 받아서 따라해봅니다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다른 부분은 만족스러웠는데, 조금 복잡한 elisp식을 쓰기 귀찮으니, 미리&#xA;&lt;code&gt;defun&lt;/code&gt; / &lt;code&gt;defmacro&lt;/code&gt; 으로 정의해놓고 그걸 spreadsheet에서 불러 쓸 수&#xA;있을지가 궁금했습니다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 다음과 같이 해보면 가능할지를 실험:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Org-Babel으로 원하는 함수를 정의한다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;그리고 Org 파일이 로딩될 때 평가하도록 속성을 지정해놓는다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Spreadsheet에서 불러서 쓸 수 있는지 확인해본다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;우선 &lt;code&gt;C-h a&lt;/code&gt; 을 눌러 &lt;code&gt;vsum&lt;/code&gt; 을 검색해보니, &lt;code&gt;defun calcFunc-vsum (&amp;amp;rest&#xA;vecs)&lt;/code&gt; 으로 미리 선언되어 있는거 같았습니다. 이런 형태로 내가 정의하는&#xA;함수도 구현해보면 될까 싶습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>원하는 웹브라우져, 웹환경, 그리고 익숙하지만 싫은 어떤 신앙체계</title>
      <link>https://ageldama.github.io/posts/2019-12dec/the-web-and-the-free-world/</link>
      <pubDate>Wed, 11 Dec 2019 02:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/the-web-and-the-free-world/</guid>
      <description>&lt;p&gt;&#xA;  지금의 웹환경은 너무 과도한 치장, 보이는 이미지 중심이어서 딱&#xA;  한가지 측면을 제외하고 모든 면에서 정말 끔찍하다는 생각이&#xA;  들었다. 하긴 그러니 많은 사람들이 열심히 쓰는걸지도 몰라.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그래서 정말 많은 사람들이 오히려 그런 치장, 자바스크립트로 덩어리진&#xA;  화면을 로딩 하느라 보이지 않는 시간을 조금씩 모아서 낭비하고 있다는&#xA;  생각도 든다. …그리고 또 그걸 만든다고 시간은 버려지고. 그렇게&#xA;  모두가 하는 방식대로 하는 수 밖엔 다른 방법을 모르겠고, 그렇게&#xA;  만들어가는 자바스크립트, 프론트엔드 개발자들의 시간도 마찬가지고.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  더욱이 그런 &amp;lt;예쁘고 조잡한&amp;gt; 화면이 정보의 전달도, 명확하게 사람들이&#xA;  사용할 수 있는 화면을 만들어 준다고 생각지도 않는다. 컴퓨터에 조금&#xA;  관심이 없는 사람도 조금 평균적인 기준이랑 다르거나, 그런 평균적인&#xA;  기준을 따라가려고 흉내와 고생은 많이 했지만 그러지는 못한 사이트를&#xA;  써보라고 한다면 당혹한다. 나는 그렇다. 차라리 단순한 텍스트 메뉴와&#xA;  숫자나 방향키 입력을 통한 텍스트 메뉴가 더 명확하고 나을 지경인거&#xA;  같다. 하지만 잘 디자인되고 개발한 화면에서는 정보 전달도, 사용성도&#xA;  좋겠지만, …문제는 그런 사이트는 거의 본적이 없다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>radio-recorder 프로젝트 설명</title>
      <link>https://ageldama.github.io/posts/2019-12dec/dissect-radio-gaga/</link>
      <pubDate>Wed, 11 Dec 2019 01:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/dissect-radio-gaga/</guid>
      <description>&lt;p&gt;&#xA;2년전쯤에 한국 라디오를 혼자 듣고 싶었었다. 하지만 시차가 많이 나는&#xA;지역에 살았었다. (8시간 정도 느림)&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 한국 인터넷 라디오를 녹음해서 개인적으로 들을 수 있다면 좋겠다는&#xA;아이디어로 작업했던 프로젝트 소스코드를 공개한다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/radio-recorder&#34;&gt;https://github.com/ageldama/radio-recorder&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;방송사의 인터넷 라디오를 녹음 하는 스크립트는 커밋에서 제외하고&#xA;공개한다. 이는 방송사에게 문제가 될 수 있으므로 개인적으로 알아내서&#xA;사용하고 타인과 공유하지 않기를 바란다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;프로그램 구성&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;cron 서버&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;지정된 시간에 녹음/인코딩 스크립트를 실행하는 스케쥴을 담당한다.&lt;/li&gt;&#xA;&lt;li&gt;오래된 임시 파일 정리 등등도.&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;한국의 시간대와 내가 있는 시간대가 달라서 다른 cron scheduler을&#xA;쓰지 않고 그냥 짰었던거 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Org 파일으로 Hugo 포스팅 테스트</title>
      <link>https://ageldama.github.io/posts/2019-12dec/foo/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/foo/</guid>
      <description>&lt;p&gt;&#xA;적당히 잘 동작하는거 같으니 앞으로는 그냥 혼란스러운 Markdown 대신에&#xA;그냥 Org 파일으로 블로깅 하며 될거 같다. 행벜.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;예전 버젼 Hugo에서는 지원을 제대로 못하던거 같은데, 어느샌가 업데이트&#xA;하니까 되는거 같아서 그냥 슬그머니&#xA;쓰기로. &lt;a href=&#34;https://gohugo.io/content-management/formats/&#34;&gt;https://gohugo.io/content-management/formats/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;기존 마크다운들도 인라인 이미지 문법을 바꾸고, ToC 표시 설정도 바뀌어서 조금 변경.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;아쉬운건 여전히 Org 파일에서 ToC 지원은 빠져 있는거&#xA;같아서… &lt;a href=&#34;https://github.com/snosov1/toc-org&#34;&gt;https://github.com/snosov1/toc-org&lt;/a&gt; 설치해봤다. 그냥 고민할&#xA;필요가 없었구나. ㅋ&lt;/p&gt;&#xA;&lt;p&gt;&#xA;제일 좋은건 code syntax highlight이 예뻐졌다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;Table of Contents                                    &amp;lt;– :TOC: –&amp;gt;&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;#foobar&#34;&gt;foobar&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>First release of cl-state-machine</title>
      <link>https://ageldama.github.io/posts/2019-12dec/cl-state-machine-1st-release/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/cl-state-machine-1st-release/</guid>
      <description>&lt;p&gt;Made a small state machine library/DSL in/for CommonLisp.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ageldama/cl-state-machine&#34;&gt;https://github.com/ageldama/cl-state-machine&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>커먼리습 설정하기, ASDF 시스템 코드를 받기</title>
      <link>https://ageldama.github.io/posts/2019-12dec/tips-ecl-clisp/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/tips-ecl-clisp/</guid>
      <description>&lt;h1 id=&#34;1-asdf을-최신-버젼으로-설정한다&#34;&gt;1. ASDF을 최신 버젼으로 설정한다&lt;/h1&gt;&#xA;&lt;p&gt;(이부분에서 많이 고생했는데) SBCL와 다르게&#xA;&lt;a href=&#34;https://clisp.sourceforge.io/&#34;&gt;CLISP&lt;/a&gt;,&#xA;&lt;a href=&#34;https://common-lisp.net/project/ecl/&#34;&gt;ECL&lt;/a&gt; 은 최신 버젼의 ASDF을&#xA;내장한걸 패키징해놓지 않았다.&lt;/p&gt;&#xA;&lt;p&gt;대부분은 문제가 없이 동작하지만, 내가 작성한 커먼리습 시스템에서&#xA;실행파일을 빌드할 때 문제가 많았다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ASDF 의 최신 버젼을 &lt;code&gt;git clone&lt;/code&gt; 해서 적당한 디렉토리에 받는다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://common-lisp.net/project/asdf/&#34;&gt;https://common-lisp.net/project/asdf/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;make&lt;/code&gt;을 내려받은 ASDF 디렉토리에서 실행한다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;실행하면 &lt;code&gt;build/asdf.lisp&lt;/code&gt; 파일으로 한 파일으로 뭉쳐서 로딩하게&#xA;편안한 파일을 생성해준다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;내 커먼리습 구현체의 시작설정파일 맨 앞에 다음처럼 추가한다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;(load &amp;quot;~/local/asdf/build/asdf&amp;quot;)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;여기서 나는 &lt;code&gt;$HOME/local/asdf/&lt;/code&gt; 에 ASDF을 받았다고 가정.&lt;/li&gt;&#xA;&lt;li&gt;그리고 &lt;code&gt;asdf.lisp&lt;/code&gt; 파일이더라도, 마지막에 &lt;code&gt;.lisp&lt;/code&gt; 확장자는 생략했다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ECL은 &lt;code&gt;$HOME/.eclrc&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;CLISP은 &lt;code&gt;$HOME/.clisprc.lisp&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;그리고 중요한데, 그 다음에&#xA;&lt;a href=&#34;https://www.quicklisp.org/&#34;&gt;Quicklisp&lt;/a&gt; 초기화 내용이 오도록&#xA;한다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Quicklisp을 초기화하기 전에 ASDF 최신 버젼이 로딩되어 있는게 더&#xA;나을테니까.&lt;/li&gt;&#xA;&lt;li&gt;어차피 위의 (1~3)의 순서대로 ASDF 먼저 설정한 다음에&#xA;Quicklisp설치한 다음에 &lt;code&gt;ql:add-to-init-file&lt;/code&gt; 실행하면 이런&#xA;순서로 추가해준다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&amp;hellip;별거 아닌데, 이거 때문에 빌드한 결과 실행파일이 이상해서 좀 고생했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>(Common Lisp의 어두운 면) Equality</title>
      <link>https://ageldama.github.io/posts/2019-11nov/the-dark-side-of-cl-equality/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-11nov/the-dark-side-of-cl-equality/</guid>
      <description>&lt;p&gt;오늘은 커먼리습의 어두운 면을 이야기 해볼까. 보통 나는 리습 팬보이니까&#xA;리습에 대해 불리한 이야기는 잘 쓰지 않는거 같아서 한번 써보기로&#xA;생각했다. 그리고 놀랍게도 이 글의 끝에 가서는 다시 이런 리습의 결점을&#xA;리습의 위대함으로 승화시키는 단계까지 끌어가 보도록 하려고함.&lt;/p&gt;&#xA;&lt;p&gt;뭐 커먼리습의 &lt;a href=&#34;http://clhs.lisp.se/Front/index.htm&#34;&gt;CLHS - HyperSpec&lt;/a&gt;을 읽다보면 비슷한데 아주 약간씩&#xA;미묘하게 달라서 지원하는 것들이 있다:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;let&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/s_let_l.htm&#34;&gt;Special Operator LET, LET*&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/s_flet_.htm&#34;&gt;Special Operator FLET, LABELS, MACROLET&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;map&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/f_map.htm&#34;&gt;Function MAP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/f_mapc_.htm&#34;&gt;Function MAPC, MAPCAR, MAPCAN, MAPL, MAPLIST, MAPCON&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/f_map_in.htm#map-into&#34;&gt;Function MAP-INTO&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;prog&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/m_prog1c.htm&#34;&gt;Macro PROG1, PROG2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/s_progn.htm#progn&#34;&gt;Special Operator PROGN&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/m_prog_.htm#progST&#34;&gt;Macro PROG, PROG*&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/s_progv.htm#progv&#34;&gt;Special Operator PROGV&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;그밖에도 좀 더 있을듯?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;이렇게 나열해 놓으면 꽤 무서워 보이지만, 막상 차이를 이해하면 별로&#xA;복잡하지도 않아서 나중엔 더 편안해진다. (정말로)&lt;/p&gt;</description>
    </item>
    <item>
      <title>(소프트웨어 고고학) 어째서 `String#replaceAll`처럼 메서드 경로의 구분자로 `#`을 쓸까?</title>
      <link>https://ageldama.github.io/posts/2019-11nov/why-sharpsign-in-method-path/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-11nov/why-sharpsign-in-method-path/</guid>
      <description>&lt;h1 id=&#34;오늘-아침&#34;&gt;오늘 아침&lt;/h1&gt;&#xA;&lt;p&gt;다음은 오늘 아침 트위터의 타임라인에서 내가 스쳐본 한 스크린샷의 일부이다:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ageldama.github.io/images/2019-11nov/string-replace-js-w-sharpsign.png&#34; alt=&#34;img&#34;&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;뭐에 느낌을 받았냐하면, 바로 저 &lt;code&gt;String#replace(..)&lt;/code&gt; 이라는&#xA;부분이다. (다른 부분에서는 &lt;code&gt;String.prototype.replace(..)&lt;/code&gt; 와 같이&#xA;썼는데 굳이 저기서만 갑자기 튀어나온 표기법)&lt;/p&gt;&#xA;&lt;p&gt;사실 나도 종종 내가 작업한 코드의 문서를 쓰거나&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 아니면 다른 사람과&#xA;텍스트로 대화를 해야할 때 이렇게 표기를 해왔었다.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;각각의 언어들에서 (내가 생각하는) 저렇게 표기하는 근거들은 다음과 같다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Java: &lt;a href=&#34;https://www.oracle.com/technetwork/articles/java/index-137868.html&#34;&gt;https://www.oracle.com/technetwork/articles/java/index-137868.html&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;@see Component#getGraphics()&lt;/code&gt; JavaDoc안에서 다른 메서드,&#xA;필드를 참고로 넣고 싶을 때 이게 표준표기법이고&#xA;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html&#34;&gt;javadoc&lt;/a&gt;도&#xA;요렇게 써줘야 링크처리를 해준다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;JavaScript&#xA;&lt;ul&gt;&#xA;&lt;li&gt;공식적인건 아닌거 같다. &lt;a href=&#34;https://developer.mozilla.org/&#34;&gt;Mozilla&#xA;MDN&lt;/a&gt;을 봐도 그런 표기는 사용&#xA;안하는걸로 보인다.&lt;/li&gt;&#xA;&lt;li&gt;예: &lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/toString&#34;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/toString&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Ruby&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java와 마찬가지로 RDoc에서 강제한다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/18591938/what-is-the-sharp-number-pound-hash-sign-used-for-in-ruby&#34;&gt;스택오버플로우: What is the # (sharp, number, pound, hash) sign used for in Ruby?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/304400/use-a-hash-character-or-a-dot-when-referring-to-methods-and-fields-in-software-d&#34;&gt;스택오버플로우: Use a hash character or a dot when referring to&#xA;methods and fields in software documentation? [closed]&lt;/a&gt;에 답변이&#xA;있으나 내가 볼 땐 내 가설이 더 확실한 이야기라고 본다.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 01/Nov/2019</title>
      <link>https://ageldama.github.io/posts/2019-11nov/ping-01fri/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-11nov/ping-01fri/</guid>
      <description>&lt;h1 id=&#34;그-이전의-시간&#34;&gt;그 이전의 시간&lt;/h1&gt;&#xA;&lt;p&gt;한국으로 돌아와 1년 반 정도 한 회사에 다니다가, 정리하고 나와서 시간을&#xA;보내고 있다.&lt;/p&gt;&#xA;&lt;p&gt;관점, 사고방식, 일하는 방식 등등 대화가 통하기도 어려운 상황이었고,&#xA;그런 세계관도 너무 차이가 나서 같이 있기 힘들었었다.&lt;/p&gt;&#xA;&lt;p&gt;그리고 어째서 한국을 떠나기로 결심했었었는지 뒤돌아봤고 거의 동일한&#xA;경험이었다. 조금은 달라진게 있으려나. 아마 그러리라 생각한다. 완전히&#xA;똑같은 경험은 아니다. 왜냐하면 거기에서 내가 얻은게 다르다.&lt;/p&gt;&#xA;&lt;p&gt;어떤 사람은 그럴리 없고 내가 오해를 한거라고 이야기를 해주지만, 그냥&#xA;나는 나와 같은 상황도, 처지도, 지위도 아니었으니 그런 충고가&#xA;무의미하다고 생각한다. 그 사람은 그 사람의 입장으로 경험을 한거고&#xA;그러니 판이하게 달랐겠지.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ELECOM EX-G Pro Trackball 잉여 버튼을 Page Up/Down으로 쓰기</title>
      <link>https://ageldama.github.io/posts/2019-10oct/exg-pro-trackball-pgupdn/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/exg-pro-trackball-pgupdn/</guid>
      <description>&lt;p&gt;컴퓨터를 많이 쓰니까 다른 부분보다 손목이 먼저 망가져서, 손목을 조금만&#xA;큰 각도로 꺾으면 아프다. ㅠ.ㅠ.. 예전에도 그랬었는데&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;마우스 안쓰고, 트랙볼 쓰기&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;&#xA;&lt;li&gt;키보드 &lt;a href=&#34;https://en.wikipedia.org/wiki/Numeric_keypad&#34;&gt;넘패드&lt;/a&gt;&#xA;부분 없는 짧은 86키 레이아웃 쓰기&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.logitech.com/en-us/product/trackman-marble-business&#34;&gt;로지텍 마블&#xA;트랙맨&lt;/a&gt;&#xA;잘 쓰다가, 지름을 받아서 조금 다음 티어의 제품으로 업그레이드 해봤다.&lt;/p&gt;&#xA;&lt;p&gt;그래서 바꾼게 &amp;ndash;&amp;gt; &lt;a href=&#34;http://elecom.co.kr/product/ex-g-pro-%EC%9C%A0%EB%AC%B4%EC%84%A0-%ED%95%98%EC%9D%B4%EC%8A%A4%ED%8E%99-%ED%8A%B8%EB%9E%99%EB%B3%BC-%EB%A7%88%EC%9A%B0%EC%8A%A4-m-xpt1mrbk/2184/&#34;&gt;&lt;strong&gt;엘레컴 EX-G Pro Trackball&lt;/strong&gt;&lt;/a&gt; &lt;figure&gt;&lt;img src=&#34;https://ageldama.github.io/images/2019-10oct/elecom_ex-g_pro_trackball_c1b01.jpg&#34; width=&#34;&amp;#39;300&amp;#39;&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;..그런데 다 좋은데, 저기 있는 &lt;em&gt;Function assignment button&lt;/em&gt; 이라고&#xA;써있는게 2개가 더 달려있음.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;이 추가기능버튼들은 윈도였다면 벤더에서 제공하는 프로그램을 통해서&#xA;할당이 가능할거 같은데, 리눅스/X윈도에서는&#xA;&lt;a href=&#34;https://www.x.org/releases/X11R7.7/doc/man/man1/xev.1.xhtml&#34;&gt;xev&lt;/a&gt;으로&#xA;확인해보니 그냥 &lt;strong&gt;Button 10번, 11번&lt;/strong&gt;이었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>블로그 폰트 적용</title>
      <link>https://ageldama.github.io/posts/2019-10oct/blog-font/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/blog-font/</guid>
      <description>&lt;p&gt;그냥 CDN에서 내려받는 공개된 Noto 폰트를 적용했다. 깔끔하다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;어제는 &lt;a href=&#34;https://dalgona.github.io/neodgm/&#34;&gt;네오둥근모&lt;/a&gt; 적용해서 완전 귀엽고 내 취향이기는했는데,&#xA;그렇게 두면 안될것 같아서 좀 평범한 폰트로 바꿨다.&lt;/p&gt;&#xA;&lt;p&gt;깔끔하게 글이 눈에 잘 들어오고 CDN에서 내려받으니 빨라서 좋다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol&gt;&#xA;&lt;li id=&#34;fn:1&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.chungah.kr/use-notoserif-on-wordpress/&#34;&gt;워드프레스에서 본명조(Noto Serif CJK KR) 폰트 사용하기&lt;/a&gt; 이 포스팅을 참고. 고맙습니다. 글 쓰신분 아이디가 &lt;em&gt;이스크라&lt;/em&gt;(러시아어 &amp;lsquo;불꽃&amp;rsquo;)이라니&amp;hellip; 심장이 뜨거워진다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ping 20/Oct/2019</title>
      <link>https://ageldama.github.io/posts/2019-10oct/ping-20sun/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/ping-20sun/</guid>
      <description>&lt;h2 id=&#34;장거리-드라이브&#34;&gt;장거리 드라이브&lt;/h2&gt;&#xA;&lt;p&gt;고속도로를 내려와서 국도에 들어서서 우회전 신호대기에서 창문을&#xA;내리자마자 깨달은게 공기가 말도 안되게 좋았다.&lt;/p&gt;&#xA;&lt;p&gt;가보고 싶었던 곳들을 돌아다니고 정말 많은게 변했구나 싶기도 하고&#xA;쓸쓸했다. 세상에 이런 곳도 아직 있구나, 내가 사는 세상이, 그게&#xA;절대적으로 전부라고 생각하는 복잡하고 발전된 모습이 아니라, 이런 곳이&#xA;있을 수 있구나 싶어서 신기했다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ageldama.github.io/images/2019-10oct/20191017_165844.jpg&#34; alt=&#34;img1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ageldama.github.io/images/2019-10oct/20191017_171148.jpg&#34; alt=&#34;img2&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ageldama.github.io/images/2019-10oct/20191017_175340.jpg&#34; alt=&#34;img3&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;다시 또 가고 싶다. 아주 옛날엔 거기가 지루하다고 생각했었던거 같은데.&lt;/p&gt;&#xA;&lt;h2 id=&#34;게임-번아웃-파라다이스&#34;&gt;게임: 번아웃 파라다이스&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.zdnet.co.kr/view/?no=20180222082958&#34;&gt;&amp;lsquo;벗아웃 파라다이스&amp;rsquo;, 리마스터 버전으로 만난다 - 이도원 기자 입력: 2018/02/22&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>cl-toy-stack-lang 첫번째 버젼과 작업하면서 깨달은것</title>
      <link>https://ageldama.github.io/posts/2019-10oct/cl-toy-stack-lang/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/cl-toy-stack-lang/</guid>
      <description>&lt;p&gt;일단 첫번째 버젼 다 만들었다.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ageldama/cl-toy-stack-lang/releases/tag/v0.1.0&#34;&gt;https://github.com/ageldama/cl-toy-stack-lang/releases/tag/v0.1.0&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;그냥 장난으로 인터프리터도 아니라 그냥&#xA;&lt;a href=&#34;http://clhs.lisp.se/Body/f_eval.htm&#34;&gt;eval&lt;/a&gt; 이용한 간단한 파서도&#xA;필요없이 lexer만으로 만들만한&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Forth_(programming_language)&#34;&gt;Forth&lt;/a&gt;&#xA;비슷한 언어를 만듬.&lt;/p&gt;&#xA;&lt;p&gt;명령어도 실용적인 목적이 아닌만큼 그냥 문자열 장난 밖엔 없다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;느낀점&#34;&gt;느낀점&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;라이브러리 좋은거 갖다 잘쓰자&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://quickdocs.org/uiop/&#34;&gt;uiop&lt;/a&gt; 같은거,&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/24_aba.htm&#34;&gt;feature-expression&lt;/a&gt; 삽질을 적게하거나 안해도됨. 더&#xA;portable하고 잘 굴러가는.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Test!&lt;/strong&gt;&#xA;3. 짜고 하나씩 진화시켜가면서 다시 돌리는 재미.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Idiomatic하게&lt;/strong&gt; 그리고 역시 Test!&#xA;&lt;ol&gt;&#xA;&lt;li&gt;..처음엔 그냥 전역변수에 상태를 갖도록 만들고,&lt;/li&gt;&#xA;&lt;li&gt;그걸 &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/03_abaab.htm&#34;&gt;dynamic binding&lt;/a&gt;으로 바꿔서 파라미터화하고,&lt;/li&gt;&#xA;&lt;li&gt;또 그걸 다시 상태를 캡슐화하는 클래스로 감싸고,&lt;/li&gt;&#xA;&lt;li&gt;처음엔 단순하게 리습스럽게 짜고 그걸 진화시키고,&lt;/li&gt;&#xA;&lt;li&gt;그리고 역시 다시 테스트.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;em&gt;아는만큼 보인다&lt;/em&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;setf&lt;/code&gt; 병렬로 하기, +destructuring&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;asdf:operate&lt;/code&gt; + &lt;code&gt;:build-op&lt;/code&gt; :&#xA;&lt;a href=&#34;http://www.sbcl.org/&#34;&gt;SBCL&lt;/a&gt;/&lt;a href=&#34;https://common-lisp.net/project/ecl/&#34;&gt;ECL&lt;/a&gt;&#xA;등 리습컴파일러에 관계 없이 실행이미지 빌드 편안하게&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/xach/buildapp&#34;&gt;https://github.com/xach/buildapp&lt;/a&gt; 같은거 써볼까 하다가,&#xA;처음엔 그냥 간단히 쉘스크립팅으로 시작.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;기타 등등&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&amp;hellip;그리고 무엇보다 재밌었다. 그리고 뭐가됐든 그냥 짜보고 굴러가는&#xA;형태로 계속해서 작은 프로그램을 많이 만들고 하면서 놀아야겠다고&#xA;생각했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 15/Oct/2019</title>
      <link>https://ageldama.github.io/posts/2019-10oct/ping-15tue/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/ping-15tue/</guid>
      <description>&lt;p&gt;커먼리습으로 간단한&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Stack-oriented_programming&#34;&gt;스택기반&lt;/a&gt;&#xA;장난감 프로그래밍언어를 만들고있다.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ageldama/cl-toy-stack-lang&#34;&gt;https://github.com/ageldama/cl-toy-stack-lang&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;튜링컴플릿이나 그런거 관심도 없고 사실 Parser도 적절하게 만들지 않았다.&lt;/p&gt;&#xA;&lt;p&gt;다만 유니코드 잘되고 쓸만한 lexer generator이 커먼리습에 있는지가 궁금했다.&lt;/p&gt;&#xA;&lt;p&gt;적당히 내일 정도면 어느 정도 완전히 굴러가는 프로그램으로 다 만들고 마무리 할 듯.&lt;/p&gt;&#xA;&lt;p&gt;처음에는 &lt;a href=&#34;https://www.quicklisp.org/&#34;&gt;QuickLisp&lt;/a&gt; 에서 어떤 Lexer을&#xA;써야할까 고민하다가, cl-lex 쓰다가 실망스러웠다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;그러다가 만난게 &lt;a href=&#34;https://github.com/rigetti/alexa&#34;&gt;Alexa&lt;/a&gt; 인데, 가장&#xA;마음에 드는 lexer generator.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.rigetti.com/&#34;&gt;https://www.rigetti.com/&lt;/a&gt; 이 회사를 발견. 커먼리습으로 &lt;a href=&#34;https://github.com/rigetti/quilc&#34;&gt;Quil&#xA;Compiler&lt;/a&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 만들고 퀀텀컴퓨팅&#xA;관련된 기업인가 보다.&lt;/p&gt;&#xA;&lt;p&gt;그리고 깃헙 저장소 살펴보는데 흥미롭고 써보면 어떨까 싶은게 많이 보였다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 14/Oct/2019</title>
      <link>https://ageldama.github.io/posts/2019-10oct/ping-14mon/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/ping-14mon/</guid>
      <description>&lt;p&gt;어제 오늘 요즘에 들어서 생각을 겨우 하기 시작한 고민을 사람들이 트윗하더라.&lt;/p&gt;&#xA;&lt;p&gt;tweet 1183311320822607872&lt;/p&gt;&#xA;&lt;p&gt;..이번에 직장을 그만두고&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 새로운 직장을 열심히 알아보고 있지는 않고&#xA;있다.&lt;/p&gt;&#xA;&lt;p&gt;몇군데 인터뷰를 진행도 해보고 했지만, 모두 솔직히 나도 모르겠고 거절도&#xA;많이 받고 해서 꾸준히 진행을 하고 있지는 않다. 그리고 나도 이직을 하고&#xA;recruiting 과정을 한국만이 아니라 독일에서도 다양하게 겪어보니&#xA;어떤것이 좋거나 나쁜 신호인지 캐치하게 되는거 같고, 또 그런 시그널들이&#xA;생각보다 적절하게 그 회사측의 모습이나 생각을 반영하는게 맞는거&#xA;같더라.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 13/Oct/2019</title>
      <link>https://ageldama.github.io/posts/2019-10oct/ping-13sun/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/ping-13sun/</guid>
      <description>&lt;p&gt;집중하는게 내게 더 좋겠다는 생각이든다.&lt;/p&gt;&#xA;&lt;p&gt;단시간에 어떤 일에 집중하는 일은 만족스럽다. 그런 시간단위의 집중이&#xA;아니라 기간이라고 할만큼 며칠, 몇주에 걸쳐, 한정된 한두개의&#xA;주제에만 집중해서 생각하고 만들거나 글을 써가는게 필요하다.&lt;/p&gt;&#xA;&lt;p&gt;혼자 관심이 가거나 생각하는 주제가 떠오르면&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Org-mode&#34;&gt;Org파일&lt;/a&gt; 한 개나 메모지,&#xA;핸드폰에 적어놓는다. 그리고 내가 가진 정리하는 방식에 따라 조금씩&#xA;생각이 다듬어질때마다 저장매체를 바꿔가며 기록해나간다. 문득 그 &lt;em&gt;Org&#xA;파일&lt;/em&gt; 을 열었는데, 너무 많은 내용들이, 그것도 폭넓은 다양한 주제들에&#xA;대해서 걸쳐있음을 봤다.&lt;/p&gt;&#xA;&lt;p&gt;다양한 주제에 관심이 있는건 어쩔 수 없겠지만 각 주제마다 내가 투사하는&#xA;시간과 노력이 너무 분산되는거 아닌가 생각해왔다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Zettelkästen?</title>
      <link>https://ageldama.github.io/posts/2019-10oct/zettelkaesten-12sat/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/zettelkaesten-12sat/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ageldama.github.io/posts/2019-10oct/ping-11fri/&#34;&gt;어제 Ping&lt;/a&gt;에서 계속&#xA;블로깅을 하면서 생각 하는걸 계속 다듬어 갔으면 좋겠다는 말을 했었는데,&lt;/p&gt;&#xA;&lt;p&gt;마침 &lt;a href=&#34;https://news.ycombinator.com/item?id=21208196&#34;&gt;HN에 그런걸 하기 적절해 보이는&#xA;글&lt;/a&gt;이 올라와서&#xA;읽어봤다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;간략히 정리해보면,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;생각 적기&lt;/strong&gt;: &lt;em&gt;짧은 길이&lt;/em&gt; 메모를 적어서 생각만으로 카드를 만들고,&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;이 상태에서는 우선 각 카드는 &amp;ldquo;&lt;em&gt;순번없음 (Unsorted)&lt;/em&gt;&amp;rdquo; 상태&#xA;deck으로 쌓아만 놓는다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;순서매기기(1)&lt;/strong&gt;: 카드끼리 1, 2, 3 같이 순서를 두고 정렬.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&amp;lsquo;&lt;em&gt;Unsorted&lt;/em&gt;&amp;rsquo; deck에서 꺼내와서 정리하는거겠지.&lt;/li&gt;&#xA;&lt;li&gt;각 순서는 생각의 순서일수도 있겠고,&lt;/li&gt;&#xA;&lt;li&gt;아니면 그냥 구분되는 다른 생각의 단절을 나타내는 방법으로&#xA;쓸수도 있겠지.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;순서매기기(2)&lt;/strong&gt;: 그리고 위에 만든 1, 2, 3와 같은 순서 카드에 딸린 하위 생각들은,&#xA;&lt;ol&gt;&#xA;&lt;li&gt;1a, 1b, 2a, 2a1, 2a2 와 같이 alphanumeric으로 하위 생각들을&#xA;표현해 나간다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;연결하기&lt;/strong&gt;: 그리고 각 카드들의 서로 &lt;em&gt;연결&lt;/em&gt; 을 적어나간다.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;예를 들어, 1a에서 하위 카드가 아닌데도 연관이 있는 2a1,&lt;/li&gt;&#xA;&lt;li&gt;2a2으로 연결을 갖는다면, 1a 카드에 2a1, 2a2을 &lt;em&gt;링크&lt;/em&gt; 라고&#xA;적어준다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;위 3단계에서 계층적으로 순서를 할당하는걸 시각화해보면 다음과 같은 트리가 되겠지&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>rutils으로 커먼리습 확장해서 clojure 비슷하게, 더 편하게</title>
      <link>https://ageldama.github.io/posts/2019-10oct/cl-rutils/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/cl-rutils/</guid>
      <description>&lt;p&gt;커먼리습은 &lt;a href=&#34;https://en.wikipedia.org/wiki/Common_Lisp_HyperSpec&#34;&gt;CLHS&lt;/a&gt;&#xA;이후로 언어 자체 정의는 변하지 않았다.&lt;/p&gt;&#xA;&lt;p&gt;구현체마다 조금씩 확장이 있을수도 있지만 딱히 그렇게 하지도 않는거&#xA;같다. 그럴만도 하다고 생각하는게 어차피 커먼리습에서 &lt;a href=&#34;https://en.wikipedia.org/wiki/Lisp_reader&#34;&gt;lisp&#xA;reader&lt;/a&gt;을 확장하는게&#xA;CLHS에서 정의해놓은 &lt;em&gt;기능&lt;/em&gt; 중 하나이고, 구현체들도 스펙을 잘&#xA;구현해놓았으니까.&lt;/p&gt;&#xA;&lt;p&gt;결국 커먼리습에서 문법이나 그런게 조금 마음에 안들거나 확장하고 싶으면&#xA;언제든지 매크로를 만들듯이 확장하면 되니까.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;&amp;lsquo;커먼리습 언어 자체를 커먼리습으로 프로그램 할 수 있다&amp;rsquo;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;이런 커먼리습 확장 &lt;em&gt;&amp;lsquo;라이브러리&amp;rsquo;&lt;/em&gt; 들이 여러가지 있는데, 가장 요즘에&#xA;쓸만할거 같다고 생각하는건 rutils이다. &lt;a href=&#34;https://github.com/vseloved/rutils&#34;&gt;https://github.com/vseloved/rutils&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;(eval-when (:compile-toplevel :load-toplevel :execute) ...)&lt;/code&gt; 같은거&#xA;매번 반복해서 쳐넣는걸 그냥 &lt;code&gt;eval-always&lt;/code&gt;으로 바꿔준다거나.&#xA;&lt;code&gt;gensym&lt;/code&gt;하는것도 &lt;code&gt;with-gensyms&lt;/code&gt; 제공하거나 하는 이런류의&#xA;라이브러리들에서 보통 제공하는것들부터.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 11/Oct/2019</title>
      <link>https://ageldama.github.io/posts/2019-10oct/ping-11fri/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/ping-11fri/</guid>
      <description>&lt;p&gt;매일 글쓰기. 블로깅하기 나도 해볼까.&lt;/p&gt;&#xA;&lt;p&gt;해보려는 이유는 메모는 계속해서 하면서 살고 있는데, 연속해서 같은&#xA;주제에 대해서 더 생각하고 하면서 발전시키는 방법으로 일기를 쓰는것과&#xA;반복적으로, 또 이전에 썼었던 글을 읽어보면서 거기에서 더 나아가서&#xA;고쳐나가고 발전시키는 방법으로 블로깅이 나쁘지 않은거 같아서.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 08/Oct/2019</title>
      <link>https://ageldama.github.io/posts/2019-10oct/ping-08tue/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/ping-08tue/</guid>
      <description>&lt;p&gt;어제는 하루 종일 아는 사람들을 만나고 돌아다녔다.&lt;/p&gt;&#xA;&lt;p&gt;한국에서 운전을 하게 되고 재미를 붙이고 살고 있다.&lt;/p&gt;&#xA;&lt;p&gt;비가 오는 날이었지만 상쾌해서 북한산 국립공원 근처, 은평한옥마을,&#xA;진관사를 다녔다. 차를 타고 이동하면서 편하고 좋았다. 행동반경이&#xA;넓어지고 운전하면서 아직은 매순간이 재밌다.&lt;/p&gt;&#xA;&lt;p&gt;비가 내려서 구름과 안개가 북한산 자락에 깔려서 운치있었다. 카페에&#xA;앉아서 산풍경을 감상했다. 학생때는 자주 학교에서 소풍이나 백일장을&#xA;서오릉이나 북한산으로 왔었었는데. 그때도 가끔 생각했지만 비가 내려&#xA;세상이 이렇게 젖었을때 애처롭게 어둡기도 하고 깨끗한 습기를 머금은&#xA;숲이 상쾌해서 생명을 느끼게 해준다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 17/03/2019</title>
      <link>https://ageldama.github.io/posts/2019-03mar/2019-03mar17-ping/</link>
      <pubDate>Sun, 17 Mar 2019 07:38:28 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2019-03mar/2019-03mar17-ping/</guid>
      <description>&lt;h1 id=&#34;emacsc-개발환경-스크린캐스트&#34;&gt;Emacs/C++ 개발환경 스크린캐스트&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ageldama.github.io/posts/2019-02feb/counsel-ivy+cpp-ide/&#34;&gt;이전 포스팅&lt;/a&gt; 에서 만들었던&#xA;설정을 스크린캐스트로 찍어서 공유해봤다.&lt;/p&gt;&#xA;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/YOaAqpdz9ts?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;let-over-lambda-읽기&#34;&gt;&amp;ldquo;Let Over Lambda&amp;rdquo; 읽기&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://letoverlambda.com/&#34;&gt;Let Over Lambda&lt;/a&gt;을 읽기&#xA;시작했다. 커먼리습 매크로, 클로져에 대한 이야기를 더 깊이 있게&#xA;설명하고, 그런 기능들이 어떻게 리습이랑 리습이 아닌 &lt;a href=&#34;http://paulgraham.com/avg.html&#34;&gt;&amp;ldquo;Blub&#xA;language&amp;rdquo;&lt;/a&gt;이라고 말하고있는 대부분의&#xA;언어들과의 차이인지를 설명한다.&lt;/p&gt;&#xA;&lt;p&gt;리습의 매크로나 closure을 통해서, 그간 내가 프로그래밍언어 설계를 할때&#xA;포함해야하고, 컴파일러가 지원하도록 손수 만들어놓아야 한다고 믿던&#xA;것들이 얼마나 쉽게 구현되는지를 보며 충격을 받는다. 재밌고 신선하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CFFI으로 CommonLisp 2d array을 Foreign function으로 전달하기</title>
      <link>https://ageldama.github.io/posts/2019-03mar/cffi-2d-array/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-03mar/cffi-2d-array/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ageldama/cffi-2d-array-hello&#34;&gt;https://github.com/ageldama/cffi-2d-array-hello&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;cffi:with-foreign-array&lt;/code&gt;이 &lt;a href=&#34;https://common-lisp.net/project/cffi/manual/cffi-manual.html&#34;&gt;CFFI&#xA;manual&lt;/a&gt;에&#xA;없어서 처음에 좀 골치아팠음.&lt;/p&gt;&#xA;&lt;p&gt;리습 어레이를 복사해서 매핑해줌.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 26/02/2019</title>
      <link>https://ageldama.github.io/posts/2019-02feb/2019feb27-ping/</link>
      <pubDate>Tue, 26 Feb 2019 16:47:22 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2019-02feb/2019feb27-ping/</guid>
      <description>&lt;h1 id=&#34;번아웃-회의감&#34;&gt;번아웃, 회의감&lt;/h1&gt;&#xA;&lt;p&gt;아무래도 번아웃이 온거 같다. 일을 해야 하는데 아무런 생각이나 의욕도&#xA;떠오르지 않는다.&lt;/p&gt;&#xA;&lt;p&gt;아무것도 제대로 하지 못할거 같고, 해서 의미도 없을거라는 생각이 강하다.&lt;/p&gt;&#xA;&lt;p&gt;일하는것에 회의가 심하다. 실제로는 아무것도 제대로 알지 못하고 그냥&#xA;싫으니까 반대에 사람들 사이를 조작해서 악의적으로 행동하고 그렇게&#xA;조장하는것에 이제는 삶에서 너무 많이 봐온거 같고, 그런 사이에서&#xA;무력하게 지내고 해야한다는게 무엇보다 지친다.&lt;/p&gt;&#xA;&lt;p&gt;그리고 그렇게 때문에 해야할 이유도, 굳이 마음을 써야할 이유도&#xA;모르겠다.&lt;/p&gt;&#xA;&lt;p&gt;그냥 개인적으로 하고 싶던 설정이나 만지작거리면서 시간을 보내봐도 딱히&#xA;그게 지나고 나면 하고 싶은것도 없어진다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ivy/Counsel으로 바꾸기, 기능들 만들기 (w/ C&#43;&#43;지원, &#43;&#43;rmsbolt)</title>
      <link>https://ageldama.github.io/posts/2019-02feb/counsel-ivy&#43;cpp-ide/</link>
      <pubDate>Tue, 26 Feb 2019 01:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-02feb/counsel-ivy&#43;cpp-ide/</guid>
      <description>&lt;p&gt;최근에 이맥스 설정을&#xA;&lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;Helm&lt;/a&gt;기반에서&#xA;&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Ivy/Counsel&lt;/a&gt;으로 전부 바꿨다.&lt;/p&gt;&#xA;&lt;p&gt;더 가볍고, 적당히 잘 동작하고,&#xA;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;Ripgrep&lt;/a&gt;이랑 기본적으로&#xA;설정이 가능해서 편함.&lt;/p&gt;&#xA;&lt;p&gt;거기에 &lt;code&gt;C-c C-o&lt;/code&gt;&#xA;(&lt;a href=&#34;https://oremacs.com/2015/11/04/ivy-occur/&#34;&gt;ivy-occur&lt;/a&gt;) +&#xA;&lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt;이 Helm에선&#xA;동작할때가 그때그때 기능에 따라 달라서 짜증나고, 심지어 플러그인을&#xA;설정해서 써야하거나 해서 정말 좋아하는 기능인데 우울하게 만들었는데,&#xA;Ivy이 훨씬 깔끔하게 동작하고 일관성있게 잘 동작함.&lt;/p&gt;&#xA;&lt;p&gt;처음에는 Helm에서 하는 기능들을 그대로 옮기려고만 생각하다가, 오히려&#xA;Ivy에 맞춰서 내가 익숙해지고, 더 낫게 할 방법들이 있어서 그냥 내가&#xA;adopt해서 편안해졌다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;cmake--compile_commandsjson&#34;&gt;CMake + &lt;code&gt;compile_commands.json&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;이전에는 &lt;a href=&#34;https://github.com/Andersbakken/rtags&#34;&gt;RTags&lt;/a&gt;을 사용해서&#xA;&amp;lsquo;&amp;lsquo;정말로&amp;rsquo;&amp;rsquo; C++ 프로젝트를 Clang등을 이용해서 파싱하고, 그걸&#xA;인덱싱한걸로 정확한 navigation, code completion을 구성해 사용하려고&#xA;했었었다. 그리고 타입 정보다 그런거 다 있으니 제대로 굴러가서 꽤&#xA;쓸만하고.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 26/02/2019</title>
      <link>https://ageldama.github.io/posts/2019-02feb/2019-02feb26-ping/</link>
      <pubDate>Tue, 26 Feb 2019 00:10:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-02feb/2019-02feb26-ping/</guid>
      <description>&lt;h1 id=&#34;게임-발더스게이트ee-원숭이섬의-비밀-se--steamplay-등등&#34;&gt;게임: 발더스게이트EE, &amp;lsquo;원숭이섬의 비밀&amp;rsquo; SE + SteamPlay, 등등&lt;/h1&gt;&#xA;&lt;p&gt;아주 예전에 발더스게이트2을 열심히 했었는데, 스팀에 Enhanced Edition들&#xA;올라와있었다.  발더스게이트1, 2 모두. 시간이 될때마다 조금씩 플레이&#xA;중.&lt;/p&gt;&#xA;&lt;p&gt;새로 UI이나 그래픽 요소들 등등 리마스터 한건지 훨씬 좋아진거 같다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/app/32360/The_Secret_of_Monkey_Island_Special_Edition/&#34;&gt;원숭이섬의 비밀: Special&#xA;Edition&lt;/a&gt;&#xA;이것도 시간날때&#xA;플레이. &lt;a href=&#34;https://www.scummvm.org/&#34;&gt;ScummVM&lt;/a&gt; 으로 옛날 그래픽으로 다시&#xA;해도 좋겠지만, 오히려 애니메이션이나 그래픽 다시 그린게 나는 더 마음에&#xA;들어서 이쪽이 좋은거 같다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/app/336140/Unavowed/&#34;&gt;Unavowed&lt;/a&gt;. 이런류의&#xA;어드벤쳐 꾸준히 만드는 &amp;ldquo;WadjetEyeGames&amp;quot;이 내 취향에 잘 맞는걸 계속&#xA;만들고 있는거 같아서 기뻤다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NetworkManager &#43; dnsmasq으로 인터넷공유 만들기</title>
      <link>https://ageldama.github.io/posts/2019-02feb/internet-sharing-networkmanager-dnsmasq/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-02feb/internet-sharing-networkmanager-dnsmasq/</guid>
      <description>&lt;h1 id=&#34;필요성-궁금함-현재-상황&#34;&gt;필요성, 궁금함, 현재 상황&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;메인 데스크탑을 무선랜으로 인터넷에 연결하고 사용함.&lt;/li&gt;&#xA;&lt;li&gt;다른 기기들도 모두 기본적으로 무선으로 LAN접속.&lt;/li&gt;&#xA;&lt;li&gt;다 좋은데, 메인 데스크탑 &amp;lt;-&amp;gt; 라즈베리파이 접속할때 ssh 접속도&#xA;느린거 같을때가 있음.&lt;/li&gt;&#xA;&lt;li&gt;무선랜 접속이 많고, 블루투스 등등 다른 간섭도 많을거고,&lt;/li&gt;&#xA;&lt;li&gt;어쨌든 조금 물리적으로 거리가 있는 무선공유기까지 갔다&#xA;오는거니까.&lt;/li&gt;&#xA;&lt;li&gt;그래서 사용 안하고 있는 데스크탑의 내장 유선 랜포트로 인터넷연결을&#xA;공유하는 Private network을 만들어서 유선으로 연결해보기로 했다.&lt;/li&gt;&#xA;&lt;li&gt;정말 체감이 빨라질지 궁금했고&lt;/li&gt;&#xA;&lt;li&gt;직접 수동으로 설정하는게 거의 없거나,&lt;/li&gt;&#xA;&lt;li&gt;내가 사용하고 있는 NetworkManager에서 쉽게 설정이 가능할거&#xA;같았다.&#xA;- &lt;a href=&#34;https://wiki.archlinux.org/index.php/NetworkManager#Sharing_internet_connection_over_Ethernet&#34;&gt;https://wiki.archlinux.org/index.php/NetworkManager#Sharing_internet_connection_over_Ethernet&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;진행과-추가적인-설정&#34;&gt;진행과 추가적인 설정&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;그냥&#xA;&lt;a href=&#34;https://wiki.archlinux.org/index.php/NetworkManager#nm-applet&#34;&gt;nm-applet&lt;/a&gt;&#xA;사용해서 wired connection에 인터넷 공유를 체크한게 설정 전부.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.thekelleys.org.uk/dnsmasq/doc.html&#34;&gt;dnsmasq&lt;/a&gt; 패키지만&#xA;설치하고, 별도로 systemctl으로 enable/start한건&#xA;없음. (NetworkManager에서 자동으로 관리)&lt;/li&gt;&#xA;&lt;li&gt;잘 동작함. ㅎㅎ&lt;/li&gt;&#xA;&lt;li&gt;추가적으로, Private Network에 접속하는 호스트의 MAC 어드레스에&#xA;IP주소를 고정해서 접속이 편하도록 설정했다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;mac주소에-고정ip-할당하기&#34;&gt;MAC주소에 고정IP 할당하기&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;dnsmasq의 DHCP 설정을 추가한다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/etc/NetworkManager/dnsmasq-shared.d/static-ips.conf&lt;/code&gt; 파일을 작성했다.&lt;/li&gt;&#xA;&lt;li&gt;별도의 재시작 없이, 파일 저장하고, 그냥 유선연결을 끊었다가 다시 연결하면 끝.&lt;/li&gt;&#xA;&lt;li&gt;나머지는 NetworkManager이 다 자동으로 처리.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;설정파일의 내용은 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 07/02/2019</title>
      <link>https://ageldama.github.io/posts/2019-02feb/2019-02feb07thu-ping/</link>
      <pubDate>Thu, 07 Feb 2019 17:30:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-02feb/2019-02feb07thu-ping/</guid>
      <description>&lt;h1 id=&#34;golang-사랑&#34;&gt;Golang 사랑&lt;/h1&gt;&#xA;&lt;p&gt;회사일로 Golang을 다시 잡고 쓰게됐다.&lt;/p&gt;&#xA;&lt;p&gt;예전에도 잠깐 썼었는데&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, 이번엔 그냥 더 오래 진지하게 필요에&#xA;의해서 쓰게됐다.&lt;/p&gt;&#xA;&lt;p&gt;지금 일터에서도 필요에 의해서 작은 프로그램을 작성하고 할 일이&#xA;있어서 쓰다가 아예 서비스 코드에 적용을 하려 일하고있다.&lt;/p&gt;&#xA;&lt;p&gt;많은걸 더 깊이 생각하고 익히는 좋은 계기로 꾸준하게 사용하고 있고,&#xA;만족스럽다. 대부분의 경우에. 그리고 Emacs와 연동도 좋고 언어 자체의&#xA;설계나 그런점들도 너무 좋은거 같다.&lt;/p&gt;&#xA;&lt;p&gt;GC이 있는 언어를 최근에는 꺼리다가 다시 사용하니까 좋은것 같아. 그냥&#xA;문법적은 모호함이 없고 단순함, 머리에 쉽게 기억할만한 규칙들, 혹은&#xA;아예 어떤 규칙도 기억할 필요가 없도록 만들거나 하는게 얼마나 설계에&#xA;좋은지 깨닫는다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Goroutine, Channel, I/O 그리고 Scheduler 이해해보기</title>
      <link>https://ageldama.github.io/posts/2019-02feb/2019-02feb07thu-gosched-fun/</link>
      <pubDate>Thu, 07 Feb 2019 15:30:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-02feb/2019-02feb07thu-gosched-fun/</guid>
      <description>&lt;p&gt;Go언어를 요즘에 진지하게 생각하고 계속해서 자료를 찾아보며 익히고&#xA;있다.&lt;/p&gt;&#xA;&lt;p&gt;가장 흥미있는 부분은 Goroutine scheduler 구현과 I/O시스템을 어떻게&#xA;만들었을까인데, 아직은 소스코드를 뜯어 읽고 하지는 못하지만, 그냥 내가&#xA;만들었다면 아마 이렇지 않을까 하는 정도의 추측을 갖고 반대로 예제들을&#xA;만들어보며 확인해보고 있다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;우선 현재의 추측은 다음과 같다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;GOMAXPROCS&lt;/code&gt; 같은걸 이용해서 실행시간에는 필요한만큼만&#xA;최소한으로만 OS Thread을 시작하는듯. &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;너무 많은 스레드가 있어도 어차피 Context switching 비용만&#xA;늘어나고 별 의미는 커녕 더 나쁠 수 있으니까.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Goroutine들은 Go runtime의 Scheduler이 서로 실행기회를 나눠준다.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;실행기회를 다른 goroutine에 yield하는 방법은,&lt;/li&gt;&#xA;&lt;li&gt;I/O operation을 실행하거나&lt;/li&gt;&#xA;&lt;li&gt;Channel에 Receive/Send할때&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;위 (2.2)에서 I/O operation이 Async I/O으로 구현되었을거라고 생각.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;왜냐하면, 그래야 blocking 안되고, Go scheduler으로 실행이 넘어가고,&lt;/li&gt;&#xA;&lt;li&gt;Go scheduler은 I/O event loop을 통해서 적절하게 다음에 실행할&#xA;Goroutine을 결정할 수 있을테니까.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;예제-프로그램-코드&#34;&gt;예제 프로그램 코드&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-13&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-13&#34;&gt;13&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-14&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-14&#34;&gt;14&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-15&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-15&#34;&gt;15&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-16&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-16&#34;&gt;16&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-17&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-17&#34;&gt;17&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-18&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-18&#34;&gt;18&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-19&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-19&#34;&gt;19&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-20&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-20&#34;&gt;20&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-21&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-21&#34;&gt;21&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-22&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-22&#34;&gt;22&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-23&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-23&#34;&gt;23&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-24&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-24&#34;&gt;24&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-25&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-25&#34;&gt;25&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-26&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-26&#34;&gt;26&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-27&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-27&#34;&gt;27&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-28&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-28&#34;&gt;28&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-29&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-29&#34;&gt;29&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-30&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-30&#34;&gt;30&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-31&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-31&#34;&gt;31&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-32&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-32&#34;&gt;32&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-33&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-33&#34;&gt;33&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-34&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-34&#34;&gt;34&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-35&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-35&#34;&gt;35&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-36&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-36&#34;&gt;36&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-37&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-37&#34;&gt;37&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-38&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-38&#34;&gt;38&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-39&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-39&#34;&gt;39&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-40&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-40&#34;&gt;40&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-41&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-41&#34;&gt;41&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;s&#34;&gt;&amp;#34;runtime&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;s&#34;&gt;&amp;#34;sync&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WaitGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;timer started&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;After&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;c1&#34;&gt;// NOTE: this never happens while it can&amp;#39;t get any chance to run by scheduler&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;c1&#34;&gt;// DO NOTHING&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;c1&#34;&gt;// NOTE: doing any I/O here can yield to gorountine scheduler&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WaitGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GOMAXPROCS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bye&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h1 id=&#34;실행결과-결론-생각&#34;&gt;실행결과, 결론, 생각&lt;/h1&gt;&#xA;&lt;p&gt;예상한대로,&lt;/p&gt;</description>
    </item>
    <item>
      <title>ASDF으로 간단한 의존성 연결과 로딩하기</title>
      <link>https://ageldama.github.io/posts/2018-11nov/cl-asdf-custom-load-script/</link>
      <pubDate>Sat, 03 Nov 2018 19:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-11nov/cl-asdf-custom-load-script/</guid>
      <description>&lt;h1 id=&#34;system-이런게-왜-필요하지-require있잖아&#34;&gt;System? 이런게 왜 필요하지? &lt;code&gt;require&lt;/code&gt;있잖아&lt;/h1&gt;&#xA;&lt;p&gt;대부분의 유명한 프로그래밍언어들이 &lt;em&gt;커먼리습의 System&lt;/em&gt; 에 대응하는&#xA;기능이 명확하게 없으니까, 다른 프로그래밍 하거나 하는 방법으로&#xA;이야기를 하지는 않아야겠다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://lispcookbook.github.io/cl-cookbook/systems.html&#34;&gt;https://lispcookbook.github.io/cl-cookbook/systems.html&lt;/a&gt; 에서 마음에 드는 설명을 찾을수 있다.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A &lt;strong&gt;system&lt;/strong&gt; is a collection of Lisp files that together constitute an&#xA;application or a library, and that should therefore be managed as a&#xA;whole. A &lt;strong&gt;system definition&lt;/strong&gt; describes which source files make up the&#xA;system, what the dependencies among them are, and the order they&#xA;should be compiled and loaded in.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 03/11/2018</title>
      <link>https://ageldama.github.io/posts/2018-11nov/03sat-ping/</link>
      <pubDate>Sat, 03 Nov 2018 19:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-11nov/03sat-ping/</guid>
      <description>&lt;h1 id=&#34;작위를-수여받았다&#34;&gt;작위를 수여받았다&lt;/h1&gt;&#xA;&lt;p&gt;받아본 생일선물 중에 가장 귀여운거였다.&lt;/p&gt;&#xA;&lt;p&gt;tweet 1058052532839231488&lt;/p&gt;&#xA;&lt;h1 id=&#34;씨디리핑-음악듣기&#34;&gt;씨디리핑, 음악듣기&lt;/h1&gt;&#xA;&lt;p&gt;지난달부터 갖고 있던 씨디, 듣고 싶던 앨범들 다시 모으면서 리핑한&#xA;씨디들.&lt;/p&gt;&#xA;&lt;p&gt;조금 더 모으고 싶은 아티스트나 앨범들이 있는데 구하기 어려울거&#xA;같아서 걱정.&lt;/p&gt;&#xA;&lt;p&gt;tweet 1058666194616541184&lt;/p&gt;&#xA;&lt;p&gt;주말에 남는 시간에 씨디 리핑하고 음악 들으며 여유부리기.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Ping 20/10/2018</title>
      <link>https://ageldama.github.io/posts/2018-10oct/20sat-ping/</link>
      <pubDate>Sat, 20 Oct 2018 16:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-10oct/20sat-ping/</guid>
      <description>&lt;p&gt;날씨가 너무 좋은 가을.&lt;/p&gt;&#xA;&lt;p&gt;tweet 1053557185534251008&lt;/p&gt;&#xA;&lt;h1 id=&#34;만년필&#34;&gt;만년필&lt;/h1&gt;&#xA;&lt;p&gt;만년필용 가죽 파우치를 찾았다. 들고 다니기 조금 더 편안해진거 같아.&lt;/p&gt;&#xA;&lt;p&gt;tweet 1053557157940015104&lt;/p&gt;&#xA;&lt;p&gt;회사분에게 고마운 선물로 딥펜을 받았다.&lt;/p&gt;&#xA;&lt;p&gt;tweet 1053557478925918208&lt;/p&gt;&#xA;&lt;h1 id=&#34;남이-필요한-행복에-대해&#34;&gt;남이 필요한 행복에 대해&lt;/h1&gt;&#xA;&lt;p&gt;가끔 날이 좋으면 예전처럼 누군가와 함께 좋은 공기를 마시며 산책도 하고&#xA;숲에 가고 싶어진다. 특히 요즘 같은 선선한 계절에는.&lt;/p&gt;&#xA;&lt;p&gt;그런데, 꼭 그래야만 나는 행복함을 느끼나 생각해본다. 그냥 방안에&#xA;좋아하는 오디오로 라디오를 틀어놓고 침대에 뭍혀서 지내는것도 좋고 그냥&#xA;적당한 책을 재밌게 읽고 많은 생각을 할 수 있거나 좋아하는 펜으로 글을&#xA;써도 행복한거 같아.&lt;/p&gt;</description>
    </item>
    <item>
      <title>생각 10/10/2018</title>
      <link>https://ageldama.github.io/posts/2018-10oct/10wed-thought/</link>
      <pubDate>Wed, 10 Oct 2018 12:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-10oct/10wed-thought/</guid>
      <description>&lt;p&gt;연구소에서 종종 휴식시간에 PS4 게임을 하면서 지낸다. 그냥 별로 게임을&#xA;위해서 너무 많은 시간을 보내는걸 원래도 좋아하진 않았지만 독일에 살며&#xA;취미로 다시 시작한 이후로 재미를 붙이고 하고 있었다.&lt;/p&gt;&#xA;&lt;p&gt;그리고 최근에 재밌게 하고 있던 &lt;a href=&#34;https://en.wikipedia.org/wiki/Doom_(2016_video_game)&#34;&gt;DOOM&#xA;2016&lt;/a&gt;을 다른&#xA;게임들보다 내가 좋아하는걸 동료들이 눈치채고 가끔은 둠 이야기를 한다.&lt;/p&gt;&#xA;&lt;p&gt;최근에 그래서인지 &lt;a href=&#34;https://en.wikipedia.org/wiki/John_Carmack&#34;&gt;John&#xA;Carmack&lt;/a&gt; 이야기도 종종&#xA;나온다. 소프트웨어 엔지니어들이니까. 그러다가 한 동료가 Carmack의&#xA;에세이 하나의 링크를 보내줬었다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;많은 다양한 생각들을 추려낸 블로그포스트. 그리고 가끔 지나가듯이 다른&#xA;주제를 이야기하다 이 에세이에 담긴 &lt;em&gt;만트라&lt;/em&gt; 에 대해서 다시 말하며&#xA;생각을 나눠본다. 그리고 더 그렇게하고 싶다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SteamPlay On Linux</title>
      <link>https://ageldama.github.io/posts/2018-10oct/10wed-steamplay-on-linux/</link>
      <pubDate>Wed, 10 Oct 2018 10:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-10oct/10wed-steamplay-on-linux/</guid>
      <description>&lt;p&gt;집에 있는 데스크탑에서 윈도10 그냥 사서 설치하고, 거기에&#xA;&lt;a href=&#34;https://store.steampowered.com/&#34;&gt;스팀&lt;/a&gt; 설치해서 게임이나 하는데&#xA;사용했었음&lt;/p&gt;&#xA;&lt;p&gt;거기에 대부분의 작업은 그냥 리눅스에서 하는게 훨씬 편하고 해서&#xA;Virtualbox에 아치리눅스 게스트 만들어놓고 거기에 접속해서&#xA;작업했었었다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;그러다가&#xA;&lt;a href=&#34;https://support.steampowered.com/kb_article.php?ref=9439-QHKN-1308&#34;&gt;SteamPlay&lt;/a&gt;이란걸&#xA;알게됐고, 모든 게임이 다 지원되는건 아니더라도 그냥 앞으로 나올&#xA;게임들중에 리눅스를 지원하거나 &lt;a href=&#34;https://www.winehq.org/&#34;&gt;Wine&lt;/a&gt;을&#xA;통해서 실행할 수 있으면 이걸 쓰는게 더 낫고 윈도가 싫었다.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;여튼, 좀 설치하고 써보니:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;모든 게임을 지원하지 않는다.&#xA;1. 적당히 지원될거라고 생각하던 게임들도 그냥 &lt;em&gt;됐고, SteamPlay지원&#xA;안해도 돌려볼랜다&lt;/em&gt; 체크해봤자 제대로 안굴러감.&lt;/li&gt;&#xA;&lt;li&gt;게임패드나 그런것 지원은 윈도보다 편안함. 그냥 USB 꽂으면 바로 동작.&lt;/li&gt;&#xA;&lt;li&gt;처음엔 Flatpak같은걸로 설치해서 깔끔하게 해보려다가 그냥&#xA;Pacman으로 Runtime/Native 설치해서 오히려 속편함.&lt;/li&gt;&#xA;&lt;li&gt;NVidia Proprietary Driver 설치했으면, 조금 더 구글링해서&#xA;고쳐줘야할게 생김.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;하프라이프2이나 그런것만 돌려봤는데 전혀 리눅스라서 따로 신경쓸건&#xA;없었다. 폴아웃3이나 그런게 동작 안하는건 너무 슬펐다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CD Ripping!</title>
      <link>https://ageldama.github.io/posts/2018-10oct/06sat-cd-ripping/</link>
      <pubDate>Sat, 06 Oct 2018 15:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-10oct/06sat-cd-ripping/</guid>
      <description>&lt;p&gt;요즘에 &lt;a href=&#34;https://ageldama.github.io/posts/2018-10oct/03wed-ping/&#34;&gt;HiFiBerry DAC+&lt;/a&gt;으로 라디오,&#xA;음악을 들으며 귀가 즐거워서..&lt;/p&gt;&#xA;&lt;p&gt;갖고 있는 씨디가 별로 없는데, 이유는.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;음악을 듣는걸 게을리했었고,&lt;/li&gt;&#xA;&lt;li&gt;딱히 음반으로 들었던건, 테잎 시대에 좀 사다가,&#xA;1. 씨디 시대엔 음원을 구하거나 사는게 더 많아지고,&#xA;2. 씨디를 듣지 않게됨.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;그러다가 그냥 음질이 조금이라도 더 낫게 들을려고 CD ripping이 답이라는&#xA;결론을 얻었다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;어차피 음원 사는거랑 비슷한 가격이 됨.&lt;/li&gt;&#xA;&lt;li&gt;음원을 어차피 내가 만드는거라 원하는 음질으로 떠서 보관하면됨.&lt;/li&gt;&#xA;&lt;li&gt;그리고 뭣해서 잃어버려도 다시 떠도됨.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;결국 대장정을 시작했다..&lt;/p&gt;&#xA;&lt;h1 id=&#34;준비물들을-모았다&#34;&gt;준비물들을 모았다.&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;CD-ROM 드라이브를 어차피 구해도 SATA방식으로 구해야할거 같고,&#xA;&lt;ol&gt;&#xA;&lt;li&gt;그냥 굳이 내장형으로 붙이기 싫어서, USB방식 ODD으로 구매.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;USB이외에 전원이 따로 있어야 제대로 돌아갈테니, 전원이 빵빵하게&#xA;공급되는 USB허브를 구매.&lt;/li&gt;&#xA;&lt;li&gt;USB메모리스틱을 샀다.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;HiFiBerry 기계에 저장소로 붙여주려고.&lt;/li&gt;&#xA;&lt;li&gt;그런데 생각해보니 용량이 부족해져서 결국엔 NAS을 조립하게 될거&#xA;같아.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;abcde&#34;&gt;abcde&lt;/h1&gt;&#xA;&lt;p&gt;그냥 &lt;a href=&#34;https://en.wikipedia.org/wiki/Cdparanoia&#34;&gt;cdparanoia&lt;/a&gt; 이랑&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/FLAC&#34;&gt;FLAC&lt;/a&gt; 정도로 세팅을 하려고 했다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 05/10/2018</title>
      <link>https://ageldama.github.io/posts/2018-10oct/05fri-ping/</link>
      <pubDate>Fri, 05 Oct 2018 18:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-10oct/05fri-ping/</guid>
      <description>&lt;h1 id=&#34;lamy2000-사용하면서&#34;&gt;Lamy2000 사용하면서&lt;/h1&gt;&#xA;&lt;p&gt;tweet 1048150207110688768&lt;/p&gt;&#xA;&lt;p&gt;tweet 1048059130429100033&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;잉크는 Lamy 잉크를 사서 쓰자.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;다른 잉크보다 훨씬 번짐도 적고,&lt;/li&gt;&#xA;&lt;li&gt;필기감도 좋다. 약간 더 비싸지만 어쩔 수 없다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;손에 힘을 더 빼야한다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;데스크탑-피씨-리눅스-설치&#34;&gt;데스크탑 피씨 리눅스 설치&lt;/h1&gt;&#xA;&lt;p&gt;HDD 데이터 디스크로 쓰던거 용량 큰쪽에 그냥 백업하고 날린 다음에&#xA;리눅스를 통으로 설치.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/&#34;&gt;Steam&lt;/a&gt; 게임이나 가끔하느라 윈도&#xA;host에 리눅스 guest으로 VM 설정해서 주로 써왔는데, 그냥 리눅스를&#xA;host으로 쓰기로 결정.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://flathub.org/apps/details/com.valvesoftware.Steam&#34;&gt;Flatpak&lt;/a&gt;으로&#xA;나와서 배포판이나 데스크탑 환경에 상관없이 설치가 가능해져서 그냥&#xA;설치하고 써보기로 했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HiFiBerry DAC&#43; &#43; Raspberry Pi 3 설정</title>
      <link>https://ageldama.github.io/posts/2018-10oct/rpi3-hifiberry-dacplus-config/</link>
      <pubDate>Wed, 03 Oct 2018 20:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-10oct/rpi3-hifiberry-dacplus-config/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.hifiberry.com/&#34;&gt;https://www.hifiberry.com/&lt;/a&gt; 요거 Raspberry Pi 3에 세팅한 모험에 대한&#xA;이야기.&lt;/p&gt;&#xA;&lt;h1 id=&#34;wifi잡기&#34;&gt;WIFI잡기&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# /etc/wpa_supplicant/wpa_supplicant.conf &#xA;ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev&#xA;#update_config=1&#xA;country=GB&#xA;&#xA;network={&#xA;&#x9;ssid=&amp;#34;iptime&amp;#34;&#xA;&#x9;psk=&amp;#34;xxxxxxxxxx&amp;#34;&#xA;&#x9;key_mgmt=WPA-PSK&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;wpa_passphrase&lt;/code&gt; 안쓰고 그냥 plaintext으로 써도 동작.&lt;/li&gt;&#xA;&lt;li&gt;내 공유기랑은 &lt;code&gt;country=GB&lt;/code&gt; 이 아니라, KR, US 등으로 되어 있으면 안되어서 해멤.&lt;/li&gt;&#xA;&lt;li&gt;그리고 &lt;code&gt;ip link set wlan0 {up|down}&lt;/code&gt; 정도로 wlan0 인터페이스를 up/down하면됨.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;사운드-드라이버-설정&#34;&gt;사운드 드라이버 설정&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;내장 사운드카드 드라이버는 &lt;a href=&#34;https://ko.wikipedia.org/wiki/Modprobe&#34;&gt;modprobe&lt;/a&gt; blacklist에 추가해서 끄자.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/boot/config.txt&lt;/code&gt;에 HiFiBerry DAC+ 드라이버 오버레이를 지정해야함.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;내장-사운드-드라이버-끄기&#34;&gt;내장 사운드 드라이버 끄기&lt;/h2&gt;&#xA;&lt;p&gt;다음처럼 modprobe blacklist에 추가해서 로딩 못하게 막음.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 03/10/2018</title>
      <link>https://ageldama.github.io/posts/2018-10oct/03wed-ping/</link>
      <pubDate>Wed, 03 Oct 2018 20:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-10oct/03wed-ping/</guid>
      <description>&lt;h1 id=&#34;hifiberry--raspberry-pi-3&#34;&gt;HiFiBerry + Raspberry Pi 3&lt;/h1&gt;&#xA;&lt;p&gt;tweet 1047432827866767360&lt;/p&gt;&#xA;&lt;p&gt;요것임.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.hifiberry.com/products/dacplus/&#34;&gt;https://www.hifiberry.com/products/dacplus/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://eleparts.co.kr/goods/view?no=3700883&#34;&gt;http://eleparts.co.kr/goods/view?no=3700883&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;정말 예전, 한 3년전쯤에 사서 한국집에 묵혀두고, 그때는 세팅에 실패해서&#xA;&lt;em&gt;안되는건가&amp;hellip;&lt;/em&gt; 이러고 포기하고 있다가 다시 시도해봤다.&lt;/p&gt;&#xA;&lt;p&gt;조금 삽질을 몇번하다가, 그리고 정 안되면 똑같은 부품 다시 주문해서라도&#xA;어쩐지 만들어보고 싶다는 알수 없는 의지가 발동해서 세팅에 성공. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;어쨌든 &lt;a href=&#34;https://www.freebsd.org/&#34;&gt;FreeBSD&lt;/a&gt;을 설치해서 써볼까하다가&#xA;드라이버 지원이 필요한게 안되서 포기.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;결론은,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;라디오, MP3 걸어놓고 듣기에 좋다.&lt;/li&gt;&#xA;&lt;li&gt;음질은 확실히 이어폰으로 들어보면 같은곡에 대해서 훨씬 깨끗하고 노이즈 없이 재생하는거 &lt;strong&gt;같다&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.runeaudio.com/&#34;&gt;RuneAudio&lt;/a&gt;,&#xA;&lt;a href=&#34;https://www.mopidy.com/&#34;&gt;Mopidy&lt;/a&gt; 같은걸로 Web UI 세팅해서 쓸수도&#xA;있는거 같은데, 그냥 난 SSH으로만 들어가서 쓰기에 나쁘지 않아서&#xA;거기까니 삽질은 포기.&lt;/li&gt;&#xA;&lt;li&gt;마음먹고 PulseAudio 서버로 써서 윈도, 리눅스에서 사운드 출력을&#xA;이걸로 할수있게도 가능한데 일단은 여기까진 안가기로.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;gnupg-재밌게-쓰기&#34;&gt;GnuPG 재밌게 쓰기&lt;/h1&gt;&#xA;&lt;p&gt;딱히 쓸얘기는 없는데, 그냥 &lt;a href=&#34;https://gnupg.org/&#34;&gt;GnuPG&lt;/a&gt;을 더 많이 쓰게&#xA;된거 같아.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CQuery &#43; LSP vs CMake-IDE &#43; RTags</title>
      <link>https://ageldama.github.io/posts/2018-09sep/cquery-vs-cmake-ide/</link>
      <pubDate>Sun, 23 Sep 2018 12:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-09sep/cquery-vs-cmake-ide/</guid>
      <description>&lt;p&gt;LSP + CQuery을 써보려고 했는데, 결국 &lt;a href=&#34;https://ageldama.github.io/posts/2018-05may-emacs-cmake-ide-screencast/&#34;&gt;CMake-IDE +&#xA;RTags&lt;/a&gt; 조합으로&#xA;원래대로 쓰게될거 같아. :&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;_build/&lt;/code&gt; 와 같이 CMake, Ninja, Makefile등의 파일들을 별도의&#xA;디렉토리로 만들어서 필드하고 싶은데, 제대로 지원을 못한다.&#xA;1. 그냥 프로젝트 소스코드랑 같이 generate하고 &lt;code&gt;gcc&lt;/code&gt;등의 중간&#xA;파일이 모두 같이 남아서 지저분해져서 싫어함.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;아직은 별로 내 마음에 꼭 들게 만들기는 어려울거 같아서. 그래도&#xA;인상적이었던 부분들:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;flycheck에 전용으로 연동되어 있는 점.&lt;/li&gt;&#xA;&lt;li&gt;company-lsp이 생각보다 훨씬 부드럽고 자동완성 잘되는거.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;미래에는 그냥 LSP기반만 남을거 같아서, 이것도 &amp;ldquo;helm-rg의 모험&amp;quot;처럼&#xA;아직은 완전히 전환은 못할거 같긴하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>해보기 23/09/2018</title>
      <link>https://ageldama.github.io/posts/2018-09sep/23sun-todos/</link>
      <pubDate>Sun, 23 Sep 2018 12:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-09sep/23sun-todos/</guid>
      <description>&lt;h1 id=&#34;lsp-갖고놀기&#34;&gt;LSP 갖고놀기&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Language Server Protocol : &lt;a href=&#34;https://langserver.org/&#34;&gt;https://langserver.org/&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ES6:&#xA;&lt;a href=&#34;https://github.com/sourcegraph/javascript-typescript-langserver&#34;&gt;https://github.com/sourcegraph/javascript-typescript-langserver&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;다른건 FlyCheck + Eslint으로 만족스러운데, 코드네비게이션만 좀.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;C/C++:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cquery-project/cquery&#34;&gt;https://github.com/cquery-project/cquery&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/MaskRay/ccls&#34;&gt;https://github.com/MaskRay/ccls&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;es6-기능들-다시-한번-주욱-읽어보기&#34;&gt;ES6 기능들 다시 한번 주욱 읽어보기&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://es6-features.org/&#34;&gt;http://es6-features.org/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;딱히 뭣도 몰라서 한번 주욱 읽어보려고. 더 알고 싶지는 않다만&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;tweet 1039770698187563009&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;이런 언어지만.&lt;/p&gt;&#xA;&lt;h1 id=&#34;대안으로서-reasonml&#34;&gt;대안으로서 ReasonML?&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://reasonml.github.io/&#34;&gt;https://reasonml.github.io/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ocaml/merlin&#34;&gt;https://github.com/ocaml/merlin&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;..예전에 좋아하던 OCaml 다시 실용적으로 써도 재밌을거 같기도하고.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol&gt;&#xA;&lt;li id=&#34;fn:1&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EB%A6%AC%EC%8A%A4%EC%BD%94%ED%94%84_%EC%B9%98%ED%99%98_%EC%9B%90%EC%B9%99&#34;&gt;https://ko.wikipedia.org/wiki/%EB%A6%AC%EC%8A%A4%EC%BD%94%ED%94%84_%EC%B9%98%ED%99%98_%EC%9B%90%EC%B9%99&lt;/a&gt; 이거아님.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ping 23/09/2018</title>
      <link>https://ageldama.github.io/posts/2018-09sep/23sun-ping/</link>
      <pubDate>Sun, 23 Sep 2018 04:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-09sep/23sun-ping/</guid>
      <description>&lt;h1 id=&#34;영화-멀홀랜드-드라이브&#34;&gt;영화: &amp;lt;멀홀랜드 드라이브&amp;gt;&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://ageldama.github.io/images/2018-09sep/mulholland-dr-poster-kr.jpg&#34; width=&#34;400&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;씁쓸. 그리고 영화 다보고 해석들 읽고 다시 생각하고 장면들에서 느끼던&#xA;이상함점들이 왜 그랬었구나 맞춰보니 더 씁쓸. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;그리고 살면서 사랑이나 그런 환상을 갖는것들처럼 그런 완전한 꿈을&#xA;생각하듯이 달콤한 전반부의 내용들이 이해됨.&lt;/p&gt;&#xA;&lt;h1 id=&#34;추석-연휴에-서울에-있기&#34;&gt;추석 연휴에 서울에 있기&lt;/h1&gt;&#xA;&lt;p&gt;어차피 고향도, 친척들도 거의 다 서울에 살아서 평생 명절마다 서울에서&#xA;보내는게 너무 익숙하다. 그리고 이맘때가 나는 서울에서 좋은거 같아.&lt;/p&gt;&#xA;&lt;p&gt;그냥 적당히 조용하고 차소음도 사라지고 (심지어 우리집은 큰길에서 한참&#xA;멀리있음에도) 공기도 훨씬 좋아진다. 밤거리도 한적해지고. 이런 분위기를&#xA;좋아해서.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 22/09/2018</title>
      <link>https://ageldama.github.io/posts/2018-09sep/22sat-ping/</link>
      <pubDate>Sat, 22 Sep 2018 14:30:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-09sep/22sat-ping/</guid>
      <description>&lt;h1 id=&#34;새-만년필--pilot-kaküno&#34;&gt;새 만년필 : Pilot Kaküno!&lt;/h1&gt;&#xA;&lt;p&gt;tweet 1043371766318424064&lt;/p&gt;&#xA;&lt;p&gt;필기감은 같은 모델, 각 제품별로 조금씩 다른듯.  가격이 저렴해서 만년필&#xA;취미를 권하고 싶은 3개를 사서 회사 다른팀이나 같은 연구소 사람들에게&#xA;선물했다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;게임--둠2016-쉐도우-오브-더-툼레이더&#34;&gt;게임 : 둠2016, 쉐도우 오브 더 툼레이더&lt;/h1&gt;&#xA;&lt;p&gt;가끔 시간이 날때, 예전에는 길을 못찾아서 많이 진행을 못했었던, &lt;a href=&#34;https://en.wikipedia.org/wiki/Doom_(2016_video_game)&#34;&gt;둠&#xA;2016&lt;/a&gt; 을 다시&#xA;하고 있다. 지금은 꽤 많이 진행해서 &lt;em&gt;&amp;ldquo;내가 바로 둠가이다. 10점 만점에&#xA;12점인 사나이!&amp;rdquo;&lt;/em&gt; 모드로 플레이 할수있게 됐다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Doom_Eternal&#34;&gt;둠 이터널&lt;/a&gt; 나오면 바로 지르게 될거 같아.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lamy 2000 &#43; 모나미 병잉크</title>
      <link>https://ageldama.github.io/posts/2018-09sep/lamy2000-monami-ink/</link>
      <pubDate>Sun, 16 Sep 2018 12:30:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-09sep/lamy2000-monami-ink/</guid>
      <description>&lt;p&gt;라미2000 사고, 모나미 병잉크 처음으로 사서 충전을&#xA;겨우했다. 카트리지방식만 계속 써오다가 처음에는 엄청 어떻게 피스톤&#xA;방식으로 충전하나 설명서를 봐도 잘 모르겠고, 언제나처럼 좋아하는&#xA;물건을 샀을때 처음의 느낌 그대로 내가 잘못해서 망가뜨리지는 않을까&#xA;걱정하며 손을 떨며 충전을 했다.&lt;/p&gt;&#xA;&lt;p&gt;tweet 1040804232339742720&lt;/p&gt;&#xA;&lt;p&gt;일단 필기감은 기존에 써오던 사파리, Lx이랑 너무 달랐다. 둘 다 이제는&#xA;내손에 맞춰서 닙이 부드러워진것도 같아서 정말 부드럽고 날카롭게 글을&#xA;쓰다가 닙을 종이에서 뗄때 짝 달라붙어있다가 떨어지는 쫀득한 느낌이&#xA;있다면, 2000은 그냥 주욱 주욱 글이 써져서 좋았다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>어째서 아치리눅스를 쓰며 데스크탑환경을 안쓰는지</title>
      <link>https://ageldama.github.io/posts/2018-09sep/2018-09sep15sat-my-choices-linux/</link>
      <pubDate>Sat, 15 Sep 2018 16:20:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-09sep/2018-09sep15sat-my-choices-linux/</guid>
      <description>&lt;p&gt;나는 데스크탑 환경을 사용 안한지 꽤 오래된것 같아.&lt;/p&gt;&#xA;&lt;p&gt;예전엔 이런식이었던거 같아:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;왠만하면, 그냥 세팅하는데 시간낭비하지말고 그냥 제공되는 Gnome, KDE&#xA;같이 예쁜거 쓰자.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&amp;hellip;였었는데, 어느날 ASUS 넷북에 낮은 CPU파워으로 리눅스를 설정하고,&#xA;이런 &amp;ldquo;가벼운 데스크탑 환경&amp;quot;을 직접 꾸며서 사용하면서, 오히려 맥북보다&#xA;더 편하고 계속 쓰고 싶게 만들고, 내가 더 빠져서 사랑하며 사용하는걸 본&#xA;이후로 집과 직장의 데스크탑도 모두 바꾸게됐다.&lt;/p&gt;&#xA;&lt;p&gt;그리고 가장 마우스 사용으로부터 오는 잡다한 스트레스나 그런것들도 없고&#xA;가장 내게 익숙하고 편안한 환경을 만들어서 행복하게 쓸수있는거 같아.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 15/09/2018</title>
      <link>https://ageldama.github.io/posts/2018-09sep/2018-09sep15sat-ping/</link>
      <pubDate>Sat, 15 Sep 2018 15:30:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-09sep/2018-09sep15sat-ping/</guid>
      <description>&lt;h1 id=&#34;새-만년필--lamy-2000-해피해킹-기계식-키보드&#34;&gt;새 만년필 : LAMY 2000, 해피해킹, 기계식 키보드&lt;/h1&gt;&#xA;&lt;p&gt;새 만년필을 샀는데, 조금 저렴한 폴리카보네이트 버젼의 LAMY 2000을&#xA;샀다. 기존에 LAMY Lx, 사파리는 행복하게 써왔었는데, 카트리지를 사용해&#xA;충전하는 방식이 아니고 또 가격대도 조금은 높은 만년필을 질렀다.&lt;/p&gt;&#xA;&lt;p&gt;아직 병잉크는 받지 못해서 충전해서 사용은 못해봤다. 기대된다.&lt;/p&gt;&#xA;&lt;p&gt;처음 만년필질을 시작할때는,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;뭐 그냥 저렴한 저가형 브랜드 실용적인 목적으로만 사서 써야지, 그러니&#xA;사파리랑 Lx정도까진 뭐&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;..이런 마인드였었다가 점점 만년필 자체로 글을 쓰는 감각에 중독되는거&#xA;같아. 기계식키보드도 그런거 같고.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NeoVim, Evil-mode and Emacs의 모험</title>
      <link>https://ageldama.github.io/posts/2018-07jul/2018-07jul-nvim-evil-and-emacs/</link>
      <pubDate>Sat, 28 Jul 2018 12:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-07jul/2018-07jul-nvim-evil-and-emacs/</guid>
      <description>&lt;h2 id=&#34;내적모순&#34;&gt;&amp;ldquo;내적모순&amp;rdquo;&lt;/h2&gt;&#xA;&lt;p&gt;이맥스에서 &lt;a href=&#34;https://www.emacswiki.org/emacs/Evil&#34;&gt;Evil&lt;/a&gt;을 쓰면서 몇가지 짜증나는게 있어왔다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Evil 자체의 문서화가 조금 거시기하다.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;거기에&#xA;&lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;Which-Key&lt;/a&gt;같은&#xA;키바인딩을 실시간으로 확인할 수 있는 방법도 제대로 안먹히게&#xA;된거라, 이맥스에서 쩔어주는 기능인 &lt;em&gt;자기 자신을 확인하며 단축키&#xA;안외우기&lt;/em&gt; 같은게 다 무의미해짐.&lt;/li&gt;&#xA;&lt;li&gt;공식 사이트 들어가도 문서는 없다. 그냥 Vim 온라인 help을 보거나&#xA;하라는 친절인거 같다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Magit, Edb, 등등 대부분의 이맥스의 다른 Major mode들이랑은 정말&#xA;충돌하는 경우가 너무 많음.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/dot-emacs-2018#L421&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/dot-emacs-2018#L421&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;위의 링크만 봐도, 내가 얼마나 충돌이 나는 모드들을 경험했는지&#xA;알수있다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;그럼에도-포기할수없는-나의-영도자&#34;&gt;그럼에도 포기할수없는 나의 영도자&lt;/h2&gt;&#xA;&lt;p&gt;좋은점, 그래도 고집을 갖고 계속 써야겠다고 생각하던 부분은:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs &#43; CMake-IDE Screencast</title>
      <link>https://ageldama.github.io/posts/2018-05may/2018-05may-emacs-cmake-ide-screencast/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-05may/2018-05may-emacs-cmake-ide-screencast/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/R5tV-mp8WnE?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;이건-무엇인가&#34;&gt;이건 무엇인가&lt;/h1&gt;&#xA;&lt;p&gt;Emacs Configurations: &lt;a href=&#34;https://github.com/ageldama/configs/tree/master/emacs/cmake-ide&#34;&gt;https://github.com/ageldama/configs/tree/master/emacs/cmake-ide&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;이맥스에서 C++ 개발 편하게 하려고 이것저것 알아보다가 결국엔 &lt;a href=&#34;https://github.com/atilaneves/cmake-ide&#34;&gt;CMake-IDE&lt;/a&gt; + &lt;a href=&#34;https://github.com/Andersbakken/rtags&#34;&gt;RTags&lt;/a&gt; 조합이 제일 괜찮다는 결론에 도달해서 만들어본 설정이다.&lt;/p&gt;&#xA;&lt;p&gt;원래 사용하는 환경이 &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;Evil&lt;/a&gt;은 아니었는데,&#xA;&lt;a href=&#34;http://spacemacs.org/&#34;&gt;Spacemacs&lt;/a&gt; 을 조금 쓰다가 편한거 같아서 Evil으로 옮겨탔다.&lt;/p&gt;&#xA;&lt;p&gt;지금은 그냥 Spacemacs은 다운도 잘되고 너무 무겁고 설정을 &lt;a href=&#34;http://spacemacs.org/layers/LAYERS.html&#34;&gt;레이어 방식&lt;/a&gt; 으로 할게 아니면 짜증나게 하는 부분도 많고, 그렇다고 레이어가 완전히 내가 그냥 커스텀으로 만들어서 바로바로 머지하는 구조도 아니고 중앙에서 관리하는 방식으로만 되는거 같아서, 옆으로 치우고, 바닐라 이맥스에 Spacemacs스럽게 직접 설정해서 가볍게 사용하고 있다. :-)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Windows에서 Vscode이랑 행복하게 쓰기</title>
      <link>https://ageldama.github.io/posts/2018-04apr/2018-04apr-golang-windows-vscode/</link>
      <pubDate>Sat, 14 Apr 2018 14:59:31 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-04apr/2018-04apr-golang-windows-vscode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Golang&lt;/a&gt; 윈도 데탑에서 그냥 끄적거리기 괜찮은거 같아.&#xA;그냥 편집기도 윈도에선 이맥스나 Vim 다 골치아파서 &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VsCode&lt;/a&gt; 쓰니까 설정도 따로 없고. (물론 리눅스에선 이맥스 그냥 쓰지만&amp;hellip;)&lt;/p&gt;&#xA;&lt;p&gt;여튼 그런데 윈도에서 기본적으로 C컴파일러 설치되어 있어야 제대로 굴러가서,&#xA;&lt;a href=&#34;https://sourceforge.net/projects/mingw-w64/&#34;&gt;Mingw64&lt;/a&gt; 설치하고, &lt;code&gt;$MINGW64/bin&lt;/code&gt; 디렉토리 &lt;code&gt;$PATH&lt;/code&gt;에 걸어주니 잘됨.&lt;/p&gt;&#xA;&lt;p&gt;VsCode에서 디버거도 잘 붙고 만족스럽다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2017년 10월 22일, 블로깅 귀찮아</title>
      <link>https://ageldama.github.io/posts/2017/2017-10-22-blogging/</link>
      <pubDate>Sun, 22 Oct 2017 21:42:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-10-22-blogging/</guid>
      <description>&lt;p&gt;과연 블로깅이 이렇게나 힘들어야 하는 일인가 생각해봄.&lt;/p&gt;&#xA;&lt;p&gt;요즘엔 정말 각자의 개소리를 쉽게 올리는 트위터나 페북 같은게&#xA;혁명적이라는 생각이 든다. 특히 예전에 각종 웹애플리케이션으로 쓰레기&#xA;같은 위지윅 에디터 같은거니 지원하고 막상 어떤 글을 하나 올리기 진짜&#xA;끔찍한 경험을 주던것들을 돌이켜보면 더욱 더.&lt;/p&gt;&#xA;&lt;p&gt;어차피 사람들은 그런거 아무리 쥐어줘봤자 귀찮을뿐이고 한번 쳐다도&#xA;안보고 각자 자기 하고 싶은 거지 같은 방법을 찾아내어 잘도 이상한&#xA;글들 생산해내는걸 더 좋아한다.&lt;/p&gt;&#xA;&lt;p&gt;그리고 그런면에서 그냥 이미지, 동영상, 링크, 남에 글 인용 정도나 되는&#xA;트위터 같은거야말로 배설하기 진짜 좋은 도구이지 않은가 싶었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HOWTO: Private Docker Registry?</title>
      <link>https://ageldama.github.io/posts/2017/2017-07-11-private-docker-registry-howto/</link>
      <pubDate>Tue, 11 Jul 2017 20:20:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-07-11-private-docker-registry-howto/</guid>
      <description>&lt;p&gt;말보다 예제 깃헙 Project &amp;ndash; &lt;a href=&#34;https://github.com/ageldama/private-docker-registry-howto&#34;&gt;https://github.com/ageldama/private-docker-registry-howto&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;내 피씨에서 작업하던거 서버에 바로 올려보고 싶은데,&lt;/li&gt;&#xA;&lt;li&gt;회사에 레지스트리가 없을때,&lt;/li&gt;&#xA;&lt;li&gt;혹은 레지스트리를 개발서버에 올리지도 못하고 어쨌든 개발서버에 도커 이미지 옮기고 싶을때&lt;/li&gt;&#xA;&lt;li&gt;..이런 이상한 상황에서도 쓸만하도록 고민해봄.&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>2017년 7월 11일, 요즘 나는</title>
      <link>https://ageldama.github.io/posts/2017/2017-07-11-myself/</link>
      <pubDate>Tue, 11 Jul 2017 18:35:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-07-11-myself/</guid>
      <description>&lt;p&gt;한국에 와서 다시 일을 다니고 있음. 백엔드 소프트웨어 엔지니어로 과거에&#xA;이미 다른 사람들이 만들어놓은걸 마음에 들지 않는 모양을 조금씩&#xA;고쳐가고 그럭저럭 출퇴근.&lt;/p&gt;&#xA;&lt;p&gt;장마도 오고 엄청나게 덥다. 묘하게 독일에서 똑같은 8시간 근무인데&#xA;한국에서는 출퇴근이 엄청나게 힘들다는 생각이 들었다. 그리고 실제로&#xA;집밖에서 생활하는 시간을 생각하면 하루 8시간 수면을 하기도 빠듯해서&#xA;정말 이상하구나 생각이든다. 거기에 독일에서 생활할때는 나혼자 생활해서&#xA;밥이며 청소 같은것들도 내가 혼자해야 했었던걸 생각해도 이상할 정도로&#xA;한국에서의 생활은 시간이 쪼들린다.&lt;/p&gt;&#xA;&lt;p&gt;여하튼 재미있는건 요즘엔 Python, Flask, SQLAlchemy으로 나름대로&#xA;재미있게 작업하고 나름대로 능률적으로 작업을 하고 TDD 잘 적용해서 문제&#xA;없게 편안하게 작업하는 방법들을 익힌거 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>예전 모나드를 이용한 비동기코드의 정리에 대한 아이디어를 다시 생각해보기</title>
      <link>https://ageldama.github.io/posts/2017/2017-02-26-aync-rxjava-and-monad/</link>
      <pubDate>Sun, 26 Feb 2017 13:50:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-02-26-aync-rxjava-and-monad/</guid>
      <description>&lt;p&gt;예전 내가 썼던 블로그가 갑자기 떠올랐다. &lt;a href=&#34;http://ageldama.blogspot.de/2012/03/nodejs-haskell-io-monad.html&#34;&gt;http://ageldama.blogspot.de/2012/03/nodejs-haskell-io-monad.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;내용은,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;콜백헬 싫다.&lt;/li&gt;&#xA;&lt;li&gt;그런데, 하스켈의 IO Monad처럼 imperative code을 작성할 수 있으면,&#xA;3. 이것들끼리의 제어권을 주고 받는걸 event loop측에서 제어하면서도,&#xA;4. 각각의 statements끼리 그냥 주욱 흐름대로 작성한것과 다르지 않게 짜기 쉽다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;굳이 이 얘기 왜 하냐하면, 사실 요즘에 RxJava2 보고, Python3에서&#xA;asyncio 같은거 보면서 이런거, 그러니까 결국엔 모나드스러운 체이닝을&#xA;구현하고, 그걸로 콜백들을 풀어서 잘 해결하고 있는거 같은 인상이&#xA;들어서.&lt;/p&gt;&#xA;&lt;p&gt;결론? 내 아이디어 부심. 그리고 조금 더 잘 생각하고 실제로 어떻게&#xA;구현할지 고민해봤다면 좋았을거라는, 나 자신의 능력 한탄하기.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SBCL을 OSX에서 실행할때 멀티쓰레딩 켜기.</title>
      <link>https://ageldama.github.io/posts/2017/2017-02-25-sbcl-osx-multithread/</link>
      <pubDate>Sat, 25 Feb 2017 16:40:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-02-25-sbcl-osx-multithread/</guid>
      <description>&lt;p&gt;SBCL은 멀티쓰레딩을 잘 지원하는 커먼리습 컴파일러이지만,&#xA;공식사이트에서 제공하는 리눅스 바이너리가 아니라 OSX 바이너리는&#xA;멀티쓰레딩이 꺼져서 컴파일되어있다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.sbcl.org/manual/#Threading&#34;&gt;http://www.sbcl.org/manual/#Threading&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;요건 자기 리습에서 &lt;code&gt;*features*&lt;/code&gt; 을 평가해서, 리스트에 &lt;code&gt;:threading&lt;/code&gt;,&#xA;&lt;code&gt;:sb-thread&lt;/code&gt; 같은 키워드를 포함하는지 확인해보면 알 수 있다.&lt;/p&gt;&#xA;&lt;p&gt;어쨌든 지원하지 않을 경우에, 컴파일을 다시 해야하는데, 우선&#xA;준비물은 &lt;a href=&#34;http://clisp.org/&#34;&gt;GNU CLISP&lt;/a&gt; 같은 여기저기서 잘굴러가고&#xA;적당히 설치해서 부트스크래핑에 이용 가능한 커먼리습 컴파일러를 준비한다.&lt;/p&gt;&#xA;&lt;p&gt;다음 포스트를 참고해서 작업해봤다.:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://haminhvuong-blog.tumblr.com/post/22109095116/compile-sbcl-with-multi-thread-enabled-on-os-x&#34;&gt;http://haminhvuong-blog.tumblr.com/post/22109095116/compile-sbcl-with-multi-thread-enabled-on-os-x&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;create &lt;code&gt;customize-target-features.lisp&lt;/code&gt; with content&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt;2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt;3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-4&#34;&gt;4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-5&#34;&gt;5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-6&#34;&gt;6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-7&#34;&gt;7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-8&#34;&gt;8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;flet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;enable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pushnew&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;disable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;features&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;remove&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;features&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;;; Threading support, available only on x86/x86-64 Linux, x86Solaris&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;;; and x86 Mac OS X (experimental).&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;enable&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:sb-thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;그리고 다음의 커맨드들로 빌드하고 설치 끝.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2017년 1월, 요즘 나는.</title>
      <link>https://ageldama.github.io/posts/2017/2017-01-29-myself-nowadays/</link>
      <pubDate>Sun, 29 Jan 2017 12:15:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-01-29-myself-nowadays/</guid>
      <description>&lt;p&gt;요즘엔 그냥 독일 생활, 도르트문트에 조금씩 더 적응해서 사는게 편안해졌다.&lt;/p&gt;&#xA;&lt;p&gt;식기세척기, 세탁기, 커피머신, 팀사람들, 출퇴근길, 놀러가는 동네,&#xA;구경가는 전자제품상가.&lt;/p&gt;&#xA;&lt;p&gt;그냥 어느정도 이제는 독일어를 하나도 못하지만, 적어도 팀 사람들과는&#xA;정도 붙이고 재밌게 잘지내가고 있는거 같다.&lt;/p&gt;&#xA;&lt;p&gt;커피를 캡슐커피 기계가 있어서 적당히 입맛을 붙이고&#xA;마셔보고있다. 괜찮다. 토스트랑 꿀이랑 사다가 가볍게 먹고 해결하고&#xA;살고있다.&lt;/p&gt;&#xA;&lt;p&gt;비자도 4년짜리 블루카드도 됐고, 마음이 편안해졌다.&lt;/p&gt;&#xA;&lt;p&gt;책은&#xA;&lt;a href=&#34;http://book.daum.net/detail/book.do?bookid=KOR9791195677153&#34;&gt;&lt;em&gt;열한계단&lt;/em&gt;&lt;/a&gt; 을&#xA;읽고 많은 생각을 해봤다. &lt;em&gt;체체파리의 비법&lt;/em&gt;, &lt;em&gt;시녀이야기&lt;/em&gt;, 그리고 테드&#xA;챙의 &lt;em&gt;당신 인생의 이야기&lt;/em&gt; 을 읽어볼까 생각하고 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Erlang에 더 관심을 기울여야 할 시점인거 같다</title>
      <link>https://ageldama.github.io/posts/2017/2017-01-22-aio-rx-and-erlang/</link>
      <pubDate>Sun, 22 Jan 2017 16:15:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-01-22-aio-rx-and-erlang/</guid>
      <description>&lt;p&gt;그냥 최근의 자바나 node.js, 특히&#xA;자바의 &lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava&lt;/a&gt; 같은걸&#xA;보다보면, &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 뭔가 언어적으로&#xA;지원하지 않는걸 뜯어내서 동작하게 만들고 너무 골치가 아프게&#xA;만들어지는건 아닌가 생각도 든다. (사실상 콜백. ㅎㅎ)&lt;/p&gt;&#xA;&lt;p&gt;그리고 지금 한창 JDBC이라던지 이런 입출력과 관련된 부분에서 비동기&#xA;방식을 지원하려고 많은 변화가 있을만한 시점인거 같다.&lt;/p&gt;&#xA;&lt;p&gt;예상은 아마 몇년간은 이런 혼란이 자바쪽에는 계속 있을거 같다는&#xA;생각이다. (async/await 같은 키워드가 추가되고 하려면 자바에 몇년이 더&#xA;걸릴지는 아무도 모를거 같다. lambda이 추가되는데 얼마나 오래걸렸었는지&#xA;추억해보자..)&lt;/p&gt;&#xA;&lt;p&gt;그런데, &amp;ldquo;&lt;em&gt;아몰랑 닥치고 얼랭씁십다&lt;/em&gt;&amp;rdquo; 이런 얘기를 하고 싶은건 아닌데,&#xA;그래도 사실 자바로 이런걸 하고 있다보면, 얼랭에서 이미 잘 해결한&#xA;문제를 왜 이렇게 고민하고 있어야하고, 왜 이렇게 저수준의 작업을 매번&#xA;프로젝트를 만들때마다 해야할까 싶다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Immutables와 친숙한 오래된 문제들</title>
      <link>https://ageldama.github.io/posts/2017/2017-01-22-java-immutables-classic-problem/</link>
      <pubDate>Sun, 22 Jan 2017 16:15:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-01-22-java-immutables-classic-problem/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://immutables.github.io/&#34;&gt;https://immutables.github.io/&lt;/a&gt; 요즘 이걸 살짝 봤는데, 재미있었다.&lt;/p&gt;&#xA;&lt;p&gt;그런데 일단 깊이보거나 써보기 전에 드는 걱정은,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;이거 기존의 몇몇 프레임웍이나 라이브러리들이랑은 친하게 지내기&#xA;어렵지 않을까.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;왜냐하면, 대부분의 POJO에 연관된&#xA;생성단계에서,&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Default_constructor&#34;&gt;default constructor&lt;/a&gt; 와&#xA;setter-methods을 갖고, 값을 세팅하는 경우가 대부분인데,&lt;/li&gt;&#xA;&lt;li&gt;예를들면, 대부분의 ORM 프레임웍들이나 POJO으로 JSON등을&#xA;Deserialization해서 직접 객체를 생성할 책임을 프레임웍이나&#xA;라이브러리가 가져가는 경우에 대부분.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&amp;hellip;그러면 결국 말짱황인거 같다.. 아무리 accessor 메서드들&#xA;boilerplate으로 생성하는거 막아주는게 좋다고 해도, 솔직히 그냥 한번&#xA;IDE에서 생성하고 평범하고 조금 멍청하게 만들어놓고 쓰는게 더 낫겠다는&#xA;생각이든다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs에서 window 전환을 편하게, ace-window</title>
      <link>https://ageldama.github.io/posts/2017/2017-01-22-emacs-ace-window/</link>
      <pubDate>Sun, 22 Jan 2017 14:15:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-01-22-emacs-ace-window/</guid>
      <description>&lt;p&gt;이맥스에서 코딩하거나 마크다운이나 Org으로 글을 쓰고 정리하는데, 그간&#xA;그냥 그럭저럭 나는 이맥스를 나한테 맞춰서 사용하고 있다고 생각하고&#xA;있었던거 같다. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;그런데, 항상 뭔가 불편한데, 그냥 바쁘다는 이유로 깊이 생각은 안하고&#xA;대충 대충 때우면서 사용해왔었던게 있었다. 바로 window 끼리 전환하는&#xA;방법.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;C-x 2&lt;/code&gt; 이나 &lt;code&gt;C-x 3&lt;/code&gt;으로 창을 분할해놓고 쓰는게 보통인데, 이때 나는&#xA;그냥 아무 생각없이 &lt;code&gt;C-x o&lt;/code&gt;만을 이용해서 &lt;em&gt;다음 윈도우&lt;/em&gt; 으로&#xA;이동만해왔었다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;그런데&lt;/em&gt;, 창이 3개 이상이 되고, 현재 창의 &lt;em&gt;다음 창&lt;/em&gt; 이 아니라, &lt;em&gt;이전 창&lt;/em&gt; 으로 이동하고 싶으면?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jekyll &#43; Rouge 소스코드 하일라이팅 테스트</title>
      <link>https://ageldama.github.io/posts/2017/2017-01-02-source-hilite-testing/</link>
      <pubDate>Mon, 02 Jan 2017 05:15:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-01-02-source-hilite-testing/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://rouge.jneen.net/&#34;&gt;Rouge&lt;/a&gt; 이거 적용해보기.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ageldama/hello-adder-cl-asdf/blob/master/src/adders.lisp&#34;&gt;https://github.com/ageldama/hello-adder-cl-asdf/blob/master/src/adders.lisp&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-common_lisp&#34; data-lang=&#34;common_lisp&#34;&gt;;;; Actual Implementations here.&#xA;(in-package :hello-adder)&#xA;&#xA;(defun make-adder (n)&#xA;  (lambda (x) (+ n x)))&#xA;&#xA;(defun 1+er ()&#xA;  (make-adder 1))&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ageldama/ageldama-gh-jekyll/commit/334ead4b31b305b82e85ae2c6a6e0a219ecc9e66&#34;&gt;https://github.com/ageldama/ageldama-gh-jekyll/commit/334ead4b31b305b82e85ae2c6a6e0a219ecc9e66&lt;/a&gt; 이렇게&#xA;작업해봤음.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Github.io 블로그 TraviCI으로 빌드해서 배포하기</title>
      <link>https://ageldama.github.io/posts/2017/2017-01-02-travis-ci-jekyll-gh/</link>
      <pubDate>Mon, 02 Jan 2017 04:35:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-01-02-travis-ci-jekyll-gh/</guid>
      <description>&lt;p&gt;.. &lt;em&gt;&lt;a href=&#34;https://ageldama.github.io/github/jekyll/2017/01/01/github-jekyll.html&#34;&gt;여기&lt;/a&gt;&lt;/em&gt; 에 불만을 적었듯이,&#xA;여러가지로 그냥은 만족하기 어려운 부분이 있었다.&lt;/p&gt;&#xA;&lt;p&gt;그런데, Travis-CI을 통해서 빌드해서 배포한다는 분이&#xA;계셨다. &lt;a href=&#34;https://twitter.com/Realignist/status/815554589889994752&#34;&gt;https://twitter.com/Realignist/status/815554589889994752&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;..난 생각 못해본 방법. ㅎㅎ &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;그래서 도전.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;우선 Jekyll 소스용 저장소로 분리하고,&lt;/li&gt;&#xA;&lt;li&gt;배포하는 페이지들은 원래의 저장소에 git-push 하도록 했다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/felixrieseberg/travis-jekyll-git&#34;&gt;https://github.com/felixrieseberg/travis-jekyll-git&lt;/a&gt; 여기 참고해서 삽질.&lt;/li&gt;&#xA;&lt;li&gt;결과물은 &lt;a href=&#34;https://github.com/ageldama/ageldama-gh-jekyll&#34;&gt;https://github.com/ageldama/ageldama-gh-jekyll&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;..진행하면서 처음에 좀 짜증났던거,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;Gemfile&lt;/code&gt; 에 설치할 의존성들 지정하고, &lt;code&gt;bundle update&lt;/code&gt;.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;그리고 그것만으로는 안되고, &lt;code&gt;.travis.yml&lt;/code&gt; 파일에 gem설치를&#xA;지정해야했다. &lt;a href=&#34;https://github.com/ageldama/ageldama-gh-jekyll/blob/master/.travis.yml#L5&#34;&gt;https://github.com/ageldama/ageldama-gh-jekyll/blob/master/.travis.yml#L5&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Travis-CI 작업의 세팅에서 &lt;code&gt;git_target&lt;/code&gt; 환경변수에 URL지정할때&amp;hellip;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;github.com/ageldama/ageldama-gh-jekyll.git&lt;/code&gt; 처럼 &lt;code&gt;https://&lt;/code&gt; 스킴 부분 빼고,&lt;/li&gt;&#xA;&lt;li&gt;또 뒤에 &lt;code&gt;.git&lt;/code&gt; 깜빡하면 당연히 git-push 안됨. ㅋ&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol&gt;&#xA;&lt;li id=&#34;fn:1&#34;&gt;&#xA;&lt;p&gt;솔직히 내가 뭘 제대로 하겠습니까.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Github.io의 Jekyll 버젼이랑 차이?</title>
      <link>https://ageldama.github.io/posts/2017/2017-01-01-github-jekyll/</link>
      <pubDate>Sun, 01 Jan 2017 14:35:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-01-01-github-jekyll/</guid>
      <description>&lt;p&gt;다 만족스럽고 좋은데, 로컬에서 Jekyll 실행해서 미리보기한 결과랑&#xA;Github에 올려서 렌더링한거랑 마크다운 결과가 조금 달라서 짜증난다.&lt;/p&gt;&#xA;&lt;p&gt;아마 마크다운 렌더러 버젼 차이 때문일거 같은데 ㅜ.ㅜ&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% jekyll -v&#xA;jekyll 3.3.1&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Emacs이랑 친해지기</title>
      <link>https://ageldama.github.io/posts/2017/2017-01-01-getting-started-with-emacs/</link>
      <pubDate>Sun, 01 Jan 2017 10:00:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-01-01-getting-started-with-emacs/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;이맥스를 어떻게 배우면 좋은지 모르겠다. 여러번 도전해봤지만 항상 별로였다.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;..어느날 한 동료가 물어봤다. (&lt;em&gt;그렇다 나는 일터에서도 이맥스를 켜놓고&#xA;계속 쓴다.&lt;/em&gt;)&lt;/p&gt;&#xA;&lt;p&gt;솔직히 기본적으로 매일 &lt;a href=&#34;http://orgmode.org/&#34;&gt;Org-mode&lt;/a&gt;으로 계획, 일정&#xA;등등 정리하고 계속 개인적으로 정리하면서 쓰고, 파이썬, Go, Clojure&#xA;같은거 할때도 편집하고 테스트하기도 편하니까 선호하는 편인거&#xA;같다. (자바랑 스칼라은 물론 그냥 IntelliJ 쓴다.)&lt;/p&gt;&#xA;&lt;p&gt;여튼 그날 간단히 짝프로그래밍하듯이 같이 앉아서 몇가지 이야기를 하고,&#xA;내 설정 파일 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 이나 어떻게 접근하는게 좋은지에 대해서&#xA;잠깐 이야기를 했었다. 그걸 블로깅으로 써보고 싶다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Welcome to Jekyll!</title>
      <link>https://ageldama.github.io/posts/2017/2017-01-01-welcome-to-jekyll/</link>
      <pubDate>Sun, 01 Jan 2017 09:54:02 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-01-01-welcome-to-jekyll/</guid>
      <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;&#xA;&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Posts Archive</title>
      <link>https://ageldama.github.io/posts/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/archive/</guid>
      <description>This page contains an archive of all posts.</description>
    </item>
  </channel>
</rss>
