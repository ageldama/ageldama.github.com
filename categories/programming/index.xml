<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on 아겔로그</title>
    <link>https://ageldama.github.io/categories/programming/</link>
    <description>Recent content in Programming on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;https://ageldama.github.io/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Tue, 18 Mar 2025 13:30:16 +0000</lastBuildDate>
    <atom:link href="https://ageldama.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>xrandr 🖥️모니터 연결 자동전환 스크립트🐫</title>
      <link>https://ageldama.github.io/posts/2025-03mar/2025-03mar18--01-xrandr/</link>
      <pubDate>Tue, 18 Mar 2025 13:30:16 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-03mar/2025-03mar18--01-xrandr/</guid>
      <description>&lt;p&gt;&#xA;요즘 메인으로 사용하는 💻랩탑을 i3wm으로 세팅해서 쓰고 있다.&#xA;다 편한데, 🪟윈도나 icewm처럼 &lt;code&gt;Windows+P&lt;/code&gt; 누르면, 다음 모니터연결&#xA;조합으로 전환되는게 부러웠다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;매번 터미널 열고 &lt;code&gt;xrandr&lt;/code&gt; 치거나, &lt;a href=&#34;https://christian.amsuess.com/tools/arandr/&#34;&gt;arandr&lt;/a&gt; 열어서 세팅하기 귀찮으니까.&#xA;(물론 시스템 시작하면, 내가 좋아하는 설정이 적용되도록 해놓았지만)&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 그냥 윈도의 &lt;code&gt;Win+P&lt;/code&gt; 키처럼 동작하도록 스크립트를 짜봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;🐫 &lt;a href=&#34;https://github.com/ageldama/configs/blob/master/dotfiles/local_scripts/xrandr/combs.pl&#34;&gt;https://github.com/ageldama/configs/blob/master/dotfiles/local_scripts/xrandr/combs.pl&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Perl으로 왠만하면 외부라이브러리 의존 않고 짜려고 노력.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그리고 예전이랑 코딩스타일이 점점 변해가고 있다고 생각이 들었는데,&#xA;예전에는 기계공감에 더 비중을 뒀었다면, 이제는 내가 쓸때 더 편하고 별&#xA;생각없이 되는쪽에 더 비중을 두게 되는거 같다. 좋게 말하자면… 🤤&lt;/p&gt;</description>
    </item>
    <item>
      <title>data-driven programming &amp; data-driven design &amp; data-oriented programming ???</title>
      <link>https://ageldama.github.io/posts/2025-03mar/2025-03mar12--01-data-prog/</link>
      <pubDate>Wed, 12 Mar 2025 10:40:27 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2025-03mar/2025-03mar12--01-data-prog/</guid>
      <description>&lt;p&gt;&#xA;비슷한 용어들. 내가 이해한 정리들은 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;data-driven programming&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;데이터처리를 중심으로 하는 프로그래밍언어나 도구, 스타일.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  예를 들어, awk, perl은 입력의 패턴에 따라 코드를 나누고 출력을&#xA;  만들기 수월한 방식을 제공.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data-driven_programming&#34;&gt;https://en.wikipedia.org/wiki/Data-driven_programming&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Perl/perl5/commit/8d063cd8450e59ea1c611a2f4f5a21059a2804f1&#34;&gt;a &amp;#34;replacement&amp;#34; for awk and sed&lt;/a&gt; (by Larry Wall)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;data-oriented design&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;현대 cpu의 아키텍처에 적절하도록, cpu cache, simd등을 잘 적용될 수&#xA;  있도록 애플리케이션 데이터구조를 설계하는 방식.&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-2&#34; href=&#34;#footnote-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  그리고 단순히 게임개발에서 ecs만이 아니라 lmax disruptor등도 포함될&#xA;  것 같다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data-oriented_design&#34;&gt;https://en.wikipedia.org/wiki/Data-oriented_design&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;dod의 예시: &lt;a href=&#34;https://en.wikipedia.org/wiki/Entity_component_system&#34;&gt;Entity component system&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/articles/lmax.html&#34;&gt;lmax disruptor&lt;/a&gt; (by Martin Fowler)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-3&#34;&gt;&#xA;data-oriented programming&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;그리고 또 갑자기 위 2개의 정의처럼 완전 갑자기, dop은 다음과 같은&#xA;  원칙들을 이용한 애플리케이션 개발방식:&lt;/p&gt;</description>
    </item>
    <item>
      <title>xmake, compile_commands.json, flycheck</title>
      <link>https://ageldama.github.io/posts/2024-05may/2024-05may06--xmake-compile_commands_json-flycheck/</link>
      <pubDate>Mon, 06 May 2024 07:51:13 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2024-05may/2024-05may06--xmake-compile_commands_json-flycheck/</guid>
      <description>&lt;p&gt;&#xA;cmake/warp등을 써보면서 c/c++ 개발할 때에 빌드도구 갖고 놀다가,&#xA;이번에 마음을 열고 xmake을 익혀봄.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;마음에 든다. 가볍고 빠르고 좋다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;ccache등도 바로 지원하고, lua으로 스크립팅도 그럭저럭 할만해 보이고,&#xA;[build.zig](&lt;a href=&#34;https://ziglang.org/learn/build-system/)&#34;&gt;https://ziglang.org/learn/build-system/)&lt;/a&gt;스러워서&#xA;당연하게도 좋은거 같아.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;계속 쓸거 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;emacs / flycheck + c/c++ 개발할 때에 단점이, 자동적으로 외부 3rd-party&#xA;라이브러리의 include-path을 설정해주지 않아서,&#xA;[dirs-local](&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html)&#34;&gt;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html)&lt;/a&gt;&#xA;같은걸 세팅해주길 기대한다는 점.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 그냥 &lt;code&gt;xmake project -vD -k compile_commands -m debug&lt;/code&gt; 같이&#xA;&lt;code&gt;compile_commands.json&lt;/code&gt; 생성하고,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;이걸 파싱해서 표준출력으로 include-paths&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/compile_commands_json_incdirs.py&#34;&gt;https://github.com/ageldama/configs/blob/master/compile_commands_json_incdirs.py&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;현재 소스코드 버퍼 기준으로 가장 가까운 compile_commands.json 파일&#xA;위치 찾는 elisp 함수&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/elisp/compcmdsjson-tiny.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/elisp/compcmdsjson-tiny.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;위 (1)+(2)을 조합해서 flycheck을 위한 변수 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 들을 설정하는 elisp 함수&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/elisp/flycheck-compcmdsjson.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/elisp/flycheck-compcmdsjson.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;그리고 위 (3)을 c/c++-mode에 자동적으로 적용하고, 또 단축키도&#xA;만드는 elisp 코드&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/blob/master/emacs/feat/flycheck-compcmdsjson.el&#34;&gt;https://github.com/ageldama/configs/blob/master/emacs/feat/flycheck-compcmdsjson.el&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;…요렇게 만들어서 세팅해서 쓰니 편안.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping 04/02/2023 .01: 씨언어의 장자 zig, rust, golang, c&#43;&#43; ???</title>
      <link>https://ageldama.github.io/posts/2023-02feb/2023-02feb04--01-ping/</link>
      <pubDate>Sat, 04 Feb 2023 16:46:54 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-02feb/2023-02feb04--01-ping/</guid>
      <description>&lt;p&gt;&#xA;최근에 재미로 &lt;a href=&#34;https://ziglang.org/&#34;&gt;zig&lt;/a&gt; 을 정말 재밌게 &amp;#39;읽었다&amp;#39;. 공부해보고 실제로 뭔가&#xA;코딩을 많이 해보거나 한 것은 아니고, 대체 어떻게 동작하는 프로그램을&#xA;이걸로 만들라고 하는건지 이해하고 싶었기 때문에 해봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;zig으로 프로그램을 짜는게 궁금하던 부분은 haskell의 monad을 이용한&#xA;방식, 혹은 apl이나 prolog으로 실제프로그램을 어떻게 만들 수 있을지&#xA;패러다임부터 다른 언어를 공부하고 생각해보는 것과는 조금 다를수도&#xA;있겠다. 어쨌든 그냥 imperative언어이니까.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;오히려, zig을 어떻게 써먹어야 할지 궁금하던 지점은, c++의&#xA;스마트포인터와 move semantics등을 이해하는 것이나, rust의 borrowing&#xA;checker, rc/arc등을 이해하는 것과 마찬가지인 것 같다.&#xA;둘 다 이해하고 익숙해지면 그렇게 부담스럽지 않을거 같긴 하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python &#43; Generator / LeetCode &#34;1614. max nesting depth of the parentheses&#34;</title>
      <link>https://ageldama.github.io/posts/2020-11nov/leet-code-1614-3rd/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/leet-code-1614-3rd/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://ageldama.github.io/posts/2020-10oct/leet-code-1614/&#34;&gt;지난 번 작성한 Common Lisp / LOOP매크로을 이용한 구현&lt;/a&gt; 을 다른&#xA;언어에서였다면, 비슷한 조건으로 메모리 복잡도 O(1)으로 풀어보고&#xA;싶었다.&lt;/p&gt;&#xA;&lt;div class=&#34;src src-python&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt;2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt;3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt;4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt;5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt;6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt;7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt;8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;itertools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;accumulate&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;find_paren_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;gen_only_parens&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;accumulate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gen_only_parens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;다른 언어에서도 lazy stream을 지원한다면 비슷하게 풀 수 있을 것 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;org-more.el&#34; released!</title>
      <link>https://ageldama.github.io/posts/2020-11nov/org-more-1st-rel/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-11nov/org-more-1st-rel/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/org-more&#34;&gt;org-more.el: search .org files have certain tags (#+tags[]:&#xA;or #+tags[]:)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;개인 위키, KB처럼 org 파일 모음을 사용하고 있는데, 디렉토리 계층과&#xA;직접 링크 관계만이 아니라 같은 태그들으로 묶어서 각 파일들을 검색하고&#xA;리스팅 할 수 있도록 만들었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;asdf-subdir-finder&#34; released!</title>
      <link>https://ageldama.github.io/posts/2020-10oct/asdf-subdir-finder-1st/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/asdf-subdir-finder-1st/</guid>
      <description>&lt;p&gt;&#xA;지난번 포스팅한 &amp;#34;&lt;a href=&#34;https://ageldama.github.io/posts/2020-10oct/lisp-asdf-subdir-finder/&#34;&gt;asdf 정의를 내 코드베이스의 하위디렉토리에서 자동으로&#xA;로딩하기&lt;/a&gt;&amp;#34;를 프로젝트으로 만들었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/asdf-subdir-finder&#34;&gt;https://github.com/ageldama/asdf-subdir-finder&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;사람마다 커먼리습으로 작업하는 스타일에 따라 많이 다를 수 있어서 안&#xA;써도 되기도 하지만, 그냥 정리해서 공개는 해봤다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;커먼리습 ASDF 불러오기 편하게 하기&#34; 대모험</title>
      <link>https://ageldama.github.io/posts/2020-10oct/lisp-asdf-subdir-finder/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/lisp-asdf-subdir-finder/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;ASDF와 system definition file 검색의 정석&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;이전에 &lt;a href=&#34;https://ageldama.github.io/posts/2018-11nov/cl-asdf-custom-load-script/&#34;&gt;ASDF을 이용하여 커먼리습 프로젝트의 의존성, 시스템을 로딩하기&lt;/a&gt;&#xA;  에 대해서 설명한 적이 있었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  이전에 다룬 내용은 정석적으로 &lt;code&gt;$HOME/common-lisp&lt;/code&gt; 디렉토리에 &lt;code&gt;.asd&lt;/code&gt;&#xA;  파일을 심볼릭링크를 걸고, &lt;code&gt;(asdf:load-system ..)&lt;/code&gt; 을 시도하는&#xA;  내용이었었다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;Prototyping등 더 편안하게 혼자 코딩을 할 때는…&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;혼자 커먼리습 코딩을 하면서, 나는 더 간단하게 프로젝트를 시작하는&#xA;  방법을 선호한다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  커먼리습이 파일 이름이나 경로에 대해서 의존하는 것이 아니고,&#xA;  컴파일시점, 로딩시점에 순서에 따라 로딩해서 최종적으로 컴파일하여&#xA;  적재한 결과 이미지를 더 중요하게 여기기 때문에, 그리고 그런 컴파일,&#xA;  빌드, 로딩과 같은 모든 단계들 자체도 커먼리습 표현식 그자체로&#xA;  동작하기 때문에 그냥 하나의 소스파일을 섹션별로 나눠서 작업하면&#xA;  편리하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CommonLisp (w/o LOOP-macro) / LeetCode &#34;1614. max nesting depth of the parentheses&#34;</title>
      <link>https://ageldama.github.io/posts/2020-10oct/leet-code-1614-2nd/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/leet-code-1614-2nd/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://ageldama.github.io/posts/2020-10oct/leet-code-1614/&#34;&gt;어제 작성한 LOOP매크로을 이용한 구현&lt;/a&gt; 을 풀어서, 만약 LOOP매크로가&#xA;없었더라면 어떻게 짰을지 작성해봤다.&lt;/p&gt;&#xA;&lt;div class=&#34;src src-lisp&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;max-nested-parentheses-raw&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;optimize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;safety&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;simple-string&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;fixnum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;dotimes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s--cur-idx&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;elt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s--cur-idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;#\(&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;incf&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eql&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\(&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;여전히 타입을 지정해서 자동으로 타입추론, 최적화 하도록 했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그런데 여전히 &lt;code&gt;dotimes&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;incf&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt; 같은 커먼리습&#xA;HyperSpec에서 표준에 포함시킨 매크로 등을 사용했다. 물론 이런 것들도&#xA;다 풀어서 작성해도 되겠지만 별 의미는 없을 것 같아서.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CommonLisp / LeetCode &#34;1614. max nesting depth of the parentheses&#34;</title>
      <link>https://ageldama.github.io/posts/2020-10oct/leet-code-1614/</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-10oct/leet-code-1614/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;문제&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses/&#34;&gt;https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;작성한 코드     &#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div class=&#34;src src-lisp&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt;2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt;3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt;4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt;5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt;6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt;7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt;8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;max-nested-parentheses&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;optimize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;safety&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;simple-string&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;fixnum&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;across&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;#\(&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nb&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;incf&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eql&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\(&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;nv&#34;&gt;maximizing&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-3&#34;&gt;&#xA;코드 의도&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;우아한 코드보다는 공간복잡도가 &lt;code&gt;O(1)&lt;/code&gt; 이고 싶었다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-4&#34;&gt;&#xA;&lt;em&gt;Edit&lt;/em&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SBCL에 맞춰 코드에 타입을 지정해줘봤다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;결과 어셈블리 코드가 조금 짧아졌다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Python에 대한 내 관점</title>
      <link>https://ageldama.github.io/posts/2020-09sep/perspective-on-python/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-09sep/perspective-on-python/</guid>
      <description>&lt;p&gt;&#xA;Python은 조금 지루한 문법의 언어다. 거기에 매크로 같은 기능도 없어서&#xA;항상 평이한 문장을 작성하게 되는 것 같다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;하지만 다른 비슷한 언어들과는 다르게, 파이썬 문장 자체는 깔끔하면서도&#xA;density가 높다. 리습, 하스켈 같은 언어들으로 작성한 것을 생각해봐도&#xA;밀도가 높아 표현력이 좋다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Java와 같은 언어는 밀도도 낮고 표현력도 가끔은 너무 아쉽다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;파이썬이 이렇게 밀도가 높을 수 있는 이유는, 언어 자체적으로 매크로를&#xA;지원하거나 해서 문법을 확장하는 방법을 채택하는 것이 아니라 SymPy에서&#xA;그랬었던 것처럼 값을 계속 쌓아갈 수 있게 만들고 연산자를 재정의해서&#xA;문장이 다르게 해석되도록 만드는 방법이고, 이쪽이 더 Pythonic한 방법&#xA;같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>코드 편집기에 대한 생각</title>
      <link>https://ageldama.github.io/posts/2020-05may/editors/</link>
      <pubDate>Thu, 28 May 2020 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-05may/editors/</guid>
      <description>&lt;p&gt;&#xA;코드 편집기를 어떻게 써왔었는지 잠깐 생각해봤다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;DOS시절: MS-DOS Editor.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GW-BASIC 시절에는 정말&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/MS-DOS_Editor&#34;&gt;https://en.wikipedia.org/wiki/MS-DOS_Editor&lt;/a&gt; 을 열심히 썼었던 것&#xA;같다.&lt;/li&gt;&#xA;&lt;li&gt;그리고 그 다음엔 &lt;a href=&#34;https://en.wikipedia.org/wiki/PowerBASIC#PowerBASIC_for_DOS_(PBDos)&#34;&gt;PowerBASIC for DOS&lt;/a&gt; 열심히 썼었다. QuickBASIC&#xA;같은 바이트코드으로 컴파일해서 .exe 파일에 인터프리터와&#xA;바이트코드를 embedding 하는 VB의 P-code 같은 가짜 컴파일 방식&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;이&#xA;아니라 정말 네이티브 코드로 컴파일해주고, 인라인 어셈블리와&#xA;메모리 조작이 가능한 베이직 컴파일러, IDE여서 좋은 환경이었던&#xA;것 같다.&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;터보C 2.0 편집기. PowerBASIC이랑 유사해서 익숙하게 쓸 수 있었던&#xA;것 같다. 파워베이직도 그렇지만, 의외로 도스시절의 이런 IDE들이&#xA;F1 - Help 메뉴에서 항목별로 문서 정리가 잘 되어 있어서 읽으면서&#xA;즐거웠었던 것 같다. (초등학생~중학생이어서 영어를 잘 이해하지는&#xA;못했지만)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Covariant, Contravariant, Invariant등 Type Variances 이해하기</title>
      <link>https://ageldama.github.io/posts/2020-01jan/type-variances/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:02 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2020-01jan/type-variances/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://blog.daftcode.pl/covariance-contravariance-and-invariance-the-ultimate-python-guide-8fabc0c24278&#34;&gt;거의 그대로 베껴온 원본 글&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;계약서로서의 타입&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;타입을 생각할 때, &amp;lt;계약서&amp;gt;로 생각하는 것이 편하다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  왜냐하면, 전달한 값이 그 타입의 범위 안에서 전달 받은 쪽에서&#xA;  취급이 제한된다는 보장이 있어야 안전한 코드를 컴파일러는 생성해줄 수&#xA;  있다. (혹은 그렇게 안전한지 체크를 해준다.)&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;Subtype, 일반화(Generalization), 특화(Specialization)&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;타입을 말할 때, 나는 보통 객체지향언어에서의 클래스의 상속 관계를&#xA;  떠올린다. 꼭 그렇지는 않겠지만, 이 글에서도 그렇게 설명을 해보겠다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  이 글에서는 계속 다음 3개의 타입이 있고, 다음과 같은 관계라고&#xA;  가정하겠다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lisp에서 Dynamic/Lexical Binding와 JavaScript의 var/let</title>
      <link>https://ageldama.github.io/posts/2019-12dec/lisp-dynamic-and-lexical-bindings-and-js/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/lisp-dynamic-and-lexical-bindings-and-js/</guid>
      <description>&lt;p&gt;&#xA;다음의 간단한 코드를 읽어보자.&lt;/p&gt;&#xA;&lt;div class=&#34;src src-js&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;lexical&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dynamic&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;???&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;&lt;code&gt;maker()()&lt;/code&gt; 의 결과는 &lt;code&gt;&amp;#39;dynamic&amp;#39;&lt;/code&gt; 이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;심지어, 맨 마지막에 있는 &lt;code&gt;{..}&lt;/code&gt; 블록을 넘어가서도 &lt;code&gt;x&lt;/code&gt; 의 값은 여전이&#xA;&lt;code&gt;&amp;#39;dynamic&amp;#39;&lt;/code&gt; 이다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;자바스크립트에서 binding은 어딘가 이도 저도 아니게 심각하게 고장난&#xA;느낌이다. 이 글에서 이야기할 lexical binding이나 dynamic binding에도&#xA;속하지 않는 느낌이고, 이번에 새로 추가된 &lt;code&gt;let&lt;/code&gt; 도 이해하기가 어려운게&#xA;아니라 그냥 제대로 망가져 있는거 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>direnv &#43; direnv-mode 이맥스 지원 &#43; C/C&#43;&#43;/Python등 프로젝트 설정 적용하기</title>
      <link>https://ageldama.github.io/posts/2019-12dec/direnv/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/direnv/</guid>
      <description>&lt;p&gt;&#xA;프로젝트의 빌드 디렉토리, virtualenv와 같은 경로의 설정, &#xA;경로 설정에 따른 빌드/실행/테스팅/스크립트을 편하게 하려고 만든&#xA;&lt;a href=&#34;https://ageldama.github.io/posts/2019-12dec/moonshot-1st-rel/&#34;&gt;moonshot.el&lt;/a&gt; 와 유사한걸 검색해봤다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;몇 가지&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;p&gt;이런 비슷한게 몇 가지 있는데, 내 상황에 쓸만한 것은 direnv&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;NPM: dotenv&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/dotenv&#34;&gt;https://www.npmjs.com/package/dotenv&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Node.js에서 Unix environment variable으로 &lt;code&gt;.env&lt;/code&gt; 파일을 로딩해주는&#xA;역할인 듯.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Shell에서 Hook 걸어서 사용하기엔 별로 인거 같았다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그리고 Node.js 이외의 프로젝트에 적용하려면 매번 JS으로 wrapper을&#xA;짜주고 하기 싫었고,&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;code&gt;.env&lt;/code&gt; 파일이 그냥 정적인 key-value 문자열의 나열이라, 파일시스템에서&#xA;경로를 조립하고 하는데 별로라는 생각이 들었다. 항상 절대 경로만&#xA;표기하거나, &lt;code&gt;getenv&lt;/code&gt; 해서 문자열을 가져와서 상대 경로 등으로 지정된&#xA;값을 매번 절대 경로로 만드는 작업을 해야할테니까.&lt;/p&gt;</description>
    </item>
    <item>
      <title>moonshot.el 최초 릴리즈</title>
      <link>https://ageldama.github.io/posts/2019-12dec/moonshot-1st-rel/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/moonshot-1st-rel/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/moonshot&#34;&gt;moonshot.el&lt;/a&gt; 을 만들어서 공개했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;이맥스를 써오면서 불편하다고 생각한걸 간단히 하고 싶었었다:&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;불편함들&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;빌드 디렉토리&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;   Projectile을 사용하니까 프로젝트 디렉토리는 관리가 쉬운데, 빌드&#xA;   디렉토리는 관리가 어려웠다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;아예 Projectile이 추론하는 디렉토리 바깥에 빌드 디렉토리는&#xA;위치하는 경우도 있으니까.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;예) GNU Autotools &lt;code&gt;configure&lt;/code&gt; 이나 CMake으로 작업할 때,&#xA;소스트리 바깥에 빌드 디렉토리를 걸어놓아서 정리를 깔끔하게 할&#xA;수 있으니까.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;그런데 이 &amp;#39;빌드 디렉토리&amp;#39;가 중요한게,&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;말그대로 컴파일한 &lt;code&gt;.o&lt;/code&gt; 파일이나 최종 결과 실행파일 등이&#xA;여기에 쌓이니까&lt;/li&gt;&#xA;&lt;li&gt;디버깅, 테스트를 위해서 실행파일을 실행하거나,&lt;/li&gt;&#xA;&lt;li&gt;심지어 &lt;code&gt;make&lt;/code&gt; 이나 &lt;code&gt;ninja&lt;/code&gt; 같은 빌드 커맨드를 실행하기&#xA;위해서도 빌드 디렉토리를 지정하거나 이동해서 실행해야 하니까&#xA;귀찮다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-3&#34;&gt;&#xA;compilation-mode, realgud: 실행 파일 찾아서 실행하기, 디버깅하기&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;   예전에 만들어 써오던 &lt;a href=&#34;https://github.com/ageldama/configs/blob/a24f4606cd95a41c9d3140dac7c0c298883ae72a/emacs/c-c%252B%252B-gtags%252Brtags.el#L193&#34;&gt;이맥스를 위한 C/C++ 설정&lt;/a&gt; 처럼,&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hololog Perl/CLI 버젼</title>
      <link>https://ageldama.github.io/posts/2019-12dec/hololog-perl-cli-1st-rel/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/hololog-perl-cli-1st-rel/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/hololog-perl-cli&#34;&gt;https://github.com/ageldama/hololog-perl-cli&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;한줄씩 메모를 하는걸 좋아하고, 그냥 데스크탑에서 PDF을 읽거나&#xA;웹페이지를 읽으면서 어딘가에 생각난거나 이해한걸 필기하면서 진행하고&#xA;싶어서 만들었다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;다음 트윗 타래에서 이야기한것처럼, 그냥 트위터 비밀계를 써도 괜찮지만,&#xA;그것도 너무 웹브라우져 열고 하다보면 산만해져서.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;tweet 1206138361968070656 &lt;/p&gt;&#xA;&lt;p&gt;&#xA;처음 시작은 &lt;a href=&#34;https://www.gnu.org/software/coreutils/manual/html_node/cat-invocation.html&#34;&gt;Unix/GNU cat&lt;/a&gt; 을 간단하게 터미널에서 쓰면 된다는 생각이&#xA;들었다.&lt;/p&gt;&#xA;&lt;div class=&#34;src src-shell&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &amp;gt;&amp;gt; foo.txt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;..그런데 유닉스가 아닌 사람들, 윈도를 쓰는 사람들은 어떻게 하지?&lt;/p&gt;&#xA;&lt;div class=&#34;src src-shell&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt;1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;copy con foo.txt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;..사실 위와 같이 &lt;code&gt;cmd.exe&lt;/code&gt; 에서 실행해도 되겠지만, 뭔가 그래도 윈도&#xA;사용자들이나 터미널 화면을 무서워하는 사람들이 저런거&#xA;좋아할까.. 싶어서 조금 생각.&lt;/p&gt;</description>
    </item>
    <item>
      <title>radio-recorder 프로젝트 설명</title>
      <link>https://ageldama.github.io/posts/2019-12dec/dissect-radio-gaga/</link>
      <pubDate>Wed, 11 Dec 2019 01:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/dissect-radio-gaga/</guid>
      <description>&lt;p&gt;&#xA;2년전쯤에 한국 라디오를 혼자 듣고 싶었었다. 하지만 시차가 많이 나는&#xA;지역에 살았었다. (8시간 정도 느림)&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 한국 인터넷 라디오를 녹음해서 개인적으로 들을 수 있다면 좋겠다는&#xA;아이디어로 작업했던 프로젝트 소스코드를 공개한다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/radio-recorder&#34;&gt;https://github.com/ageldama/radio-recorder&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;방송사의 인터넷 라디오를 녹음 하는 스크립트는 커밋에서 제외하고&#xA;공개한다. 이는 방송사에게 문제가 될 수 있으므로 개인적으로 알아내서&#xA;사용하고 타인과 공유하지 않기를 바란다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;프로그램 구성&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-2&#34;&gt;&#xA;cron 서버&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;지정된 시간에 녹음/인코딩 스크립트를 실행하는 스케쥴을 담당한다.&lt;/li&gt;&#xA;&lt;li&gt;오래된 임시 파일 정리 등등도.&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;한국의 시간대와 내가 있는 시간대가 달라서 다른 cron scheduler을&#xA;쓰지 않고 그냥 짰었던거 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Org 파일으로 Hugo 포스팅 테스트</title>
      <link>https://ageldama.github.io/posts/2019-12dec/foo/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/foo/</guid>
      <description>&lt;p&gt;&#xA;적당히 잘 동작하는거 같으니 앞으로는 그냥 혼란스러운 Markdown 대신에&#xA;그냥 Org 파일으로 블로깅 하며 될거 같다. 행벜.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;예전 버젼 Hugo에서는 지원을 제대로 못하던거 같은데, 어느샌가 업데이트&#xA;하니까 되는거 같아서 그냥 슬그머니&#xA;쓰기로. &lt;a href=&#34;https://gohugo.io/content-management/formats/&#34;&gt;https://gohugo.io/content-management/formats/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;기존 마크다운들도 인라인 이미지 문법을 바꾸고, ToC 표시 설정도 바뀌어서 조금 변경.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;아쉬운건 여전히 Org 파일에서 ToC 지원은 빠져 있는거&#xA;같아서… &lt;a href=&#34;https://github.com/snosov1/toc-org&#34;&gt;https://github.com/snosov1/toc-org&lt;/a&gt; 설치해봤다. 그냥 고민할&#xA;필요가 없었구나. ㅋ&lt;/p&gt;&#xA;&lt;p&gt;&#xA;제일 좋은건 code syntax highlight이 예뻐졌다.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;Table of Contents                                    &amp;lt;– :TOC: –&amp;gt;&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;#foobar&#34;&gt;foobar&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>First release of cl-state-machine</title>
      <link>https://ageldama.github.io/posts/2019-12dec/cl-state-machine-1st-release/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/cl-state-machine-1st-release/</guid>
      <description>&lt;p&gt;Made a small state machine library/DSL in/for CommonLisp.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ageldama/cl-state-machine&#34;&gt;https://github.com/ageldama/cl-state-machine&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>커먼리습 설정하기, ASDF 시스템 코드를 받기</title>
      <link>https://ageldama.github.io/posts/2019-12dec/tips-ecl-clisp/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-12dec/tips-ecl-clisp/</guid>
      <description>&lt;h1 id=&#34;1-asdf을-최신-버젼으로-설정한다&#34;&gt;1. ASDF을 최신 버젼으로 설정한다&lt;/h1&gt;&#xA;&lt;p&gt;(이부분에서 많이 고생했는데) SBCL와 다르게&#xA;&lt;a href=&#34;https://clisp.sourceforge.io/&#34;&gt;CLISP&lt;/a&gt;,&#xA;&lt;a href=&#34;https://common-lisp.net/project/ecl/&#34;&gt;ECL&lt;/a&gt; 은 최신 버젼의 ASDF을&#xA;내장한걸 패키징해놓지 않았다.&lt;/p&gt;&#xA;&lt;p&gt;대부분은 문제가 없이 동작하지만, 내가 작성한 커먼리습 시스템에서&#xA;실행파일을 빌드할 때 문제가 많았다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ASDF 의 최신 버젼을 &lt;code&gt;git clone&lt;/code&gt; 해서 적당한 디렉토리에 받는다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://common-lisp.net/project/asdf/&#34;&gt;https://common-lisp.net/project/asdf/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;make&lt;/code&gt;을 내려받은 ASDF 디렉토리에서 실행한다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;실행하면 &lt;code&gt;build/asdf.lisp&lt;/code&gt; 파일으로 한 파일으로 뭉쳐서 로딩하게&#xA;편안한 파일을 생성해준다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;내 커먼리습 구현체의 시작설정파일 맨 앞에 다음처럼 추가한다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;(load &amp;quot;~/local/asdf/build/asdf&amp;quot;)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;여기서 나는 &lt;code&gt;$HOME/local/asdf/&lt;/code&gt; 에 ASDF을 받았다고 가정.&lt;/li&gt;&#xA;&lt;li&gt;그리고 &lt;code&gt;asdf.lisp&lt;/code&gt; 파일이더라도, 마지막에 &lt;code&gt;.lisp&lt;/code&gt; 확장자는 생략했다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ECL은 &lt;code&gt;$HOME/.eclrc&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;CLISP은 &lt;code&gt;$HOME/.clisprc.lisp&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;그리고 중요한데, 그 다음에&#xA;&lt;a href=&#34;https://www.quicklisp.org/&#34;&gt;Quicklisp&lt;/a&gt; 초기화 내용이 오도록&#xA;한다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Quicklisp을 초기화하기 전에 ASDF 최신 버젼이 로딩되어 있는게 더&#xA;나을테니까.&lt;/li&gt;&#xA;&lt;li&gt;어차피 위의 (1~3)의 순서대로 ASDF 먼저 설정한 다음에&#xA;Quicklisp설치한 다음에 &lt;code&gt;ql:add-to-init-file&lt;/code&gt; 실행하면 이런&#xA;순서로 추가해준다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&amp;hellip;별거 아닌데, 이거 때문에 빌드한 결과 실행파일이 이상해서 좀 고생했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>(Common Lisp의 어두운 면) Equality</title>
      <link>https://ageldama.github.io/posts/2019-11nov/the-dark-side-of-cl-equality/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-11nov/the-dark-side-of-cl-equality/</guid>
      <description>&lt;p&gt;오늘은 커먼리습의 어두운 면을 이야기 해볼까. 보통 나는 리습 팬보이니까&#xA;리습에 대해 불리한 이야기는 잘 쓰지 않는거 같아서 한번 써보기로&#xA;생각했다. 그리고 놀랍게도 이 글의 끝에 가서는 다시 이런 리습의 결점을&#xA;리습의 위대함으로 승화시키는 단계까지 끌어가 보도록 하려고함.&lt;/p&gt;&#xA;&lt;p&gt;뭐 커먼리습의 &lt;a href=&#34;http://clhs.lisp.se/Front/index.htm&#34;&gt;CLHS - HyperSpec&lt;/a&gt;을 읽다보면 비슷한데 아주 약간씩&#xA;미묘하게 달라서 지원하는 것들이 있다:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;let&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/s_let_l.htm&#34;&gt;Special Operator LET, LET*&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/s_flet_.htm&#34;&gt;Special Operator FLET, LABELS, MACROLET&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;map&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/f_map.htm&#34;&gt;Function MAP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/f_mapc_.htm&#34;&gt;Function MAPC, MAPCAR, MAPCAN, MAPL, MAPLIST, MAPCON&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/f_map_in.htm#map-into&#34;&gt;Function MAP-INTO&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;prog&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/m_prog1c.htm&#34;&gt;Macro PROG1, PROG2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/s_progn.htm#progn&#34;&gt;Special Operator PROGN&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/m_prog_.htm#progST&#34;&gt;Macro PROG, PROG*&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/s_progv.htm#progv&#34;&gt;Special Operator PROGV&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;그밖에도 좀 더 있을듯?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;이렇게 나열해 놓으면 꽤 무서워 보이지만, 막상 차이를 이해하면 별로&#xA;복잡하지도 않아서 나중엔 더 편안해진다. (정말로)&lt;/p&gt;</description>
    </item>
    <item>
      <title>(소프트웨어 고고학) 어째서 `String#replaceAll`처럼 메서드 경로의 구분자로 `#`을 쓸까?</title>
      <link>https://ageldama.github.io/posts/2019-11nov/why-sharpsign-in-method-path/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-11nov/why-sharpsign-in-method-path/</guid>
      <description>&lt;h1 id=&#34;오늘-아침&#34;&gt;오늘 아침&lt;/h1&gt;&#xA;&lt;p&gt;다음은 오늘 아침 트위터의 타임라인에서 내가 스쳐본 한 스크린샷의 일부이다:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://ageldama.github.io/images/2019-11nov/string-replace-js-w-sharpsign.png&#34; alt=&#34;img&#34;&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;뭐에 느낌을 받았냐하면, 바로 저 &lt;code&gt;String#replace(..)&lt;/code&gt; 이라는&#xA;부분이다. (다른 부분에서는 &lt;code&gt;String.prototype.replace(..)&lt;/code&gt; 와 같이&#xA;썼는데 굳이 저기서만 갑자기 튀어나온 표기법)&lt;/p&gt;&#xA;&lt;p&gt;사실 나도 종종 내가 작업한 코드의 문서를 쓰거나&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 아니면 다른 사람과&#xA;텍스트로 대화를 해야할 때 이렇게 표기를 해왔었다.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;각각의 언어들에서 (내가 생각하는) 저렇게 표기하는 근거들은 다음과 같다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Java: &lt;a href=&#34;https://www.oracle.com/technetwork/articles/java/index-137868.html&#34;&gt;https://www.oracle.com/technetwork/articles/java/index-137868.html&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;@see Component#getGraphics()&lt;/code&gt; JavaDoc안에서 다른 메서드,&#xA;필드를 참고로 넣고 싶을 때 이게 표준표기법이고&#xA;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html&#34;&gt;javadoc&lt;/a&gt;도&#xA;요렇게 써줘야 링크처리를 해준다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;JavaScript&#xA;&lt;ul&gt;&#xA;&lt;li&gt;공식적인건 아닌거 같다. &lt;a href=&#34;https://developer.mozilla.org/&#34;&gt;Mozilla&#xA;MDN&lt;/a&gt;을 봐도 그런 표기는 사용&#xA;안하는걸로 보인다.&lt;/li&gt;&#xA;&lt;li&gt;예: &lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/toString&#34;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/toString&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Ruby&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java와 마찬가지로 RDoc에서 강제한다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/18591938/what-is-the-sharp-number-pound-hash-sign-used-for-in-ruby&#34;&gt;스택오버플로우: What is the # (sharp, number, pound, hash) sign used for in Ruby?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/304400/use-a-hash-character-or-a-dot-when-referring-to-methods-and-fields-in-software-d&#34;&gt;스택오버플로우: Use a hash character or a dot when referring to&#xA;methods and fields in software documentation? [closed]&lt;/a&gt;에 답변이&#xA;있으나 내가 볼 땐 내 가설이 더 확실한 이야기라고 본다.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>cl-toy-stack-lang 첫번째 버젼과 작업하면서 깨달은것</title>
      <link>https://ageldama.github.io/posts/2019-10oct/cl-toy-stack-lang/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/cl-toy-stack-lang/</guid>
      <description>&lt;p&gt;일단 첫번째 버젼 다 만들었다.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ageldama/cl-toy-stack-lang/releases/tag/v0.1.0&#34;&gt;https://github.com/ageldama/cl-toy-stack-lang/releases/tag/v0.1.0&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;그냥 장난으로 인터프리터도 아니라 그냥&#xA;&lt;a href=&#34;http://clhs.lisp.se/Body/f_eval.htm&#34;&gt;eval&lt;/a&gt; 이용한 간단한 파서도&#xA;필요없이 lexer만으로 만들만한&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Forth_(programming_language)&#34;&gt;Forth&lt;/a&gt;&#xA;비슷한 언어를 만듬.&lt;/p&gt;&#xA;&lt;p&gt;명령어도 실용적인 목적이 아닌만큼 그냥 문자열 장난 밖엔 없다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;느낀점&#34;&gt;느낀점&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;라이브러리 좋은거 갖다 잘쓰자&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://quickdocs.org/uiop/&#34;&gt;uiop&lt;/a&gt; 같은거,&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://clhs.lisp.se/Body/24_aba.htm&#34;&gt;feature-expression&lt;/a&gt; 삽질을 적게하거나 안해도됨. 더&#xA;portable하고 잘 굴러가는.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Test!&lt;/strong&gt;&#xA;3. 짜고 하나씩 진화시켜가면서 다시 돌리는 재미.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Idiomatic하게&lt;/strong&gt; 그리고 역시 Test!&#xA;&lt;ol&gt;&#xA;&lt;li&gt;..처음엔 그냥 전역변수에 상태를 갖도록 만들고,&lt;/li&gt;&#xA;&lt;li&gt;그걸 &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/03_abaab.htm&#34;&gt;dynamic binding&lt;/a&gt;으로 바꿔서 파라미터화하고,&lt;/li&gt;&#xA;&lt;li&gt;또 그걸 다시 상태를 캡슐화하는 클래스로 감싸고,&lt;/li&gt;&#xA;&lt;li&gt;처음엔 단순하게 리습스럽게 짜고 그걸 진화시키고,&lt;/li&gt;&#xA;&lt;li&gt;그리고 역시 다시 테스트.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;em&gt;아는만큼 보인다&lt;/em&gt;&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;setf&lt;/code&gt; 병렬로 하기, +destructuring&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;asdf:operate&lt;/code&gt; + &lt;code&gt;:build-op&lt;/code&gt; :&#xA;&lt;a href=&#34;http://www.sbcl.org/&#34;&gt;SBCL&lt;/a&gt;/&lt;a href=&#34;https://common-lisp.net/project/ecl/&#34;&gt;ECL&lt;/a&gt;&#xA;등 리습컴파일러에 관계 없이 실행이미지 빌드 편안하게&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/xach/buildapp&#34;&gt;https://github.com/xach/buildapp&lt;/a&gt; 같은거 써볼까 하다가,&#xA;처음엔 그냥 간단히 쉘스크립팅으로 시작.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;기타 등등&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&amp;hellip;그리고 무엇보다 재밌었다. 그리고 뭐가됐든 그냥 짜보고 굴러가는&#xA;형태로 계속해서 작은 프로그램을 많이 만들고 하면서 놀아야겠다고&#xA;생각했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>rutils으로 커먼리습 확장해서 clojure 비슷하게, 더 편하게</title>
      <link>https://ageldama.github.io/posts/2019-10oct/cl-rutils/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:01 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-10oct/cl-rutils/</guid>
      <description>&lt;p&gt;커먼리습은 &lt;a href=&#34;https://en.wikipedia.org/wiki/Common_Lisp_HyperSpec&#34;&gt;CLHS&lt;/a&gt;&#xA;이후로 언어 자체 정의는 변하지 않았다.&lt;/p&gt;&#xA;&lt;p&gt;구현체마다 조금씩 확장이 있을수도 있지만 딱히 그렇게 하지도 않는거&#xA;같다. 그럴만도 하다고 생각하는게 어차피 커먼리습에서 &lt;a href=&#34;https://en.wikipedia.org/wiki/Lisp_reader&#34;&gt;lisp&#xA;reader&lt;/a&gt;을 확장하는게&#xA;CLHS에서 정의해놓은 &lt;em&gt;기능&lt;/em&gt; 중 하나이고, 구현체들도 스펙을 잘&#xA;구현해놓았으니까.&lt;/p&gt;&#xA;&lt;p&gt;결국 커먼리습에서 문법이나 그런게 조금 마음에 안들거나 확장하고 싶으면&#xA;언제든지 매크로를 만들듯이 확장하면 되니까.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;&amp;lsquo;커먼리습 언어 자체를 커먼리습으로 프로그램 할 수 있다&amp;rsquo;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;이런 커먼리습 확장 &lt;em&gt;&amp;lsquo;라이브러리&amp;rsquo;&lt;/em&gt; 들이 여러가지 있는데, 가장 요즘에&#xA;쓸만할거 같다고 생각하는건 rutils이다. &lt;a href=&#34;https://github.com/vseloved/rutils&#34;&gt;https://github.com/vseloved/rutils&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;(eval-when (:compile-toplevel :load-toplevel :execute) ...)&lt;/code&gt; 같은거&#xA;매번 반복해서 쳐넣는걸 그냥 &lt;code&gt;eval-always&lt;/code&gt;으로 바꿔준다거나.&#xA;&lt;code&gt;gensym&lt;/code&gt;하는것도 &lt;code&gt;with-gensyms&lt;/code&gt; 제공하거나 하는 이런류의&#xA;라이브러리들에서 보통 제공하는것들부터.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CFFI으로 CommonLisp 2d array을 Foreign function으로 전달하기</title>
      <link>https://ageldama.github.io/posts/2019-03mar/cffi-2d-array/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-03mar/cffi-2d-array/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ageldama/cffi-2d-array-hello&#34;&gt;https://github.com/ageldama/cffi-2d-array-hello&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;cffi:with-foreign-array&lt;/code&gt;이 &lt;a href=&#34;https://common-lisp.net/project/cffi/manual/cffi-manual.html&#34;&gt;CFFI&#xA;manual&lt;/a&gt;에&#xA;없어서 처음에 좀 골치아팠음.&lt;/p&gt;&#xA;&lt;p&gt;리습 어레이를 복사해서 매핑해줌.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ivy/Counsel으로 바꾸기, 기능들 만들기 (w/ C&#43;&#43;지원, &#43;&#43;rmsbolt)</title>
      <link>https://ageldama.github.io/posts/2019-02feb/counsel-ivy&#43;cpp-ide/</link>
      <pubDate>Tue, 26 Feb 2019 01:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-02feb/counsel-ivy&#43;cpp-ide/</guid>
      <description>&lt;p&gt;최근에 이맥스 설정을&#xA;&lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;Helm&lt;/a&gt;기반에서&#xA;&lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;Ivy/Counsel&lt;/a&gt;으로 전부 바꿨다.&lt;/p&gt;&#xA;&lt;p&gt;더 가볍고, 적당히 잘 동작하고,&#xA;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;Ripgrep&lt;/a&gt;이랑 기본적으로&#xA;설정이 가능해서 편함.&lt;/p&gt;&#xA;&lt;p&gt;거기에 &lt;code&gt;C-c C-o&lt;/code&gt;&#xA;(&lt;a href=&#34;https://oremacs.com/2015/11/04/ivy-occur/&#34;&gt;ivy-occur&lt;/a&gt;) +&#xA;&lt;a href=&#34;https://github.com/mhayashi1120/Emacs-wgrep&#34;&gt;wgrep&lt;/a&gt;이 Helm에선&#xA;동작할때가 그때그때 기능에 따라 달라서 짜증나고, 심지어 플러그인을&#xA;설정해서 써야하거나 해서 정말 좋아하는 기능인데 우울하게 만들었는데,&#xA;Ivy이 훨씬 깔끔하게 동작하고 일관성있게 잘 동작함.&lt;/p&gt;&#xA;&lt;p&gt;처음에는 Helm에서 하는 기능들을 그대로 옮기려고만 생각하다가, 오히려&#xA;Ivy에 맞춰서 내가 익숙해지고, 더 낫게 할 방법들이 있어서 그냥 내가&#xA;adopt해서 편안해졌다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;cmake--compile_commandsjson&#34;&gt;CMake + &lt;code&gt;compile_commands.json&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;이전에는 &lt;a href=&#34;https://github.com/Andersbakken/rtags&#34;&gt;RTags&lt;/a&gt;을 사용해서&#xA;&amp;lsquo;&amp;lsquo;정말로&amp;rsquo;&amp;rsquo; C++ 프로젝트를 Clang등을 이용해서 파싱하고, 그걸&#xA;인덱싱한걸로 정확한 navigation, code completion을 구성해 사용하려고&#xA;했었었다. 그리고 타입 정보다 그런거 다 있으니 제대로 굴러가서 꽤&#xA;쓸만하고.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Goroutine, Channel, I/O 그리고 Scheduler 이해해보기</title>
      <link>https://ageldama.github.io/posts/2019-02feb/2019-02feb07thu-gosched-fun/</link>
      <pubDate>Thu, 07 Feb 2019 15:30:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2019-02feb/2019-02feb07thu-gosched-fun/</guid>
      <description>&lt;p&gt;Go언어를 요즘에 진지하게 생각하고 계속해서 자료를 찾아보며 익히고&#xA;있다.&lt;/p&gt;&#xA;&lt;p&gt;가장 흥미있는 부분은 Goroutine scheduler 구현과 I/O시스템을 어떻게&#xA;만들었을까인데, 아직은 소스코드를 뜯어 읽고 하지는 못하지만, 그냥 내가&#xA;만들었다면 아마 이렇지 않을까 하는 정도의 추측을 갖고 반대로 예제들을&#xA;만들어보며 확인해보고 있다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;우선 현재의 추측은 다음과 같다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;GOMAXPROCS&lt;/code&gt; 같은걸 이용해서 실행시간에는 필요한만큼만&#xA;최소한으로만 OS Thread을 시작하는듯. &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;너무 많은 스레드가 있어도 어차피 Context switching 비용만&#xA;늘어나고 별 의미는 커녕 더 나쁠 수 있으니까.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Goroutine들은 Go runtime의 Scheduler이 서로 실행기회를 나눠준다.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;실행기회를 다른 goroutine에 yield하는 방법은,&lt;/li&gt;&#xA;&lt;li&gt;I/O operation을 실행하거나&lt;/li&gt;&#xA;&lt;li&gt;Channel에 Receive/Send할때&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;위 (2.2)에서 I/O operation이 Async I/O으로 구현되었을거라고 생각.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;왜냐하면, 그래야 blocking 안되고, Go scheduler으로 실행이 넘어가고,&lt;/li&gt;&#xA;&lt;li&gt;Go scheduler은 I/O event loop을 통해서 적절하게 다음에 실행할&#xA;Goroutine을 결정할 수 있을테니까.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;예제-프로그램-코드&#34;&gt;예제 프로그램 코드&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-13&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-13&#34;&gt;13&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-14&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-14&#34;&gt;14&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-15&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-15&#34;&gt;15&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-16&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-16&#34;&gt;16&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-17&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-17&#34;&gt;17&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-18&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-18&#34;&gt;18&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-19&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-19&#34;&gt;19&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-20&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-20&#34;&gt;20&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-21&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-21&#34;&gt;21&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-22&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-22&#34;&gt;22&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-23&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-23&#34;&gt;23&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-24&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-24&#34;&gt;24&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-25&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-25&#34;&gt;25&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-26&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-26&#34;&gt;26&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-27&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-27&#34;&gt;27&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-28&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-28&#34;&gt;28&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-29&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-29&#34;&gt;29&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-30&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-30&#34;&gt;30&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-31&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-31&#34;&gt;31&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-32&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-32&#34;&gt;32&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-33&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-33&#34;&gt;33&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-34&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-34&#34;&gt;34&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-35&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-35&#34;&gt;35&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-36&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-36&#34;&gt;36&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-37&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-37&#34;&gt;37&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-38&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-38&#34;&gt;38&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-39&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-39&#34;&gt;39&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-40&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-40&#34;&gt;40&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-41&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-41&#34;&gt;41&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;s&#34;&gt;&amp;#34;runtime&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;s&#34;&gt;&amp;#34;sync&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WaitGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;timer started&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;After&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;c1&#34;&gt;// NOTE: this never happens while it can&amp;#39;t get any chance to run by scheduler&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;c1&#34;&gt;// DO NOTHING&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;c1&#34;&gt;// NOTE: doing any I/O here can yield to gorountine scheduler&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WaitGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GOMAXPROCS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bye&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h1 id=&#34;실행결과-결론-생각&#34;&gt;실행결과, 결론, 생각&lt;/h1&gt;&#xA;&lt;p&gt;예상한대로,&lt;/p&gt;</description>
    </item>
    <item>
      <title>ASDF으로 간단한 의존성 연결과 로딩하기</title>
      <link>https://ageldama.github.io/posts/2018-11nov/cl-asdf-custom-load-script/</link>
      <pubDate>Sat, 03 Nov 2018 19:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-11nov/cl-asdf-custom-load-script/</guid>
      <description>&lt;h1 id=&#34;system-이런게-왜-필요하지-require있잖아&#34;&gt;System? 이런게 왜 필요하지? &lt;code&gt;require&lt;/code&gt;있잖아&lt;/h1&gt;&#xA;&lt;p&gt;대부분의 유명한 프로그래밍언어들이 &lt;em&gt;커먼리습의 System&lt;/em&gt; 에 대응하는&#xA;기능이 명확하게 없으니까, 다른 프로그래밍 하거나 하는 방법으로&#xA;이야기를 하지는 않아야겠다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://lispcookbook.github.io/cl-cookbook/systems.html&#34;&gt;https://lispcookbook.github.io/cl-cookbook/systems.html&lt;/a&gt; 에서 마음에 드는 설명을 찾을수 있다.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A &lt;strong&gt;system&lt;/strong&gt; is a collection of Lisp files that together constitute an&#xA;application or a library, and that should therefore be managed as a&#xA;whole. A &lt;strong&gt;system definition&lt;/strong&gt; describes which source files make up the&#xA;system, what the dependencies among them are, and the order they&#xA;should be compiled and loaded in.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CQuery &#43; LSP vs CMake-IDE &#43; RTags</title>
      <link>https://ageldama.github.io/posts/2018-09sep/cquery-vs-cmake-ide/</link>
      <pubDate>Sun, 23 Sep 2018 12:00:00 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2018-09sep/cquery-vs-cmake-ide/</guid>
      <description>&lt;p&gt;LSP + CQuery을 써보려고 했는데, 결국 &lt;a href=&#34;https://ageldama.github.io/posts/2018-05may-emacs-cmake-ide-screencast/&#34;&gt;CMake-IDE +&#xA;RTags&lt;/a&gt; 조합으로&#xA;원래대로 쓰게될거 같아. :&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;_build/&lt;/code&gt; 와 같이 CMake, Ninja, Makefile등의 파일들을 별도의&#xA;디렉토리로 만들어서 필드하고 싶은데, 제대로 지원을 못한다.&#xA;1. 그냥 프로젝트 소스코드랑 같이 generate하고 &lt;code&gt;gcc&lt;/code&gt;등의 중간&#xA;파일이 모두 같이 남아서 지저분해져서 싫어함.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;아직은 별로 내 마음에 꼭 들게 만들기는 어려울거 같아서. 그래도&#xA;인상적이었던 부분들:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;flycheck에 전용으로 연동되어 있는 점.&lt;/li&gt;&#xA;&lt;li&gt;company-lsp이 생각보다 훨씬 부드럽고 자동완성 잘되는거.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;미래에는 그냥 LSP기반만 남을거 같아서, 이것도 &amp;ldquo;helm-rg의 모험&amp;quot;처럼&#xA;아직은 완전히 전환은 못할거 같긴하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>예전 모나드를 이용한 비동기코드의 정리에 대한 아이디어를 다시 생각해보기</title>
      <link>https://ageldama.github.io/posts/2017/2017-02-26-aync-rxjava-and-monad/</link>
      <pubDate>Sun, 26 Feb 2017 13:50:00 +0100</pubDate>
      <guid>https://ageldama.github.io/posts/2017/2017-02-26-aync-rxjava-and-monad/</guid>
      <description>&lt;p&gt;예전 내가 썼던 블로그가 갑자기 떠올랐다. &lt;a href=&#34;http://ageldama.blogspot.de/2012/03/nodejs-haskell-io-monad.html&#34;&gt;http://ageldama.blogspot.de/2012/03/nodejs-haskell-io-monad.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;내용은,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;콜백헬 싫다.&lt;/li&gt;&#xA;&lt;li&gt;그런데, 하스켈의 IO Monad처럼 imperative code을 작성할 수 있으면,&#xA;3. 이것들끼리의 제어권을 주고 받는걸 event loop측에서 제어하면서도,&#xA;4. 각각의 statements끼리 그냥 주욱 흐름대로 작성한것과 다르지 않게 짜기 쉽다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;굳이 이 얘기 왜 하냐하면, 사실 요즘에 RxJava2 보고, Python3에서&#xA;asyncio 같은거 보면서 이런거, 그러니까 결국엔 모나드스러운 체이닝을&#xA;구현하고, 그걸로 콜백들을 풀어서 잘 해결하고 있는거 같은 인상이&#xA;들어서.&lt;/p&gt;&#xA;&lt;p&gt;결론? 내 아이디어 부심. 그리고 조금 더 잘 생각하고 실제로 어떻게&#xA;구현할지 고민해봤다면 좋았을거라는, 나 자신의 능력 한탄하기.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
