<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on 아겔로그</title>
    <link>https://ageldama.github.io/categories/coding/</link>
    <description>Recent content in Coding on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;https://ageldama.github.io/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Thu, 02 Mar 2023 17:50:00 +0000</lastBuildDate>
    <atom:link href="https://ageldama.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>`ncal -3` 직접 Perl으로 짜봤다</title>
      <link>https://ageldama.github.io/posts/2023-03mar/perl-cal3/</link>
      <pubDate>Thu, 02 Mar 2023 17:50:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-03mar/perl-cal3/</guid>
      <description>&lt;p&gt;&#xA;&lt;code class=&#34;verbatim&#34;&gt;ncal -3&lt;/code&gt; 이 뭐냐하면:&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://man7.org/linux/man-pages/man1/cal.1.html&#34;&gt;https://man7.org/linux/man-pages/man1/cal.1.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;…뭐 이런건데, 개인적으로 저전력 글쓰기 전용머신에서 사용하는&#xA;스크립트에서 배포판이 달라서 패키지를 못찾겠어서 &lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, …그냥 직접&#xA;짜서 대체했다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;a href=&#34;https://github.com/ageldama/configs/commit/66bd92b42ba5a5ee03b9336370c3a8f84293e488&#34;&gt;https://github.com/ageldama/configs/commit/66bd92b42ba5a5ee03b9336370c3a8f84293e488&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;그래서 스크린샷은:&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;img src=&#34;https://ageldama.github.io/2023-03mar/journal-edit-cal3.png&#34; alt=&#34;/2023-03mar/journal-edit-cal3.png&#34; title=&#34;/2023-03mar/journal-edit-cal3.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;재밌었던 부분은:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;어차피 Perl으로 전부 짜서 쓰는 스크립트였는데,&#xA;아예 외부 커맨드라인 도구 의존성을 더 없애서 뿌듯하다.&lt;/li&gt;&#xA;&lt;li&gt;매달 달력을 문자열으로 뽑았는데, 3달치를 뽑아서, 이걸 한 row에&#xA;표시하고 싶었는데, &lt;a href=&#34;https://metacpan.org/pod/Text::Table&#34;&gt;Text::Table&lt;/a&gt;으로 적절히 간단히 완료.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://metacpan.org/pod/Term::ANSIColor&#34;&gt;Term::ANSIColor&lt;/a&gt;와 &lt;a href=&#34;https://perldoc.perl.org/perlre&#34;&gt;perlre&lt;/a&gt;을 써서 깔끔하게 원하는 일자에 highlighting&#xA;해서 편안했다.&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;…더 해킹을 해서, &lt;code class=&#34;verbatim&#34;&gt;calendar(..)&lt;/code&gt; 결과문자열을 적당히 파싱해서,&#xA;작은 Text::Table으로 만들어서, 그것들으로 조합하고 했었어도 될거&#xA;같아.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;: Golang-ish `defer`-macro</title>
      <link>https://ageldama.github.io/posts/2023-03mar/cxx-defer/</link>
      <pubDate>Thu, 02 Mar 2023 16:00:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-03mar/cxx-defer/</guid>
      <description>&lt;p&gt;&#xA;별거 없는데, 문득 심심해서 툭닥거려봤다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;div&gt;&#xA;  &lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-1&#34;&gt;원하는 것과 접근법&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-2&#34;&gt;&lt;code class=&#34;verbatim&#34;&gt;defer.inl&lt;/code&gt; :&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-3&#34;&gt;사용예&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-4&#34;&gt;제약사항과 생각해볼꺼리&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#headline-5&#34;&gt;Footnotes&lt;/a&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/nav&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-1&#34;&gt;&#xA;원하는 것과 접근법&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://go.dev/blog/defer-panic-and-recover&#34;&gt;https://go.dev/blog/defer-panic-and-recover&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.rs/defer/latest/defer/fn.defer.html&#34;&gt;https://docs.rs/defer/latest/defer/fn.defer.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ziglang.org/documentation/master/#defer&#34;&gt;https://ziglang.org/documentation/master/#defer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;  golang/zig에서처럼 &lt;code class=&#34;verbatim&#34;&gt;defer&lt;/code&gt; 등록한 LIFO순서대로 호출되도록.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;  검색해보면, 대부분 RAII을 사용하거나 하는 것들이 보인다:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://duckduckgo.com/?q=c%2B%2B+golang+defer&#34;&gt;DDG: c++ golang defer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/33050620/golang-style-defer-in-c&#34;&gt;https://stackoverflow.com/questions/33050620/golang-style-defer-in-c&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/45617758/proper-way-to-release-resources-with-defer-in-a-loop&#34;&gt;https://stackoverflow.com/questions/45617758/proper-way-to-release-resources-with-defer-in-a-loop&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://codesire-deng.github.io/2022/02/06/One-Minute-to-C-defer/&#34;&gt;https://codesire-deng.github.io/2022/02/06/One-Minute-to-C-defer/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;  …그냥 &lt;code class=&#34;verbatim&#34;&gt;std::shared_ptr&amp;lt;void&amp;gt;&lt;/code&gt; 을 이용하는 방식이 마음에&#xA;  들었다. 그리고 조금 더 간단하게 사용하려고 매크로로 만들어 봤다.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;headline-2&#34;&gt;&#xA;&lt;code class=&#34;verbatim&#34;&gt;defer.inl&lt;/code&gt; :&#xA;&lt;/h2&gt;&#xA;&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;&#xA;&lt;div class=&#34;src src-c++&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;13&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#13&#34;&gt;13&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cm&#34;&gt;/* -*- mode: c++; -*- */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cp&#34;&gt;#ifndef defer_INL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;cp&#34;&gt;#define defer_INL 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cp&#34;&gt;#define _Defer_CONCAT_IMPL( x, y ) x##y&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;cp&#34;&gt;#define _Defer_CONCAT( x, y ) _Defer_CONCAT_IMPL( x, y )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cp&#34;&gt;#define Defer(blk) std::shared_ptr&amp;lt;void&amp;gt; _Defer_CONCAT(Defer_, __COUNTER__ )(nullptr, blk)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cp&#34;&gt;#endif &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*defer_INL*/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html&#34;&gt;&lt;code class=&#34;verbatim&#34;&gt;__COUNTER__&lt;/code&gt;&lt;/a&gt; 이용해서 매크로가 생성한 &lt;code class=&#34;verbatim&#34;&gt;std::shared_ptr&amp;lt;..&amp;gt;&lt;/code&gt; 변수의&#xA;  이름이 겹치지 않도록 해봤다. (…위에 검색한 링크들에도 사용하듯이)&lt;/p&gt;</description>
    </item>
    <item>
      <title>&#34;모두를 위한 algebraic effects!&#34; ...정말루?</title>
      <link>https://ageldama.github.io/posts/2022-06jun/algebraic-effects-for-everyone/</link>
      <pubDate>Mon, 13 Jun 2022 14:11:14 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/algebraic-effects-for-everyone/</guid>
      <description>&lt;p&gt;뭐 대충 다음과 같은 글들:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.eff-lang.org/handlers-tutorial.pdf&#34;&gt;https://www.eff-lang.org/handlers-tutorial.pdf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf&#34;&gt;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;그리고 몇 개의 구현체, 포스팅들: (아직은 별루인거 같은데)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/fused-effects&#34;&gt;https://hackage.haskell.org/package/fused-effects&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dry-rb/dry-effects&#34;&gt;https://github.com/dry-rb/dry-effects&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/digital-fabric/affect&#34;&gt;https://github.com/digital-fabric/affect&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/macabeus/js-proposal-algebraic-effects&#34;&gt;https://github.com/macabeus/js-proposal-algebraic-effects&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nythrox/effects.js&#34;&gt;https://github.com/nythrox/effects.js&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.janestreet.com/tech-talks/effective-programming/&#34;&gt;https://www.janestreet.com/tech-talks/effective-programming/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ocaml-multicore/effects-examples&#34;&gt;https://github.com/ocaml-multicore/effects-examples&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://overreacted.io/algebraic-effects-for-the-rest-of-us/&#34;&gt;https://overreacted.io/algebraic-effects-for-the-rest-of-us/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;음&amp;hellip; 분명히 한국말으로 번역도 해놓았고, 심지어 js버젼으로 설명/예시도 있는데 나는 전혀 모르겠다 싶었음.&lt;/p&gt;&#xA;&lt;p&gt;오히려 dry-rb, affect이 더 명확하기는 한거 같아.&lt;/p&gt;&#xA;&lt;p&gt;가장 실용적으로 접근한 예는, ocaml-multicore에서 활용한 것들 같아 보인다.&lt;/p&gt;&#xA;&lt;p&gt;분명히 장점을 볼 수 있을거 같은 개념 같다.&lt;/p&gt;&#xA;&lt;p&gt;왜냐하면,&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;지금의 monad을 이용한 효과와 사용처의 분리 방식을 생각해보면,&lt;/li&gt;&#xA;&lt;li&gt;하나의 monad context에서는, 한가지 타입의 monad만을 표현가능.&#xA;&lt;ol&gt;&#xA;&lt;li&gt;그래서 여러개의 monad context을 위해 monad transformer 같은것들으로 stacking하여 사용.&lt;/li&gt;&#xA;&lt;li&gt;(&amp;hellip;그때 그때 Haskell do-notation등에 따라 분리해서 표현)&lt;/li&gt;&#xA;&lt;li&gt;좋은점이라면 좋은점일수도 있겠지만.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;그런데, aeffects을 이용한다면,&#xA;&lt;ol&gt;&#xA;&lt;li&gt;굳이 그렇게 복잡하게 나누지 않아도 괜찮고,&lt;/li&gt;&#xA;&lt;li&gt;monad처럼 사용처에서 그 효과의 내용을 분리하기도 좋아 보여.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;당연히 그렇기 때문에, 원래의 모나드에서 같는 장점을 그대로 잃지 않으면서, 더 평범하게 적어나가기 좋을거 같다. (&amp;hellip;일반적인 imperative programming language에서 I/O/async/await, Maybe등이 동시에 나오거나, &amp;hellip;처럼)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
