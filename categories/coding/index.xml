<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on 아겔로그</title>
    <link>https://ageldama.github.io/categories/coding/</link>
    <description>Recent content in Coding on 아겔로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <copyright>© &lt;a href=&#39;https://ageldama.github.io/myself&#39;&gt;ageldama&lt;/a&gt; 👾</copyright>
    <lastBuildDate>Thu, 02 Mar 2023 17:50:00 +0000</lastBuildDate>
    <atom:link href="https://ageldama.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>`ncal -3` 직접 Perl으로 짜봤다</title>
      <link>https://ageldama.github.io/posts/2023-03mar/perl-cal3/</link>
      <pubDate>Thu, 02 Mar 2023 17:50:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-03mar/perl-cal3/</guid>
      <description>ncal -3 이 뭐냐하면:&#xA;https://man7.org/linux/man-pages/man1/cal.1.html&#xA;…뭐 이런건데, 개인적으로 저전력 글쓰기 전용머신에서 사용하는 스크립트에서 배포판이 달라서 패키지를 못찾겠어서 1, …그냥 직접 짜서 대체했다.&#xA;https://github.com/ageldama/configs/commit/66bd92b42ba5a5ee03b9336370c3a8f84293e488&#xA;그래서 스크린샷은:&#xA;재밌었던 부분은:&#xA;어차피 Perl으로 전부 짜서 쓰는 스크립트였는데, 아예 외부 커맨드라인 도구 의존성을 더 없애서 뿌듯하다. 매달 달력을 문자열으로 뽑았는데, 3달치를 뽑아서, 이걸 한 row에 표시하고 싶었는데, Text::Table으로 적절히 간단히 완료. Term::ANSIColor와 perlre을 써서 깔끔하게 원하는 일자에 highlighting 해서 편안했다. …더 해킹을 해서, calendar(..) 결과문자열을 적당히 파싱해서, 작은 Text::Table으로 만들어서, 그것들으로 조합하고 했었어도 될거 같아.</description>
    </item>
    <item>
      <title>C&#43;&#43;: Golang-ish `defer`-macro</title>
      <link>https://ageldama.github.io/posts/2023-03mar/cxx-defer/</link>
      <pubDate>Thu, 02 Mar 2023 16:00:00 +0000</pubDate>
      <guid>https://ageldama.github.io/posts/2023-03mar/cxx-defer/</guid>
      <description>별거 없는데, 문득 심심해서 툭닥거려봤다.&#xA;원하는 것과 접근법 defer.inl : 사용예 제약사항과 생각해볼꺼리 Footnotes 원하는 것과 접근법 https://go.dev/blog/defer-panic-and-recover https://docs.rs/defer/latest/defer/fn.defer.html https://ziglang.org/documentation/master/#defer golang/zig에서처럼 defer 등록한 LIFO순서대로 호출되도록.&#xA;검색해보면, 대부분 RAII을 사용하거나 하는 것들이 보인다:&#xA;DDG: c++ golang defer https://stackoverflow.com/questions/33050620/golang-style-defer-in-c https://stackoverflow.com/questions/45617758/proper-way-to-release-resources-with-defer-in-a-loop https://codesire-deng.github.io/2022/02/06/One-Minute-to-C-defer/ …그냥 std::shared_ptr&amp;lt;void&amp;gt; 을 이용하는 방식이 마음에 들었다. 그리고 조금 더 간단하게 사용하려고 매크로로 만들어 봤다.&#xA;defer.inl : 1 2 3 4 5 6 7 8 9 10 11 12 13 /* -*- mode: c++; -*- */ #ifndef defer_INL #define defer_INL 1 #include &amp;lt;memory&amp;gt; #define _Defer_CONCAT_IMPL( x, y ) x##y #define _Defer_CONCAT( x, y ) _Defer_CONCAT_IMPL( x, y ) #define Defer(blk) std::shared_ptr&amp;lt;void&amp;gt; _Defer_CONCAT(Defer_, __COUNTER__ )(nullptr, blk) #endif /*defer_INL*/ __COUNTER__ 이용해서 매크로가 생성한 std::shared_ptr&amp;lt;.</description>
    </item>
    <item>
      <title>&#34;모두를 위한 algebraic effects!&#34; ...정말루?</title>
      <link>https://ageldama.github.io/posts/2022-06jun/algebraic-effects-for-everyone/</link>
      <pubDate>Mon, 13 Jun 2022 14:11:14 +0900</pubDate>
      <guid>https://ageldama.github.io/posts/2022-06jun/algebraic-effects-for-everyone/</guid>
      <description>뭐 대충 다음과 같은 글들:&#xA;https://www.eff-lang.org/handlers-tutorial.pdf&#xA;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf&#xA;&amp;hellip;그리고 몇 개의 구현체, 포스팅들: (아직은 별루인거 같은데)&#xA;https://hackage.haskell.org/package/fused-effects&#xA;https://github.com/dry-rb/dry-effects&#xA;https://github.com/digital-fabric/affect&#xA;https://github.com/macabeus/js-proposal-algebraic-effects&#xA;https://github.com/nythrox/effects.js&#xA;https://www.janestreet.com/tech-talks/effective-programming/&#xA;https://github.com/ocaml-multicore/effects-examples&#xA;https://overreacted.io/algebraic-effects-for-the-rest-of-us/&#xA;&amp;hellip;음&amp;hellip; 분명히 한국말으로 번역도 해놓았고, 심지어 js버젼으로 설명/예시도 있는데 나는 전혀 모르겠다 싶었음.&#xA;오히려 dry-rb, affect이 더 명확하기는 한거 같아.&#xA;가장 실용적으로 접근한 예는, ocaml-multicore에서 활용한 것들 같아 보인다.&#xA;분명히 장점을 볼 수 있을거 같은 개념 같다.&#xA;왜냐하면,&#xA;지금의 monad을 이용한 효과와 사용처의 분리 방식을 생각해보면, 하나의 monad context에서는, 한가지 타입의 monad만을 표현가능.</description>
    </item>
  </channel>
</rss>
